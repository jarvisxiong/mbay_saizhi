/**
 * WebServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.2  Built on : Apr 17, 2012 (05:33:49 IST)
 */
package org.sz.mbay.sms.sdk;

/*
 *  WebServiceStub java implementation
 */
@SuppressWarnings("rawtypes")
public class WebServiceStub extends org.apache.axis2.client.Stub {
    protected org.apache.axis2.description.AxisOperation[] _operations;

    // hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
	private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();

    private static int counter = 0;

    private static synchronized java.lang.String getUniqueSuffix() {
	// reset the counter if it is greater than 99999
	if (counter > 99999) {
	    counter = 0;
	}
	counter = counter + 1;
	return java.lang.Long.toString(java.lang.System.currentTimeMillis())
		+ "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {

	// creating the Service with a unique name
	_service = new org.apache.axis2.description.AxisService("WebService"
		+ getUniqueSuffix());
	addAnonymousOperations();

	// creating the operations
	org.apache.axis2.description.AxisOperation __operation;

	_operations = new org.apache.axis2.description.AxisOperation[51];

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "balance"));
	_service.addOperation(__operation);

	_operations[0] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "getAllInfo2"));
	_service.addOperation(__operation);

	_operations[1] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "sMSTest"));
	_service.addOperation(__operation);

	_operations[2] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mmsFileMT"));
	_service.addOperation(__operation);

	_operations[3] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "msgid"));
	_service.addOperation(__operation);

	_operations[4] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "sendSMS_R"));
	_service.addOperation(__operation);

	_operations[5] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend"));
	_service.addOperation(__operation);

	_operations[6] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "getFlag"));
	_service.addOperation(__operation);

	_operations[7] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "rECSMS_UTF8"));
	_service.addOperation(__operation);

	_operations[8] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_DES"));
	_service.addOperation(__operation);

	_operations[9] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "getAllInfo"));
	_service.addOperation(__operation);

	_operations[10] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "getGaoDuan"));
	_service.addOperation(__operation);

	_operations[11] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdAudioSend"));
	_service.addOperation(__operation);

	_operations[12] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "report2DES"));
	_service.addOperation(__operation);

	_operations[13] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_g"));
	_service.addOperation(__operation);

	_operations[14] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdFaxSend"));
	_service.addOperation(__operation);

	_operations[15] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "rECSMSEx_UTF8"));
	_service.addOperation(__operation);

	_operations[16] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "report"));
	_service.addOperation(__operation);

	_operations[17] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend_ex"));
	_service.addOperation(__operation);

	_operations[18] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "setGaoDuan"));
	_service.addOperation(__operation);

	_operations[19] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend"));
	_service.addOperation(__operation);

	_operations[20] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "uDPSIGNEX"));
	_service.addOperation(__operation);

	_operations[21] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "uDPPwd"));
	_service.addOperation(__operation);

	_operations[22] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_AES"));
	_service.addOperation(__operation);

	_operations[23] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "gxmt"));
	_service.addOperation(__operation);

	_operations[24] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "sendSMSEx_R"));
	_service.addOperation(__operation);

	_operations[25] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "bianliang"));
	_service.addOperation(__operation);

	_operations[26] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mongateCsGetSmsExEx"));
	_service.addOperation(__operation);

	_operations[27] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "register"));
	_service.addOperation(__operation);

	_operations[28] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsReceive"));
	_service.addOperation(__operation);

	_operations[29] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "rECSMS"));
	_service.addOperation(__operation);

	_operations[30] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mt"));
	_service.addOperation(__operation);

	_operations[31] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "sendSMS"));
	_service.addOperation(__operation);

	_operations[32] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mo2"));
	_service.addOperation(__operation);

	_operations[33] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "getCode"));
	_service.addOperation(__operation);

	_operations[34] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend_uex"));
	_service.addOperation(__operation);

	_operations[35] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "getBalance"));
	_service.addOperation(__operation);

	_operations[36] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSendF"));
	_service.addOperation(__operation);

	_operations[37] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "chargUp"));
	_service.addOperation(__operation);

	_operations[38] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "fileMT"));
	_service.addOperation(__operation);

	_operations[39] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mo"));
	_service.addOperation(__operation);

	_operations[40] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "rECSMSEx"));
	_service.addOperation(__operation);

	_operations[41] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "testCode"));
	_service.addOperation(__operation);

	_operations[42] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mongateCsSpSendSmsNew"));
	_service.addOperation(__operation);

	_operations[43] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_u"));
	_service.addOperation(__operation);

	_operations[44] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "getStatus"));
	_service.addOperation(__operation);

	_operations[45] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "mongateCsGetStatusReportExEx"));
	_service.addOperation(__operation);

	_operations[46] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "uDPSIGN"));
	_service.addOperation(__operation);

	_operations[47] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "unRegister"));
	_service.addOperation(__operation);

	_operations[48] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "sendSMSEx"));
	_service.addOperation(__operation);

	_operations[49] = __operation;

	__operation = new org.apache.axis2.description.OutInAxisOperation();

	__operation.setName(new javax.xml.namespace.QName(
		"http://tempuri.org/", "report2"));
	_service.addOperation(__operation);

	_operations[50] = __operation;

    }

    // populates the faults
    private void populateFaults() {

    }

    /**
     * Constructor that takes in a configContext
     */

    public WebServiceStub(
	    org.apache.axis2.context.ConfigurationContext configurationContext,
	    java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
	this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext and useseperate listner
     */
    public WebServiceStub(
	    org.apache.axis2.context.ConfigurationContext configurationContext,
	    java.lang.String targetEndpoint, boolean useSeparateListener)
	    throws org.apache.axis2.AxisFault {
	// To populate AxisService
	populateAxisService();
	populateFaults();

	_serviceClient = new org.apache.axis2.client.ServiceClient(
		configurationContext, _service);

	_serviceClient.getOptions().setTo(
		new org.apache.axis2.addressing.EndpointReference(
			targetEndpoint));
	_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

	// Set the soap version
	_serviceClient
		.getOptions()
		.setSoapVersionURI(
			org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);

    }

    /**
     * Default Constructor
     */
    public WebServiceStub(
	    org.apache.axis2.context.ConfigurationContext configurationContext)
	    throws org.apache.axis2.AxisFault {

	this(configurationContext,
		"http://sdk2.entinfo.cn:8060/webservice.asmx");

    }

    /**
     * Default Constructor
     */
    public WebServiceStub() throws org.apache.axis2.AxisFault {

	this("http://sdk2.entinfo.cn:8060/webservice.asmx");

    }

    /**
     * Constructor taking the target endpoint
     */
    public WebServiceStub(java.lang.String targetEndpoint)
	    throws org.apache.axis2.AxisFault {
	this(null, targetEndpoint);
    }

    /**
     * Auto generated method signature 查询余额：sn软件序列号;pwd加密密码md5(sn+password)
     * 
     * @see entinfo.cn.sdk.WebService#balance
     * @param balance0
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse balance(

    org.sz.mbay.sms.sdk.WebServiceStub.Balance balance0)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[0].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/balance");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), balance0,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "balance")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "balance"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "balance"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "balance"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "balance"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 查询余额：sn软件序列号;pwd加密密码md5(sn+password)
     * 
     * @see entinfo.cn.sdk.WebService#startbalance
     * @param balance0
     */
    public void startbalance(

    org.sz.mbay.sms.sdk.WebServiceStub.Balance balance0,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[0].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/balance");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), balance0,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "balance")),
		new javax.xml.namespace.QName("http://tempuri.org/", "balance"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultbalance((org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorbalance(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "balance"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"balance"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"balance"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorbalance(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbalance(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbalance(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbalance(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbalance(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbalance(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbalance(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbalance(f);
				    }
				} else {
				    callback.receiveErrorbalance(f);
				}
			    } else {
				callback.receiveErrorbalance(f);
			    }
			} else {
			    callback.receiveErrorbalance(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorbalance(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[0].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[0].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取软件序列号2参数：sn软件序列号;pwd序列号密码;
     * 
     * @see entinfo.cn.sdk.WebService#getAllInfo2
     * @param getAllInfo22
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response getAllInfo2(

    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2 getAllInfo22)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[1].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/GetAllInfo2");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), getAllInfo22,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "getAllInfo2")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "getAllInfo2"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "GetAllInfo2"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetAllInfo2"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetAllInfo2"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取软件序列号2参数：sn软件序列号;pwd序列号密码;
     * 
     * @see entinfo.cn.sdk.WebService#startgetAllInfo2
     * @param getAllInfo22
     */
    public void startgetAllInfo2(

    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2 getAllInfo22,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[1].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/GetAllInfo2");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), getAllInfo22,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "getAllInfo2")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"getAllInfo2"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgetAllInfo2((org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgetAllInfo2(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"GetAllInfo2"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetAllInfo2"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetAllInfo2"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgetAllInfo2(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo2(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo2(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo2(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo2(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo2(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo2(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo2(f);
				    }
				} else {
				    callback.receiveErrorgetAllInfo2(f);
				}
			    } else {
				callback.receiveErrorgetAllInfo2(f);
			    }
			} else {
			    callback.receiveErrorgetAllInfo2(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgetAllInfo2(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[1].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[1].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 通道测试：sn软件序列号;pwd序列号密码;mobile手机号列表，最多20个，以逗号,隔开
     * 
     * @see entinfo.cn.sdk.WebService#sMSTest
     * @param sMSTest4
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse sMSTest(

    org.sz.mbay.sms.sdk.WebServiceStub.SMSTest sMSTest4)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[2].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/SMSTest");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), sMSTest4,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "sMSTest")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "sMSTest"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "SMSTest"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SMSTest"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SMSTest"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 通道测试：sn软件序列号;pwd序列号密码;mobile手机号列表，最多20个，以逗号,隔开
     * 
     * @see entinfo.cn.sdk.WebService#startsMSTest
     * @param sMSTest4
     */
    public void startsMSTest(

    org.sz.mbay.sms.sdk.WebServiceStub.SMSTest sMSTest4,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[2].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/SMSTest");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), sMSTest4,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sMSTest")),
		new javax.xml.namespace.QName("http://tempuri.org/", "sMSTest"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultsMSTest((org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorsMSTest(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "SMSTest"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SMSTest"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SMSTest"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorsMSTest(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsMSTest(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsMSTest(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsMSTest(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsMSTest(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsMSTest(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsMSTest(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsMSTest(f);
				    }
				} else {
				    callback.receiveErrorsMSTest(f);
				}
			    } else {
				callback.receiveErrorsMSTest(f);
			    }
			} else {
			    callback.receiveErrorsMSTest(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorsMSTest(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[2].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[2].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 彩信文件传输：sn软件序列号;pwd加密密码md5(sn+password);rrid第一个接口返回id
     * ;content内容,base64编码.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#mmsFileMT
     * @param mmsFileMT6
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse mmsFileMT(

    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT mmsFileMT6)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[3].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mmsFileMT");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mmsFileMT6,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mmsFileMT")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mmsFileMT"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mmsFileMT"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mmsFileMT"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mmsFileMT"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 彩信文件传输：sn软件序列号
     * ;pwd加密密码md5(sn+password);rrid第一个接口返回id;content内容,base64编码.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startmmsFileMT
     * @param mmsFileMT6
     */
    public void startmmsFileMT(

    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT mmsFileMT6,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[3].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/mmsFileMT");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mmsFileMT6,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mmsFileMT")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mmsFileMT"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmmsFileMT((org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormmsFileMT(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mmsFileMT"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mmsFileMT"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mmsFileMT"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormmsFileMT(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormmsFileMT(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormmsFileMT(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormmsFileMT(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormmsFileMT(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormmsFileMT(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormmsFileMT(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormmsFileMT(f);
				    }
				} else {
				    callback.receiveErrormmsFileMT(f);
				}
			    } else {
				callback.receiveErrormmsFileMT(f);
			    }
			} else {
			    callback.receiveErrormmsFileMT(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormmsFileMT(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[3].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[3].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取信息ID：sn软件序列号;pwd加密密码md5(sn+password)
     * 
     * @see entinfo.cn.sdk.WebService#msgid
     * @param msgid8
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse msgid(

    org.sz.mbay.sms.sdk.WebServiceStub.Msgid msgid8)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[4].getName());
	    _operationClient.getOptions().setAction("http://tempuri.org/msgid");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), msgid8,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "msgid")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "msgid"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "msgid"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "msgid"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "msgid"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取信息ID：sn软件序列号;pwd加密密码md5(sn+password)
     * 
     * @see entinfo.cn.sdk.WebService#startmsgid
     * @param msgid8
     */
    public void startmsgid(

    org.sz.mbay.sms.sdk.WebServiceStub.Msgid msgid8,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[4].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/msgid");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), msgid8,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "msgid")),
		new javax.xml.namespace.QName("http://tempuri.org/", "msgid"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmsgid((org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormsgid(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "msgid"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"msgid"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"msgid"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormsgid(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormsgid(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormsgid(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormsgid(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormsgid(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormsgid(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormsgid(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormsgid(f);
				    }
				} else {
				    callback.receiveErrormsgid(f);
				}
			    } else {
				callback.receiveErrormsgid(f);
			    }
			} else {
			    callback.receiveErrormsgid(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormsgid(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[4].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[4].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd序列号密码;mobile手机号列表，以逗号,隔开;content发送内容;rrid唯一标识,全数字
     * 
     * @see entinfo.cn.sdk.WebService#sendSMS_R
     * @param sendSMS_R10
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse sendSMS_R(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R sendSMS_R10)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[5].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/SendSMS_R");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), sendSMS_R10,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "sendSMS_R")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "sendSMS_R"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "SendSMS_R"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMS_R"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMS_R"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;pwd序列号密码;mobile手机号列表，以逗号,隔开;content发送内容;rrid唯一标识,全数字
     * 
     * @see entinfo.cn.sdk.WebService#startsendSMS_R
     * @param sendSMS_R10
     */
    public void startsendSMS_R(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R sendSMS_R10,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[5].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/SendSMS_R");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), sendSMS_R10,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sendSMS_R")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"sendSMS_R"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultsendSMS_R((org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorsendSMS_R(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"SendSMS_R"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMS_R"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMS_R"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorsendSMS_R(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS_R(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS_R(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS_R(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS_R(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS_R(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS_R(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS_R(f);
				    }
				} else {
				    callback.receiveErrorsendSMS_R(f);
				}
			    } else {
				callback.receiveErrorsendSMS_R(f);
			    }
			} else {
			    callback.receiveErrorsendSMS_R(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorsendSMS_R(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[5].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[5].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 彩信发送：sn软件序列号;pwd加密密码md5(sn+password);title彩信主题
     * ;mobile手机号码,以英文逗号隔开;content内容
     * ,base64编码(文件名1,文件base64编码串;文件名2,文件base64编码串);stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#mdMmsSend
     * @param mdMmsSend12
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse mdMmsSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend mdMmsSend12)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[6].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdMmsSend");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdMmsSend12,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdMmsSend")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdMmsSend"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdMmsSend"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSend"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSend"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 彩信发送：sn软件序列号;
     * pwd加密密码md5(sn+password);title彩信主题;mobile手机号码,以英文逗号隔开;content内容
     * ,base64编码(文件名1,文件base64编码串;文件名2,文件base64编码串);stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startmdMmsSend
     * @param mdMmsSend12
     */
    public void startmdMmsSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend mdMmsSend12,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[6].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/mdMmsSend");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdMmsSend12,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSend")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdMmsSend"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdMmsSend((org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdMmsSend(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdMmsSend"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSend"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSend"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdMmsSend(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend(f);
				    }
				} else {
				    callback.receiveErrormdMmsSend(f);
				}
			    } else {
				callback.receiveErrormdMmsSend(f);
			    }
			} else {
			    callback.receiveErrormdMmsSend(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdMmsSend(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[6].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[6].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取软件序列号子号码长度：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#getFlag
     * @param getFlag14
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse getFlag(

    org.sz.mbay.sms.sdk.WebServiceStub.GetFlag getFlag14)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[7].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/GetFlag");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), getFlag14,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "getFlag")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "getFlag"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "GetFlag"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetFlag"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetFlag"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取软件序列号子号码长度：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#startgetFlag
     * @param getFlag14
     */
    public void startgetFlag(

    org.sz.mbay.sms.sdk.WebServiceStub.GetFlag getFlag14,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[7].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/GetFlag");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), getFlag14,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "getFlag")),
		new javax.xml.namespace.QName("http://tempuri.org/", "getFlag"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgetFlag((org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgetFlag(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "GetFlag"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetFlag"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetFlag"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgetFlag(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetFlag(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetFlag(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetFlag(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetFlag(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetFlag(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetFlag(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetFlag(f);
				    }
				} else {
				    callback.receiveErrorgetFlag(f);
				}
			    } else {
				callback.receiveErrorgetFlag(f);
			    }
			} else {
			    callback.receiveErrorgetFlag(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgetFlag(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[7].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[7].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 接收短信utf-8编码：sn软件序列号;pwd序列号密码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#rECSMS_UTF8
     * @param rECSMS_UTF816
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response rECSMS_UTF8(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8 rECSMS_UTF816)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[8].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/RECSMS_UTF8");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), rECSMS_UTF816,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "rECSMS_UTF8")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "rECSMS_UTF8"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "RECSMS_UTF8"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMS_UTF8"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMS_UTF8"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 接收短信utf-8编码：sn软件序列号;pwd序列号密码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#startrECSMS_UTF8
     * @param rECSMS_UTF816
     */
    public void startrECSMS_UTF8(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8 rECSMS_UTF816,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[8].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/RECSMS_UTF8");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), rECSMS_UTF816,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rECSMS_UTF8")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"rECSMS_UTF8"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultrECSMS_UTF8((org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorrECSMS_UTF8(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"RECSMS_UTF8"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMS_UTF8"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMS_UTF8"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorrECSMS_UTF8(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS_UTF8(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS_UTF8(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS_UTF8(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS_UTF8(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS_UTF8(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS_UTF8(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS_UTF8(f);
				    }
				} else {
				    callback.receiveErrorrECSMS_UTF8(f);
				}
			    } else {
				callback.receiveErrorrECSMS_UTF8(f);
			    }
			} else {
			    callback.receiveErrorrECSMS_UTF8(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorrECSMS_UTF8(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[8].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[8].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容utf-8编码;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#mdSmsSend_DES
     * @param mdSmsSend_DES18
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse mdSmsSend_DES(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES mdSmsSend_DES18)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[9].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdSmsSend_DES");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdSmsSend_DES18,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdSmsSend_DES")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdSmsSend_DES"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdSmsSend_DES"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_DES"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_DES"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容utf-8编码
     * ;ext扩展子号;stime定时时间,格式如2009-09-01 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startmdSmsSend_DES
     * @param mdSmsSend_DES18
     */
    public void startmdSmsSend_DES(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES mdSmsSend_DES18,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[9].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdSmsSend_DES");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdSmsSend_DES18,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_DES")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdSmsSend_DES"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdSmsSend_DES((org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdSmsSend_DES(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdSmsSend_DES"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_DES"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_DES"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdSmsSend_DES(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_DES(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_DES(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_DES(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_DES(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_DES(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_DES(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_DES(f);
				    }
				} else {
				    callback.receiveErrormdSmsSend_DES(f);
				}
			    } else {
				callback.receiveErrormdSmsSend_DES(f);
			    }
			} else {
			    callback.receiveErrormdSmsSend_DES(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdSmsSend_DES(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[9].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[9].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取软件序列号参数：sn软件序列号;pwd序列号密码;
     * 
     * @see entinfo.cn.sdk.WebService#getAllInfo
     * @param getAllInfo20
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse getAllInfo(

    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo getAllInfo20)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[10].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/GetAllInfo");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), getAllInfo20,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "getAllInfo")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "getAllInfo"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "GetAllInfo"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetAllInfo"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetAllInfo"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取软件序列号参数：sn软件序列号;pwd序列号密码;
     * 
     * @see entinfo.cn.sdk.WebService#startgetAllInfo
     * @param getAllInfo20
     */
    public void startgetAllInfo(

    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo getAllInfo20,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[10].getName());
	_operationClient.getOptions()
		.setAction("http://tempuri.org/GetAllInfo");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), getAllInfo20,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "getAllInfo")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"getAllInfo"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgetAllInfo((org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgetAllInfo(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"GetAllInfo"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetAllInfo"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetAllInfo"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgetAllInfo(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetAllInfo(f);
				    }
				} else {
				    callback.receiveErrorgetAllInfo(f);
				}
			    } else {
				callback.receiveErrorgetAllInfo(f);
			    }
			} else {
			    callback.receiveErrorgetAllInfo(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgetAllInfo(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[10].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[10].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取高端发送：sn软件序列号;pwd序列号密码;
     * 
     * @see entinfo.cn.sdk.WebService#getGaoDuan
     * @param getGaoDuan22
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse getGaoDuan(

    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan getGaoDuan22)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[11].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/GetGaoDuan");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), getGaoDuan22,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "getGaoDuan")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "getGaoDuan"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "GetGaoDuan"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetGaoDuan"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetGaoDuan"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取高端发送：sn软件序列号;pwd序列号密码;
     * 
     * @see entinfo.cn.sdk.WebService#startgetGaoDuan
     * @param getGaoDuan22
     */
    public void startgetGaoDuan(

    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan getGaoDuan22,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[11].getName());
	_operationClient.getOptions()
		.setAction("http://tempuri.org/GetGaoDuan");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), getGaoDuan22,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "getGaoDuan")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"getGaoDuan"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgetGaoDuan((org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgetGaoDuan(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"GetGaoDuan"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetGaoDuan"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetGaoDuan"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgetGaoDuan(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetGaoDuan(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetGaoDuan(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetGaoDuan(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetGaoDuan(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetGaoDuan(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetGaoDuan(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetGaoDuan(f);
				    }
				} else {
				    callback.receiveErrorgetGaoDuan(f);
				}
			    } else {
				callback.receiveErrorgetGaoDuan(f);
			    }
			} else {
			    callback.receiveErrorgetGaoDuan(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgetGaoDuan(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[11].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[11].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 语音发送：sn软件序列号;pwd加密密码md5(sn+password);title语音主题
     * ;mobile手机号码,以英文逗号隔开,为空表示语音合成请求
     * ;txt文本内容;content文件内容,base64编码(wav文件名,文件base64编码串
     * );srcnumber源号码;stime定时时间2010-07-05 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#mdAudioSend
     * @param mdAudioSend24
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse mdAudioSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend mdAudioSend24)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[12].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdAudioSend");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdAudioSend24,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdAudioSend")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdAudioSend"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdAudioSend"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdAudioSend"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdAudioSend"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 语音发送：sn软件序列号;
     * pwd加密密码md5(sn+password);title语音主题;mobile手机号码,以英文逗号隔开,为空表示语音合成请求
     * ;txt文本内容;content文件内容
     * ,base64编码(wav文件名,文件base64编码串);srcnumber源号码;stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startmdAudioSend
     * @param mdAudioSend24
     */
    public void startmdAudioSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend mdAudioSend24,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[12].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdAudioSend");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdAudioSend24,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdAudioSend")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdAudioSend"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdAudioSend((org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdAudioSend(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdAudioSend"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdAudioSend"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdAudioSend"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdAudioSend(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdAudioSend(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdAudioSend(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdAudioSend(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdAudioSend(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdAudioSend(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdAudioSend(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdAudioSend(f);
				    }
				} else {
				    callback.receiveErrormdAudioSend(f);
				}
			    } else {
				callback.receiveErrormdAudioSend(f);
			    }
			} else {
			    callback.receiveErrormdAudioSend(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdAudioSend(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[12].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[12].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 回执：sn软件序列号;pwd加密密码md5(sn+password);maxid最大id
     * 
     * @see entinfo.cn.sdk.WebService#report2DES
     * @param report2DES26
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse report2DES(

    org.sz.mbay.sms.sdk.WebServiceStub.Report2DES report2DES26)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[13].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/report2DES");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), report2DES26,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "report2DES")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "report2DES"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "report2DES"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "report2DES"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "report2DES"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 回执：sn软件序列号;pwd加密密码md5(sn+password);maxid最大id
     * 
     * @see entinfo.cn.sdk.WebService#startreport2DES
     * @param report2DES26
     */
    public void startreport2DES(

    org.sz.mbay.sms.sdk.WebServiceStub.Report2DES report2DES26,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[13].getName());
	_operationClient.getOptions()
		.setAction("http://tempuri.org/report2DES");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), report2DES26,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "report2DES")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"report2DES"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultreport2DES((org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorreport2DES(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"report2DES"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"report2DES"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"report2DES"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorreport2DES(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2DES(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2DES(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2DES(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2DES(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2DES(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2DES(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2DES(f);
				    }
				} else {
				    callback.receiveErrorreport2DES(f);
				}
			    } else {
				callback.receiveErrorreport2DES(f);
			    }
			} else {
			    callback.receiveErrorreport2DES(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorreport2DES(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[13].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[13].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#mdSmsSend_g
     * @param mdSmsSend_g28
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse mdSmsSend_g(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g mdSmsSend_g28)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[14].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdSmsSend_g");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdSmsSend_g28,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdSmsSend_g")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdSmsSend_g"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdSmsSend_g"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_g"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_g"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容;ext扩展子号
     * ;stime定时时间,格式如2009-09-01 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startmdSmsSend_g
     * @param mdSmsSend_g28
     */
    public void startmdSmsSend_g(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g mdSmsSend_g28,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[14].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdSmsSend_g");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdSmsSend_g28,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_g")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdSmsSend_g"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdSmsSend_g((org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdSmsSend_g(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdSmsSend_g"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_g"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_g"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdSmsSend_g(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_g(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_g(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_g(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_g(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_g(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_g(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_g(f);
				    }
				} else {
				    callback.receiveErrormdSmsSend_g(f);
				}
			    } else {
				callback.receiveErrormdSmsSend_g(f);
			    }
			} else {
			    callback.receiveErrormdSmsSend_g(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdSmsSend_g(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[14].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[14].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 传真发送：sn软件序列号;pwd加密密码md5(sn+password);title传真主题
     * ;mobile接收号码,以英文逗号隔开;content文件内容
     * ,base64编码(wav文件名,文件base64编码串);srcnumber发送号码;stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#mdFaxSend
     * @param mdFaxSend30
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse mdFaxSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend mdFaxSend30)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[15].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdFaxSend");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdFaxSend30,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdFaxSend")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdFaxSend"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdFaxSend"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdFaxSend"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdFaxSend"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 传真发送：sn软件序列号;
     * pwd加密密码md5(sn+password);title传真主题;mobile接收号码,以英文逗号隔开;content文件内容
     * ,base64编码(wav文件名,文件base64编码串);srcnumber发送号码;stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startmdFaxSend
     * @param mdFaxSend30
     */
    public void startmdFaxSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend mdFaxSend30,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[15].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/mdFaxSend");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdFaxSend30,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdFaxSend")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdFaxSend"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdFaxSend((org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdFaxSend(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdFaxSend"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdFaxSend"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdFaxSend"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdFaxSend(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdFaxSend(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdFaxSend(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdFaxSend(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdFaxSend(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdFaxSend(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdFaxSend(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdFaxSend(f);
				    }
				} else {
				    callback.receiveErrormdFaxSend(f);
				}
			    } else {
				callback.receiveErrormdFaxSend(f);
			    }
			} else {
			    callback.receiveErrormdFaxSend(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdFaxSend(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[15].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[15].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 网络版接收短信utf-8编码：sn软件序列号;pwd序列号密码;subcode子号码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#rECSMSEx_UTF8
     * @param rECSMSEx_UTF832
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response rECSMSEx_UTF8(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8 rECSMSEx_UTF832)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[16].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/RECSMSEx_UTF8");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), rECSMSEx_UTF832,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "rECSMSEx_UTF8")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "rECSMSEx_UTF8"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "RECSMSEx_UTF8"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMSEx_UTF8"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMSEx_UTF8"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 网络版接收短信utf-8编码：sn软件序列号;pwd序列号密码;subcode子号码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#startrECSMSEx_UTF8
     * @param rECSMSEx_UTF832
     */
    public void startrECSMSEx_UTF8(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8 rECSMSEx_UTF832,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[16].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/RECSMSEx_UTF8");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), rECSMSEx_UTF832,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rECSMSEx_UTF8")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"rECSMSEx_UTF8"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultrECSMSEx_UTF8((org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorrECSMSEx_UTF8(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"RECSMSEx_UTF8"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMSEx_UTF8"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMSEx_UTF8"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorrECSMSEx_UTF8(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx_UTF8(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx_UTF8(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx_UTF8(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx_UTF8(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx_UTF8(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx_UTF8(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx_UTF8(f);
				    }
				} else {
				    callback.receiveErrorrECSMSEx_UTF8(f);
				}
			    } else {
				callback.receiveErrorrECSMSEx_UTF8(f);
			    }
			} else {
			    callback.receiveErrorrECSMSEx_UTF8(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorrECSMSEx_UTF8(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[16].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[16].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 回执：sn软件序列号;pwd加密密码md5(sn+password);maxid最大id
     * 
     * @see entinfo.cn.sdk.WebService#report
     * @param report34
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse report(

    org.sz.mbay.sms.sdk.WebServiceStub.Report report34)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[17].getName());
	    _operationClient.getOptions()
		    .setAction("http://tempuri.org/report");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), report34,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "report")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "report"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "report"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "report"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "report"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 回执：sn软件序列号;pwd加密密码md5(sn+password);maxid最大id
     * 
     * @see entinfo.cn.sdk.WebService#startreport
     * @param report34
     */
    public void startreport(

    org.sz.mbay.sms.sdk.WebServiceStub.Report report34,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[17].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/report");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), report34,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "report")),
		new javax.xml.namespace.QName("http://tempuri.org/", "report"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultreport((org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorreport(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "report"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"report"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"report"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorreport(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport(f);
				    }
				} else {
				    callback.receiveErrorreport(f);
				}
			    } else {
				callback.receiveErrorreport(f);
			    }
			} else {
			    callback.receiveErrorreport(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorreport(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[17].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[17].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 彩信发送：sn软件序列号;pwd加密密码md5(sn+password);title彩信主题
     * ;mobile手机号码,以英文逗号隔开;content内容
     * ,base64编码(文件名1,文件base64编码串;文件名2,文件base64编码串);stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#mdMmsSend_ex
     * @param mdMmsSend_ex36
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse mdMmsSend_ex(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex mdMmsSend_ex36)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[18].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdMmsSend_ex");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdMmsSend_ex36,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdMmsSend_ex")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdMmsSend_ex"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdMmsSend_ex"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSend_ex"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSend_ex"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 彩信发送：sn软件序列号;
     * pwd加密密码md5(sn+password);title彩信主题;mobile手机号码,以英文逗号隔开;content内容
     * ,base64编码(文件名1,文件base64编码串;文件名2,文件base64编码串);stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startmdMmsSend_ex
     * @param mdMmsSend_ex36
     */
    public void startmdMmsSend_ex(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex mdMmsSend_ex36,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[18].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdMmsSend_ex");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdMmsSend_ex36,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSend_ex")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdMmsSend_ex"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdMmsSend_ex((org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdMmsSend_ex(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdMmsSend_ex"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSend_ex"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSend_ex"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdMmsSend_ex(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_ex(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_ex(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_ex(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_ex(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_ex(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_ex(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_ex(f);
				    }
				} else {
				    callback.receiveErrormdMmsSend_ex(f);
				}
			    } else {
				callback.receiveErrormdMmsSend_ex(f);
			    }
			} else {
			    callback.receiveErrormdMmsSend_ex(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdMmsSend_ex(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[18].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[18].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 设置高端发送：sn软件序列号;pwd序列号密码;gd参数1普通通道2高端通道;
     * 
     * @see entinfo.cn.sdk.WebService#setGaoDuan
     * @param setGaoDuan38
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse setGaoDuan(

    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan setGaoDuan38)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[19].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/SetGaoDuan");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), setGaoDuan38,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "setGaoDuan")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "setGaoDuan"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "SetGaoDuan"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SetGaoDuan"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SetGaoDuan"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 设置高端发送：sn软件序列号;pwd序列号密码;gd参数1普通通道2高端通道;
     * 
     * @see entinfo.cn.sdk.WebService#startsetGaoDuan
     * @param setGaoDuan38
     */
    public void startsetGaoDuan(

    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan setGaoDuan38,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[19].getName());
	_operationClient.getOptions()
		.setAction("http://tempuri.org/SetGaoDuan");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), setGaoDuan38,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "setGaoDuan")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"setGaoDuan"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultsetGaoDuan((org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorsetGaoDuan(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"SetGaoDuan"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SetGaoDuan"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SetGaoDuan"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorsetGaoDuan(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsetGaoDuan(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsetGaoDuan(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsetGaoDuan(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsetGaoDuan(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsetGaoDuan(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsetGaoDuan(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsetGaoDuan(f);
				    }
				} else {
				    callback.receiveErrorsetGaoDuan(f);
				}
			    } else {
				callback.receiveErrorsetGaoDuan(f);
			    }
			} else {
			    callback.receiveErrorsetGaoDuan(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorsetGaoDuan(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[19].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[19].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#mdSmsSend
     * @param mdSmsSend40
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse mdSmsSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend mdSmsSend40)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[20].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdSmsSend");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdSmsSend40,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdSmsSend")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdSmsSend"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdSmsSend"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容;ext扩展子号
     * ;stime定时时间,格式如2009-09-01 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startmdSmsSend
     * @param mdSmsSend40
     */
    public void startmdSmsSend(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend mdSmsSend40,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[20].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/mdSmsSend");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdSmsSend40,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdSmsSend"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdSmsSend((org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdSmsSend(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdSmsSend"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdSmsSend(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend(f);
				    }
				} else {
				    callback.receiveErrormdSmsSend(f);
				}
			    } else {
				callback.receiveErrormdSmsSend(f);
			    }
			} else {
			    callback.receiveErrormdSmsSend(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdSmsSend(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[20].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[20].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 更改签名（网络版）：sn软件序列号;pwd序列号密码;sign企业签名(2-15个字符);subcode最长9位数字扩展码;comName企业全称
     * 
     * @see entinfo.cn.sdk.WebService#uDPSIGNEX
     * @param uDPSIGNEX42
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse uDPSIGNEX(

    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX uDPSIGNEX42)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[21].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/UDPSIGNEX");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), uDPSIGNEX42,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "uDPSIGNEX")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "uDPSIGNEX"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "UDPSIGNEX"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UDPSIGNEX"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UDPSIGNEX"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 更改签名（网络版）：sn软件序列号;pwd序列号密码;sign企业签名(2-15个字符);subcode最长9位数字扩展码;comName企业全称
     * 
     * @see entinfo.cn.sdk.WebService#startuDPSIGNEX
     * @param uDPSIGNEX42
     */
    public void startuDPSIGNEX(

    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX uDPSIGNEX42,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[21].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/UDPSIGNEX");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), uDPSIGNEX42,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "uDPSIGNEX")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"uDPSIGNEX"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultuDPSIGNEX((org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErroruDPSIGNEX(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"UDPSIGNEX"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UDPSIGNEX"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UDPSIGNEX"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErroruDPSIGNEX(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGNEX(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGNEX(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGNEX(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGNEX(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGNEX(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGNEX(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGNEX(f);
				    }
				} else {
				    callback.receiveErroruDPSIGNEX(f);
				}
			    } else {
				callback.receiveErroruDPSIGNEX(f);
			    }
			} else {
			    callback.receiveErroruDPSIGNEX(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErroruDPSIGNEX(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[21].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[21].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 更改密码：sn软件序列号;pwd序列号密码;newpwd新密码
     * 
     * @see entinfo.cn.sdk.WebService#uDPPwd
     * @param uDPPwd44
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse uDPPwd(

    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd uDPPwd44)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[22].getName());
	    _operationClient.getOptions()
		    .setAction("http://tempuri.org/UDPPwd");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), uDPPwd44,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "uDPPwd")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "uDPPwd"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "UDPPwd"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UDPPwd"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UDPPwd"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 更改密码：sn软件序列号;pwd序列号密码;newpwd新密码
     * 
     * @see entinfo.cn.sdk.WebService#startuDPPwd
     * @param uDPPwd44
     */
    public void startuDPPwd(

    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd uDPPwd44,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[22].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/UDPPwd");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), uDPPwd44,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "uDPPwd")),
		new javax.xml.namespace.QName("http://tempuri.org/", "uDPPwd"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultuDPPwd((org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErroruDPPwd(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "UDPPwd"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UDPPwd"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UDPPwd"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErroruDPPwd(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPPwd(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPPwd(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPPwd(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPPwd(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPPwd(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPPwd(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPPwd(f);
				    }
				} else {
				    callback.receiveErroruDPPwd(f);
				}
			    } else {
				callback.receiveErroruDPPwd(f);
			    }
			} else {
			    callback.receiveErroruDPPwd(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErroruDPPwd(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[22].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[22].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容utf-8编码;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#mdSmsSend_AES
     * @param mdSmsSend_AES46
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse mdSmsSend_AES(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES mdSmsSend_AES46)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[23].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdSmsSend_AES");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdSmsSend_AES46,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdSmsSend_AES")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdSmsSend_AES"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdSmsSend_AES"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_AES"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_AES"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容utf-8编码
     * ;ext扩展子号;stime定时时间,格式如2009-09-01 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startmdSmsSend_AES
     * @param mdSmsSend_AES46
     */
    public void startmdSmsSend_AES(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES mdSmsSend_AES46,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[23].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdSmsSend_AES");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdSmsSend_AES46,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_AES")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdSmsSend_AES"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdSmsSend_AES((org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdSmsSend_AES(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdSmsSend_AES"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_AES"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_AES"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdSmsSend_AES(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_AES(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_AES(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_AES(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_AES(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_AES(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_AES(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_AES(f);
				    }
				} else {
				    callback.receiveErrormdSmsSend_AES(f);
				}
			    } else {
				callback.receiveErrormdSmsSend_AES(f);
			    }
			} else {
			    callback.receiveErrormdSmsSend_AES(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdSmsSend_AES(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[23].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[23].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 个性短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容,GB2312编码,以逗号,隔开;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#gxmt
     * @param gxmt48
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse gxmt(

    org.sz.mbay.sms.sdk.WebServiceStub.Gxmt gxmt48)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[24].getName());
	    _operationClient.getOptions().setAction("http://tempuri.org/gxmt");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(
		    getFactory(_operationClient.getOptions()
			    .getSoapVersionURI()),
		    gxmt48,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "gxmt")),
		    new javax.xml.namespace.QName("http://tempuri.org/", "gxmt"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "gxmt"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "gxmt"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "gxmt"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 个性短信：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容,GB2312编码
     * ,以逗号,隔开;ext扩展子号;stime定时时间,格式如2009-09-01 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startgxmt
     * @param gxmt48
     */
    public void startgxmt(

    org.sz.mbay.sms.sdk.WebServiceStub.Gxmt gxmt48,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[24].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/gxmt");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), gxmt48,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "gxmt")),
		new javax.xml.namespace.QName("http://tempuri.org/", "gxmt"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgxmt((org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgxmt(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "gxmt"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"gxmt"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"gxmt"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgxmt(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgxmt(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgxmt(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgxmt(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgxmt(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgxmt(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgxmt(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgxmt(f);
				    }
				} else {
				    callback.receiveErrorgxmt(f);
				}
			    } else {
				callback.receiveErrorgxmt(f);
			    }
			} else {
			    callback.receiveErrorgxmt(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgxmt(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[24].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[24].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信（可扩展）：sn软件序列号;pwd序列号密码;mobile手机号列表，以逗号
     * ,隔开;content发送内容;subcode最长9位数字扩展码;rrid唯一标识,全数字
     * 
     * @see entinfo.cn.sdk.WebService#sendSMSEx_R
     * @param sendSMSEx_R50
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse sendSMSEx_R(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R sendSMSEx_R50)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[25].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/SendSMSEx_R");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), sendSMSEx_R50,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "sendSMSEx_R")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "sendSMSEx_R"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "SendSMSEx_R"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMSEx_R"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMSEx_R"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信（可扩展）：sn软件序列号
     * ;pwd序列号密码;mobile手机号列表，以逗号,隔开;content发送内容;subcode最长9位数字扩展码;rrid唯一标识,全数字
     * 
     * @see entinfo.cn.sdk.WebService#startsendSMSEx_R
     * @param sendSMSEx_R50
     */
    public void startsendSMSEx_R(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R sendSMSEx_R50,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[25].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/SendSMSEx_R");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), sendSMSEx_R50,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sendSMSEx_R")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"sendSMSEx_R"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultsendSMSEx_R((org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorsendSMSEx_R(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"SendSMSEx_R"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMSEx_R"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMSEx_R"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorsendSMSEx_R(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx_R(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx_R(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx_R(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx_R(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx_R(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx_R(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx_R(f);
				    }
				} else {
				    callback.receiveErrorsendSMSEx_R(f);
				}
			    } else {
				callback.receiveErrorsendSMSEx_R(f);
			    }
			} else {
			    callback.receiveErrorsendSMSEx_R(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorsendSMSEx_R(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[25].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[25].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送变量短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容utf-8编码;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字;bcode变量编码.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#bianliang
     * @param bianliang52
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse bianliang(

    org.sz.mbay.sms.sdk.WebServiceStub.Bianliang bianliang52)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[26].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/bianliang");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), bianliang52,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "bianliang")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "bianliang"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "bianliang"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "bianliang"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "bianliang"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送变量短信：sn软件序列号
     * ;pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容utf-8
     * 编码;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字;bcode变量编码.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startbianliang
     * @param bianliang52
     */
    public void startbianliang(

    org.sz.mbay.sms.sdk.WebServiceStub.Bianliang bianliang52,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[26].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/bianliang");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), bianliang52,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "bianliang")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"bianliang"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultbianliang((org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorbianliang(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"bianliang"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"bianliang"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"bianliang"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorbianliang(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbianliang(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbianliang(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbianliang(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbianliang(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbianliang(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbianliang(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorbianliang(f);
				    }
				} else {
				    callback.receiveErrorbianliang(f);
				}
			    } else {
				callback.receiveErrorbianliang(f);
			    }
			} else {
			    callback.receiveErrorbianliang(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorbianliang(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[26].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[26].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 接收短信：sn软件序列号;password加密密码md5(sn+password).
     * 
     * @see entinfo.cn.sdk.WebService#mongateCsGetSmsExEx
     * @param mongateCsGetSmsExEx54
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse mongateCsGetSmsExEx(

    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx mongateCsGetSmsExEx54)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[27].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/MongateCsGetSmsExEx");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mongateCsGetSmsExEx54,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mongateCsGetSmsExEx")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mongateCsGetSmsExEx"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(
		    _returnEnv.getBody().getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "MongateCsGetSmsExEx"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(),
					"MongateCsGetSmsExEx"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(),
					"MongateCsGetSmsExEx"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 接收短信：sn软件序列号;password加密密码md5(sn+password).
     * 
     * @see entinfo.cn.sdk.WebService#startmongateCsGetSmsExEx
     * @param mongateCsGetSmsExEx54
     */
    public void startmongateCsGetSmsExEx(

    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx mongateCsGetSmsExEx54,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[27].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/MongateCsGetSmsExEx");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mongateCsGetSmsExEx54,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mongateCsGetSmsExEx")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mongateCsGetSmsExEx"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmongateCsGetSmsExEx((org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormongateCsGetSmsExEx(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"MongateCsGetSmsExEx"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"MongateCsGetSmsExEx"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"MongateCsGetSmsExEx"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormongateCsGetSmsExEx(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetSmsExEx(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetSmsExEx(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetSmsExEx(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetSmsExEx(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetSmsExEx(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetSmsExEx(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetSmsExEx(f);
				    }
				} else {
				    callback.receiveErrormongateCsGetSmsExEx(f);
				}
			    } else {
				callback.receiveErrormongateCsGetSmsExEx(f);
			    }
			} else {
			    callback.receiveErrormongateCsGetSmsExEx(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormongateCsGetSmsExEx(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[27].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[27].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 软件序列号注册：sn软件序列号;pwd序列号密码;province省;city城市;
     * trade行业;entname企业名称;linkman联系人;phone联系电话
     * ;mobile移动电话;email邮件地址;fax传真;address地址;postcode邮政编码
     * 
     * @see entinfo.cn.sdk.WebService#register
     * @param register56
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse register(

    org.sz.mbay.sms.sdk.WebServiceStub.Register register56)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[28].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/Register");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), register56,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "register")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "register"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "Register"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "Register"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "Register"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 软件序列号注册：sn软件序列号
     * ;pwd序列号密码;province省;city城市;trade行业;entname企业名称;linkman联系人;phone联系电话
     * ;mobile移动电话;email邮件地址;fax传真;address地址;postcode邮政编码
     * 
     * @see entinfo.cn.sdk.WebService#startregister
     * @param register56
     */
    public void startregister(

    org.sz.mbay.sms.sdk.WebServiceStub.Register register56,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[28].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/Register");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(
		getFactory(_operationClient.getOptions().getSoapVersionURI()),
		register56,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "register")),
		new javax.xml.namespace.QName("http://tempuri.org/", "register"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultregister((org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorregister(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "Register"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"Register"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"Register"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorregister(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorregister(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorregister(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorregister(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorregister(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorregister(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorregister(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorregister(f);
				    }
				} else {
				    callback.receiveErrorregister(f);
				}
			    } else {
				callback.receiveErrorregister(f);
			    }
			} else {
			    callback.receiveErrorregister(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorregister(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[28].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[28].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 彩信接收：sn软件序列号;pwd加密密码md5(sn+password).返回:彩信内容
     * 
     * @see entinfo.cn.sdk.WebService#mdMmsReceive
     * @param mdMmsReceive58
     */

    @SuppressWarnings("unchecked")
	public org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse mdMmsReceive(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive mdMmsReceive58)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[29].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdMmsReceive");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdMmsReceive58,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdMmsReceive")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdMmsReceive"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdMmsReceive"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsReceive"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsReceive"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 彩信接收：sn软件序列号;pwd加密密码md5(sn+password).返回:彩信内容
     * 
     * @see entinfo.cn.sdk.WebService#startmdMmsReceive
     * @param mdMmsReceive58
     */
    public void startmdMmsReceive(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive mdMmsReceive58,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[29].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdMmsReceive");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdMmsReceive58,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsReceive")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdMmsReceive"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdMmsReceive((org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdMmsReceive(e);
			}
		    }

		    @SuppressWarnings("unchecked")
			public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdMmsReceive"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsReceive"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsReceive"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdMmsReceive(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsReceive(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsReceive(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsReceive(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsReceive(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsReceive(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsReceive(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsReceive(f);
				    }
				} else {
				    callback.receiveErrormdMmsReceive(f);
				}
			    } else {
				callback.receiveErrormdMmsReceive(f);
			    }
			} else {
			    callback.receiveErrormdMmsReceive(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdMmsReceive(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[29].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[29].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 接收短信：sn软件序列号;pwd序列号密码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#rECSMS
     * @param rECSMS60
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse rECSMS(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS rECSMS60)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[30].getName());
	    _operationClient.getOptions()
		    .setAction("http://tempuri.org/RECSMS");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), rECSMS60,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "rECSMS")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "rECSMS"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "RECSMS"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMS"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMS"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 接收短信：sn软件序列号;pwd序列号密码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#startrECSMS
     * @param rECSMS60
     */
    public void startrECSMS(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS rECSMS60,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[30].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/RECSMS");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), rECSMS60,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rECSMS")),
		new javax.xml.namespace.QName("http://tempuri.org/", "rECSMS"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultrECSMS((org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorrECSMS(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "RECSMS"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMS"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMS"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorrECSMS(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMS(f);
				    }
				} else {
				    callback.receiveErrorrECSMS(f);
				}
			    } else {
				callback.receiveErrorrECSMS(f);
			    }
			} else {
			    callback.receiveErrorrECSMS(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorrECSMS(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[30].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[30].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#mt
     * @param mt62
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.MtResponse mt(

    org.sz.mbay.sms.sdk.WebServiceStub.Mt mt62)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[31].getName());
	    _operationClient.getOptions().setAction("http://tempuri.org/mt");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mt62,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mt")),
		    new javax.xml.namespace.QName("http://tempuri.org/", "mt"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MtResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MtResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mt"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mt"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mt"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容;ext扩展子号
     * ;stime定时时间,格式如2009-09-01 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startmt
     * @param mt62
     */
    public void startmt(

    org.sz.mbay.sms.sdk.WebServiceStub.Mt mt62,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[31].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/mt");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mt62,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mt")),
		new javax.xml.namespace.QName("http://tempuri.org/", "mt"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MtResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmt((org.sz.mbay.sms.sdk.WebServiceStub.MtResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormt(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "mt"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mt"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mt"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormt(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormt(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormt(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormt(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormt(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormt(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormt(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormt(f);
				    }
				} else {
				    callback.receiveErrormt(f);
				}
			    } else {
				callback.receiveErrormt(f);
			    }
			} else {
			    callback.receiveErrormt(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormt(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[31].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[31].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd序列号密码;mobile手机号列表，以逗号,隔开;content发送内容
     * 
     * @see entinfo.cn.sdk.WebService#sendSMS
     * @param sendSMS64
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse sendSMS(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS sendSMS64)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[32].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/SendSMS");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), sendSMS64,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "sendSMS")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "sendSMS"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "SendSMS"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMS"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMS"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;pwd序列号密码;mobile手机号列表，以逗号,隔开;content发送内容
     * 
     * @see entinfo.cn.sdk.WebService#startsendSMS
     * @param sendSMS64
     */
    public void startsendSMS(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS sendSMS64,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[32].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/SendSMS");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), sendSMS64,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sendSMS")),
		new javax.xml.namespace.QName("http://tempuri.org/", "sendSMS"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultsendSMS((org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorsendSMS(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "SendSMS"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMS"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMS"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorsendSMS(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMS(f);
				    }
				} else {
				    callback.receiveErrorsendSMS(f);
				}
			    } else {
				callback.receiveErrorsendSMS(f);
			    }
			} else {
			    callback.receiveErrorsendSMS(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorsendSMS(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[32].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[32].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 接收短信：sn软件序列号;pwd加密密码md5(sn+password);maxID：上次接收最大id
     * 
     * @see entinfo.cn.sdk.WebService#mo2
     * @param mo266
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response mo2(

    org.sz.mbay.sms.sdk.WebServiceStub.Mo2 mo266)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[33].getName());
	    _operationClient.getOptions().setAction("http://tempuri.org/mo2");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mo266,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mo2")),
		    new javax.xml.namespace.QName("http://tempuri.org/", "mo2"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mo2"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mo2"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mo2"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 接收短信：sn软件序列号;pwd加密密码md5(sn+password);maxID：上次接收最大id
     * 
     * @see entinfo.cn.sdk.WebService#startmo2
     * @param mo266
     */
    public void startmo2(

    org.sz.mbay.sms.sdk.WebServiceStub.Mo2 mo266,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[33].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/mo2");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mo266,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mo2")),
		new javax.xml.namespace.QName("http://tempuri.org/", "mo2"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmo2((org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormo2(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "mo2"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mo2"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mo2"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormo2(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo2(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo2(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo2(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo2(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo2(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo2(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo2(f);
				    }
				} else {
				    callback.receiveErrormo2(f);
				}
			    } else {
				callback.receiveErrormo2(f);
			    }
			} else {
			    callback.receiveErrormo2(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormo2(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[33].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[33].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取特服号：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#getCode
     * @param getCode68
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse getCode(

    org.sz.mbay.sms.sdk.WebServiceStub.GetCode getCode68)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[34].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/GetCode");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), getCode68,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "getCode")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "getCode"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "GetCode"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetCode"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetCode"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取特服号：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#startgetCode
     * @param getCode68
     */
    public void startgetCode(

    org.sz.mbay.sms.sdk.WebServiceStub.GetCode getCode68,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[34].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/GetCode");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), getCode68,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "getCode")),
		new javax.xml.namespace.QName("http://tempuri.org/", "getCode"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgetCode((org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgetCode(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "GetCode"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetCode"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetCode"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgetCode(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetCode(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetCode(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetCode(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetCode(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetCode(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetCode(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetCode(f);
				    }
				} else {
				    callback.receiveErrorgetCode(f);
				}
			    } else {
				callback.receiveErrorgetCode(f);
			    }
			} else {
			    callback.receiveErrorgetCode(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgetCode(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[34].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[34].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 彩信发送：sn软件序列号;pwd加密密码md5(sn+password);title彩信主题
     * ;mobile手机号码,以英文逗号隔开;content内容
     * ,base64编码(文件名1,文件base64编码串utf8;文件名2,文件base64编码串utf8);stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#mdMmsSend_uex
     * @param mdMmsSend_uex70
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse mdMmsSend_uex(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex mdMmsSend_uex70)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[35].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdMmsSend_uex");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdMmsSend_uex70,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdMmsSend_uex")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdMmsSend_uex"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdMmsSend_uex"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSend_uex"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSend_uex"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 彩信发送：sn软件序列号;
     * pwd加密密码md5(sn+password);title彩信主题;mobile手机号码,以英文逗号隔开;content内容
     * ,base64编码(文件名1,文件base64编码串utf8;文件名2,文件base64编码串utf8);stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startmdMmsSend_uex
     * @param mdMmsSend_uex70
     */
    public void startmdMmsSend_uex(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex mdMmsSend_uex70,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[35].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdMmsSend_uex");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdMmsSend_uex70,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSend_uex")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdMmsSend_uex"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdMmsSend_uex((org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdMmsSend_uex(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdMmsSend_uex"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSend_uex"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSend_uex"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdMmsSend_uex(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_uex(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_uex(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_uex(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_uex(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_uex(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_uex(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSend_uex(f);
				    }
				} else {
				    callback.receiveErrormdMmsSend_uex(f);
				}
			    } else {
				callback.receiveErrormdMmsSend_uex(f);
			    }
			} else {
			    callback.receiveErrormdMmsSend_uex(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdMmsSend_uex(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[35].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[35].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取余额：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#getBalance
     * @param getBalance72
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse getBalance(

    org.sz.mbay.sms.sdk.WebServiceStub.GetBalance getBalance72)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[36].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/GetBalance");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), getBalance72,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "getBalance")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "getBalance"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "GetBalance"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetBalance"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetBalance"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取余额：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#startgetBalance
     * @param getBalance72
     */
    public void startgetBalance(

    org.sz.mbay.sms.sdk.WebServiceStub.GetBalance getBalance72,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[36].getName());
	_operationClient.getOptions()
		.setAction("http://tempuri.org/GetBalance");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), getBalance72,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "getBalance")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"getBalance"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgetBalance((org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgetBalance(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"GetBalance"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetBalance"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetBalance"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgetBalance(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetBalance(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetBalance(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetBalance(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetBalance(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetBalance(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetBalance(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetBalance(f);
				    }
				} else {
				    callback.receiveErrorgetBalance(f);
				}
			    } else {
				callback.receiveErrorgetBalance(f);
			    }
			} else {
			    callback.receiveErrorgetBalance(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgetBalance(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[36].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[36].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 彩信发送：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号码
     * ,以英文逗号隔开;content内容,base64编码(zip文件base64编码串);stime定时时间2010-07-05
     * 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#mdMmsSendF
     * @param mdMmsSendF74
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse mdMmsSendF(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF mdMmsSendF74)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[37].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdMmsSendF");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdMmsSendF74,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdMmsSendF")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdMmsSendF"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdMmsSendF"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSendF"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdMmsSendF"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 彩信发送：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号码,以英文逗号隔开;content内容,base64编码
     * (zip文件base64编码串);stime定时时间2010-07-05 17:37:00.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startmdMmsSendF
     * @param mdMmsSendF74
     */
    public void startmdMmsSendF(

    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF mdMmsSendF74,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[37].getName());
	_operationClient.getOptions()
		.setAction("http://tempuri.org/mdMmsSendF");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdMmsSendF74,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSendF")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdMmsSendF"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdMmsSendF((org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdMmsSendF(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdMmsSendF"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSendF"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdMmsSendF"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdMmsSendF(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSendF(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSendF(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSendF(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSendF(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSendF(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSendF(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdMmsSendF(f);
				    }
				} else {
				    callback.receiveErrormdMmsSendF(f);
				}
			    } else {
				callback.receiveErrormdMmsSendF(f);
			    }
			} else {
			    callback.receiveErrormdMmsSendF(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdMmsSendF(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[37].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[37].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 充值：sn软件序列号;pwd序列号密码;cardno充值卡号;cardpwd充值卡密码
     * 
     * @see entinfo.cn.sdk.WebService#chargUp
     * @param chargUp76
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse chargUp(

    org.sz.mbay.sms.sdk.WebServiceStub.ChargUp chargUp76)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[38].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/ChargUp");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), chargUp76,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "chargUp")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "chargUp"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "ChargUp"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "ChargUp"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "ChargUp"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 充值：sn软件序列号;pwd序列号密码;cardno充值卡号;cardpwd充值卡密码
     * 
     * @see entinfo.cn.sdk.WebService#startchargUp
     * @param chargUp76
     */
    public void startchargUp(

    org.sz.mbay.sms.sdk.WebServiceStub.ChargUp chargUp76,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[38].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/ChargUp");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), chargUp76,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "chargUp")),
		new javax.xml.namespace.QName("http://tempuri.org/", "chargUp"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultchargUp((org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorchargUp(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "ChargUp"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"ChargUp"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"ChargUp"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorchargUp(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorchargUp(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorchargUp(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorchargUp(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorchargUp(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorchargUp(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorchargUp(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorchargUp(f);
				    }
				} else {
				    callback.receiveErrorchargUp(f);
				}
			    } else {
				callback.receiveErrorchargUp(f);
			    }
			} else {
			    callback.receiveErrorchargUp(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorchargUp(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[38].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[38].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 文件传输：sn软件序列号;pwd加密密码md5(sn+password);fname增值文件名
     * ;rrid第一个接口返回id;sort批次;total总次数
     * ;ftype类别1短信2彩信3语音4传真5邮件;content内容,base64编码.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#fileMT
     * @param fileMT78
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse fileMT(

    org.sz.mbay.sms.sdk.WebServiceStub.FileMT fileMT78)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[39].getName());
	    _operationClient.getOptions()
		    .setAction("http://tempuri.org/fileMT");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), fileMT78,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "fileMT")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "fileMT"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "fileMT"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "fileMT"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "fileMT"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 文件传输：sn软件序列号;
     * pwd加密密码md5(sn+password);fname增值文件名;rrid第一个接口返回id;sort批次;total总次数
     * ;ftype类别1短信2彩信3语音4传真5邮件;content内容,base64编码.返回:rrid
     * 
     * @see entinfo.cn.sdk.WebService#startfileMT
     * @param fileMT78
     */
    public void startfileMT(

    org.sz.mbay.sms.sdk.WebServiceStub.FileMT fileMT78,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[39].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/fileMT");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), fileMT78,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "fileMT")),
		new javax.xml.namespace.QName("http://tempuri.org/", "fileMT"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultfileMT((org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorfileMT(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "fileMT"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"fileMT"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"fileMT"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorfileMT(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorfileMT(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorfileMT(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorfileMT(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorfileMT(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorfileMT(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorfileMT(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorfileMT(f);
				    }
				} else {
				    callback.receiveErrorfileMT(f);
				}
			    } else {
				callback.receiveErrorfileMT(f);
			    }
			} else {
			    callback.receiveErrorfileMT(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorfileMT(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[39].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[39].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 接收短信：sn软件序列号;pwd加密密码md5(sn+password).[优先使用本接口]
     * 
     * @see entinfo.cn.sdk.WebService#mo
     * @param mo80
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.MoResponse mo(

    org.sz.mbay.sms.sdk.WebServiceStub.Mo mo80)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[40].getName());
	    _operationClient.getOptions().setAction("http://tempuri.org/mo");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mo80,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mo")),
		    new javax.xml.namespace.QName("http://tempuri.org/", "mo"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MoResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MoResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mo"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mo"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mo"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 接收短信：sn软件序列号;pwd加密密码md5(sn+password).[优先使用本接口]
     * 
     * @see entinfo.cn.sdk.WebService#startmo
     * @param mo80
     */
    public void startmo(

    org.sz.mbay.sms.sdk.WebServiceStub.Mo mo80,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[40].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/mo");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mo80,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mo")),
		new javax.xml.namespace.QName("http://tempuri.org/", "mo"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MoResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmo((org.sz.mbay.sms.sdk.WebServiceStub.MoResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormo(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "mo"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mo"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mo"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormo(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormo(f);
				    }
				} else {
				    callback.receiveErrormo(f);
				}
			    } else {
				callback.receiveErrormo(f);
			    }
			} else {
			    callback.receiveErrormo(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormo(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[40].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[40].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 网络版接收短信：sn软件序列号;pwd序列号密码;subcode子号码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#rECSMSEx
     * @param rECSMSEx82
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse rECSMSEx(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx rECSMSEx82)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[41].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/RECSMSEx");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), rECSMSEx82,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "rECSMSEx")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "rECSMSEx"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "RECSMSEx"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMSEx"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "RECSMSEx"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 网络版接收短信：sn软件序列号;pwd序列号密码;subcode子号码。total_num为负数，表示操作失败
     * 
     * @see entinfo.cn.sdk.WebService#startrECSMSEx
     * @param rECSMSEx82
     */
    public void startrECSMSEx(

    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx rECSMSEx82,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[41].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/RECSMSEx");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(
		getFactory(_operationClient.getOptions().getSoapVersionURI()),
		rECSMSEx82,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rECSMSEx")),
		new javax.xml.namespace.QName("http://tempuri.org/", "rECSMSEx"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultrECSMSEx((org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorrECSMSEx(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "RECSMSEx"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMSEx"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"RECSMSEx"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorrECSMSEx(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorrECSMSEx(f);
				    }
				} else {
				    callback.receiveErrorrECSMSEx(f);
				}
			    } else {
				callback.receiveErrorrECSMSEx(f);
			    }
			} else {
			    callback.receiveErrorrECSMSEx(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorrECSMSEx(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[41].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[41].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 编解码：content中文内容;code编解码类型;type，0编码1解码
     * 
     * @see entinfo.cn.sdk.WebService#testCode
     * @param testCode84
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse testCode(

    org.sz.mbay.sms.sdk.WebServiceStub.TestCode testCode84)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[42].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/TestCode");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), testCode84,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "testCode")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "testCode"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "TestCode"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "TestCode"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "TestCode"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 编解码：content中文内容;code编解码类型;type，0编码1解码
     * 
     * @see entinfo.cn.sdk.WebService#starttestCode
     * @param testCode84
     */
    public void starttestCode(

    org.sz.mbay.sms.sdk.WebServiceStub.TestCode testCode84,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[42].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/TestCode");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(
		getFactory(_operationClient.getOptions().getSoapVersionURI()),
		testCode84,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "testCode")),
		new javax.xml.namespace.QName("http://tempuri.org/", "testCode"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResulttestCode((org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrortestCode(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "TestCode"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"TestCode"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"TestCode"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrortestCode(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrortestCode(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrortestCode(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrortestCode(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrortestCode(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrortestCode(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrortestCode(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrortestCode(f);
				    }
				} else {
				    callback.receiveErrortestCode(f);
				}
			    } else {
				callback.receiveErrortestCode(f);
			    }
			} else {
			    callback.receiveErrortestCode(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrortestCode(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[42].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[42].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：userId软件序列号;password加密密码md5(sn+password
     * );pszMobis手机号列表，以逗号,隔开;pszMsg发送内容utf
     * -8编码;iMobiCount手机号数量;pszSubPort扩展子号.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#mongateCsSpSendSmsNew
     * @param mongateCsSpSendSmsNew86
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse mongateCsSpSendSmsNew(

    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew mongateCsSpSendSmsNew86)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[43].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/MongateCsSpSendSmsNew");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mongateCsSpSendSmsNew86,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mongateCsSpSendSmsNew")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mongateCsSpSendSmsNew"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(
		    _returnEnv.getBody().getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "MongateCsSpSendSmsNew"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(),
					"MongateCsSpSendSmsNew"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(),
					"MongateCsSpSendSmsNew"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：userId软件序列号
     * ;password加密密码md5(sn+password);pszMobis手机号列表，以逗号,隔开;pszMsg发送内容utf
     * -8编码;iMobiCount手机号数量;pszSubPort扩展子号.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startmongateCsSpSendSmsNew
     * @param mongateCsSpSendSmsNew86
     */
    public void startmongateCsSpSendSmsNew(

	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew mongateCsSpSendSmsNew86,

	    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[43].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/MongateCsSpSendSmsNew");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mongateCsSpSendSmsNew86,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mongateCsSpSendSmsNew")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mongateCsSpSendSmsNew"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmongateCsSpSendSmsNew((org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormongateCsSpSendSmsNew(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"MongateCsSpSendSmsNew"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"MongateCsSpSendSmsNew"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"MongateCsSpSendSmsNew"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormongateCsSpSendSmsNew(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsSpSendSmsNew(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsSpSendSmsNew(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsSpSendSmsNew(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsSpSendSmsNew(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsSpSendSmsNew(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsSpSendSmsNew(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsSpSendSmsNew(f);
				    }
				} else {
				    callback.receiveErrormongateCsSpSendSmsNew(f);
				}
			    } else {
				callback.receiveErrormongateCsSpSendSmsNew(f);
			    }
			} else {
			    callback.receiveErrormongateCsSpSendSmsNew(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormongateCsSpSendSmsNew(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[43].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[43].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信：sn软件序列号;pwd加密密码md5(sn+password);mobile手机号列表
     * ，以逗号,隔开;content发送内容utf-8编码;ext扩展子号;stime定时时间,格式如2009-09-01
     * 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#mdSmsSend_u
     * @param mdSmsSend_u88
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse mdSmsSend_u(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u mdSmsSend_u88)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[44].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/mdSmsSend_u");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mdSmsSend_u88,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "mdSmsSend_u")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mdSmsSend_u"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "mdSmsSend_u"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_u"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "mdSmsSend_u"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信：sn软件序列号;
     * pwd加密密码md5(sn+password);mobile手机号列表，以逗号,隔开;content发送内容utf-8编码
     * ;ext扩展子号;stime定时时间,格式如2009-09-01 18:21:00;rrid唯一标识,全数字.返回:唯一标识
     * 
     * @see entinfo.cn.sdk.WebService#startmdSmsSend_u
     * @param mdSmsSend_u88
     */
    public void startmdSmsSend_u(

    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u mdSmsSend_u88,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[44].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/mdSmsSend_u");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), mdSmsSend_u88,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_u")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mdSmsSend_u"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmdSmsSend_u((org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormdSmsSend_u(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"mdSmsSend_u"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_u"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"mdSmsSend_u"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormdSmsSend_u(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_u(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_u(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_u(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_u(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_u(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_u(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormdSmsSend_u(f);
				    }
				} else {
				    callback.receiveErrormdSmsSend_u(f);
				}
			    } else {
				callback.receiveErrormdSmsSend_u(f);
			    }
			} else {
			    callback.receiveErrormdSmsSend_u(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormdSmsSend_u(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[44].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[44].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 获取软件序列号状态：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#getStatus
     * @param getStatus90
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse getStatus(

    org.sz.mbay.sms.sdk.WebServiceStub.GetStatus getStatus90)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[45].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/GetStatus");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), getStatus90,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "getStatus")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "getStatus"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "GetStatus"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetStatus"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "GetStatus"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 获取软件序列号状态：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#startgetStatus
     * @param getStatus90
     */
    public void startgetStatus(

    org.sz.mbay.sms.sdk.WebServiceStub.GetStatus getStatus90,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[45].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/GetStatus");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), getStatus90,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "getStatus")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"getStatus"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultgetStatus((org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorgetStatus(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"GetStatus"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetStatus"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"GetStatus"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorgetStatus(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetStatus(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetStatus(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetStatus(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetStatus(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetStatus(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetStatus(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorgetStatus(f);
				    }
				} else {
				    callback.receiveErrorgetStatus(f);
				}
			    } else {
				callback.receiveErrorgetStatus(f);
			    }
			} else {
			    callback.receiveErrorgetStatus(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorgetStatus(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[45].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[45].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 回执：sn软件序列号;password加密密码md5(sn+password)
     * 
     * @see entinfo.cn.sdk.WebService#mongateCsGetStatusReportExEx
     * @param mongateCsGetStatusReportExEx92
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse mongateCsGetStatusReportExEx(

	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx mongateCsGetStatusReportExEx92)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[46].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/MongateCsGetStatusReportExEx");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), mongateCsGetStatusReportExEx92,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/",
			    "mongateCsGetStatusReportExEx")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "mongateCsGetStatusReportExEx"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(
		    _returnEnv.getBody().getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(),
				"MongateCsGetStatusReportExEx"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(),
					"MongateCsGetStatusReportExEx"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(),
					"MongateCsGetStatusReportExEx"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 回执：sn软件序列号;password加密密码md5(sn+password)
     * 
     * @see entinfo.cn.sdk.WebService#startmongateCsGetStatusReportExEx
     * @param mongateCsGetStatusReportExEx92
     */
    public void startmongateCsGetStatusReportExEx(

	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx mongateCsGetStatusReportExEx92,

	    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[46].getName());
	_operationClient.getOptions().setAction(
		"http://tempuri.org/MongateCsGetStatusReportExEx");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(
		getFactory(_operationClient.getOptions().getSoapVersionURI()),
		mongateCsGetStatusReportExEx92,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mongateCsGetStatusReportExEx")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"mongateCsGetStatusReportExEx"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultmongateCsGetStatusReportExEx((org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrormongateCsGetStatusReportExEx(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"MongateCsGetStatusReportExEx"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"MongateCsGetStatusReportExEx"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"MongateCsGetStatusReportExEx"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrormongateCsGetStatusReportExEx(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetStatusReportExEx(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetStatusReportExEx(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetStatusReportExEx(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetStatusReportExEx(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetStatusReportExEx(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetStatusReportExEx(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrormongateCsGetStatusReportExEx(f);
				    }
				} else {
				    callback.receiveErrormongateCsGetStatusReportExEx(f);
				}
			    } else {
				callback.receiveErrormongateCsGetStatusReportExEx(f);
			    }
			} else {
			    callback.receiveErrormongateCsGetStatusReportExEx(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrormongateCsGetStatusReportExEx(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[46].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[46].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 更改签名：sn软件序列号;pwd序列号密码;sign企业签名(2-15个字符)
     * 
     * @see entinfo.cn.sdk.WebService#uDPSIGN
     * @param uDPSIGN94
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse uDPSIGN(

    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN uDPSIGN94)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[47].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/UDPSIGN");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), uDPSIGN94,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "uDPSIGN")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "uDPSIGN"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "UDPSIGN"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UDPSIGN"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UDPSIGN"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 更改签名：sn软件序列号;pwd序列号密码;sign企业签名(2-15个字符)
     * 
     * @see entinfo.cn.sdk.WebService#startuDPSIGN
     * @param uDPSIGN94
     */
    public void startuDPSIGN(

    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN uDPSIGN94,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[47].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/UDPSIGN");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), uDPSIGN94,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "uDPSIGN")),
		new javax.xml.namespace.QName("http://tempuri.org/", "uDPSIGN"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultuDPSIGN((org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErroruDPSIGN(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "UDPSIGN"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UDPSIGN"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UDPSIGN"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErroruDPSIGN(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGN(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGN(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGN(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGN(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGN(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGN(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErroruDPSIGN(f);
				    }
				} else {
				    callback.receiveErroruDPSIGN(f);
				}
			    } else {
				callback.receiveErroruDPSIGN(f);
			    }
			} else {
			    callback.receiveErroruDPSIGN(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErroruDPSIGN(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[47].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[47].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature 注销：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#unRegister
     * @param unRegister96
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse unRegister(

    org.sz.mbay.sms.sdk.WebServiceStub.UnRegister unRegister96)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[48].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/UnRegister");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), unRegister96,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "unRegister")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "unRegister"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "UnRegister"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UnRegister"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "UnRegister"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 注销：sn软件序列号;pwd序列号密码
     * 
     * @see entinfo.cn.sdk.WebService#startunRegister
     * @param unRegister96
     */
    public void startunRegister(

    org.sz.mbay.sms.sdk.WebServiceStub.UnRegister unRegister96,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[48].getName());
	_operationClient.getOptions()
		.setAction("http://tempuri.org/UnRegister");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), unRegister96,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "unRegister")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"unRegister"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultunRegister((org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorunRegister(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"UnRegister"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UnRegister"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"UnRegister"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorunRegister(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorunRegister(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorunRegister(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorunRegister(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorunRegister(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorunRegister(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorunRegister(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorunRegister(f);
				    }
				} else {
				    callback.receiveErrorunRegister(f);
				}
			    } else {
				callback.receiveErrorunRegister(f);
			    }
			} else {
			    callback.receiveErrorunRegister(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorunRegister(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[48].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[48].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 发送短信（可扩展）：sn软件序列号;pwd序列号密码;mobile手机号列表，以逗号
     * ,隔开;content发送内容;subcode最长9位数字扩展码
     * 
     * @see entinfo.cn.sdk.WebService#sendSMSEx
     * @param sendSMSEx98
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse sendSMSEx(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx sendSMSEx98)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[49].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/SendSMSEx");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), sendSMSEx98,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "sendSMSEx")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "sendSMSEx"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "SendSMSEx"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMSEx"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "SendSMSEx"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 发送短信（可扩展）：sn软件序列号
     * ;pwd序列号密码;mobile手机号列表，以逗号,隔开;content发送内容;subcode最长9位数字扩展码
     * 
     * @see entinfo.cn.sdk.WebService#startsendSMSEx
     * @param sendSMSEx98
     */
    public void startsendSMSEx(

    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx sendSMSEx98,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[49].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/SendSMSEx");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), sendSMSEx98,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sendSMSEx")),
		new javax.xml.namespace.QName("http://tempuri.org/",
			"sendSMSEx"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultsendSMSEx((org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorsendSMSEx(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(),
						"SendSMSEx"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMSEx"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"SendSMSEx"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorsendSMSEx(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorsendSMSEx(f);
				    }
				} else {
				    callback.receiveErrorsendSMSEx(f);
				}
			    } else {
				callback.receiveErrorsendSMSEx(f);
			    }
			} else {
			    callback.receiveErrorsendSMSEx(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorsendSMSEx(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[49].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[49].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     * 回执：sn软件序列号;pwd加密密码md5(sn+password);maxid最大id
     * 
     * @see entinfo.cn.sdk.WebService#report2
     * @param report2100
     */

    public org.sz.mbay.sms.sdk.WebServiceStub.Report2Response report2(

    org.sz.mbay.sms.sdk.WebServiceStub.Report2 report2100)

    throws java.rmi.RemoteException

    {
	org.apache.axis2.context.MessageContext _messageContext = null;
	try {
	    org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		    .createClient(_operations[50].getName());
	    _operationClient.getOptions().setAction(
		    "http://tempuri.org/report2");
	    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
		    true);

	    addPropertyToOperationClient(
		    _operationClient,
		    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		    "&");

	    // create a message context
	    _messageContext = new org.apache.axis2.context.MessageContext();

	    // create SOAP envelope with that payload
	    org.apache.axiom.soap.SOAPEnvelope env = null;

	    env = toEnvelope(getFactory(_operationClient.getOptions()
		    .getSoapVersionURI()), report2100,
		    optimizeContent(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "report2")),
		    new javax.xml.namespace.QName("http://tempuri.org/",
			    "report2"));

	    // adding SOAP soap_headers
	    _serviceClient.addHeadersToEnvelope(env);
	    // set the message context with that soap envelope
	    _messageContext.setEnvelope(env);

	    // add the message contxt to the operation client
	    _operationClient.addMessageContext(_messageContext);

	    // execute the operation client
	    _operationClient.execute(true);

	    org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
		    .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
	    org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
		    .getEnvelope();

	    java.lang.Object object = fromOM(_returnEnv.getBody()
		    .getFirstElement(),
		    org.sz.mbay.sms.sdk.WebServiceStub.Report2Response.class,
		    getEnvelopeNamespaces(_returnEnv));

	    return (org.sz.mbay.sms.sdk.WebServiceStub.Report2Response) object;

	} catch (org.apache.axis2.AxisFault f) {

	    org.apache.axiom.om.OMElement faultElt = f.getDetail();
	    if (faultElt != null) {
		if (faultExceptionNameMap
			.containsKey(new org.apache.axis2.client.FaultMapKey(
				faultElt.getQName(), "report2"))) {
		    // make the fault by reflection
		    try {
			java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "report2"));
			java.lang.Class exceptionClass = java.lang.Class
				.forName(exceptionClassName);
			java.lang.reflect.Constructor constructor = exceptionClass
				.getConstructor(String.class);
			java.lang.Exception ex = (java.lang.Exception) constructor
				.newInstance(f.getMessage());
			// message class
			java.lang.String messageClassName = (java.lang.String) faultMessageMap
				.get(new org.apache.axis2.client.FaultMapKey(
					faultElt.getQName(), "report2"));
			java.lang.Class messageClass = java.lang.Class
				.forName(messageClassName);
			java.lang.Object messageObject = fromOM(faultElt,
				messageClass, null);
			java.lang.reflect.Method m = exceptionClass.getMethod(
				"setFaultMessage",
				new java.lang.Class[] { messageClass });
			m.invoke(ex, new java.lang.Object[] { messageObject });

			throw new java.rmi.RemoteException(ex.getMessage(), ex);
		    } catch (java.lang.ClassCastException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.ClassNotFoundException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.NoSuchMethodException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.reflect.InvocationTargetException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.IllegalAccessException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    } catch (java.lang.InstantiationException e) {
			// we cannot intantiate the class - throw the original
			// Axis fault
			throw f;
		    }
		} else {
		    throw f;
		}
	    } else {
		throw f;
	    }
	} finally {
	    if (_messageContext.getTransportOut() != null) {
		_messageContext.getTransportOut().getSender()
			.cleanup(_messageContext);
	    }
	}
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     * 回执：sn软件序列号;pwd加密密码md5(sn+password);maxid最大id
     * 
     * @see entinfo.cn.sdk.WebService#startreport2
     * @param report2100
     */
    public void startreport2(

    org.sz.mbay.sms.sdk.WebServiceStub.Report2 report2100,

    final org.sz.mbay.sms.sdk.WebServiceCallbackHandler callback)

    throws java.rmi.RemoteException {

	org.apache.axis2.client.OperationClient _operationClient = _serviceClient
		.createClient(_operations[50].getName());
	_operationClient.getOptions().setAction("http://tempuri.org/report2");
	_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

	addPropertyToOperationClient(
		_operationClient,
		org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		"&");

	// create SOAP envelope with that payload
	org.apache.axiom.soap.SOAPEnvelope env = null;
	final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

	// Style is Doc.

	env = toEnvelope(getFactory(_operationClient.getOptions()
		.getSoapVersionURI()), report2100,
		optimizeContent(new javax.xml.namespace.QName(
			"http://tempuri.org/", "report2")),
		new javax.xml.namespace.QName("http://tempuri.org/", "report2"));

	// adding SOAP soap_headers
	_serviceClient.addHeadersToEnvelope(env);
	// create message context with that soap envelope
	_messageContext.setEnvelope(env);

	// add the message context to the operation client
	_operationClient.addMessageContext(_messageContext);

	_operationClient
		.setCallback(new org.apache.axis2.client.async.AxisCallback() {
		    public void onMessage(
			    org.apache.axis2.context.MessageContext resultContext) {
			try {
			    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
				    .getEnvelope();

			    java.lang.Object object = fromOM(
				    resultEnv.getBody().getFirstElement(),
				    org.sz.mbay.sms.sdk.WebServiceStub.Report2Response.class,
				    getEnvelopeNamespaces(resultEnv));
			    callback.receiveResultreport2((org.sz.mbay.sms.sdk.WebServiceStub.Report2Response) object);

			} catch (org.apache.axis2.AxisFault e) {
			    callback.receiveErrorreport2(e);
			}
		    }

		    public void onError(java.lang.Exception error) {
			if (error instanceof org.apache.axis2.AxisFault) {
			    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
			    org.apache.axiom.om.OMElement faultElt = f
				    .getDetail();
			    if (faultElt != null) {
				if (faultExceptionNameMap
					.containsKey(new org.apache.axis2.client.FaultMapKey(
						faultElt.getQName(), "report2"))) {
				    // make the fault by reflection
				    try {
					java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"report2"));
					java.lang.Class exceptionClass = java.lang.Class
						.forName(exceptionClassName);
					java.lang.reflect.Constructor constructor = exceptionClass
						.getConstructor(String.class);
					java.lang.Exception ex = (java.lang.Exception) constructor
						.newInstance(f.getMessage());
					// message class
					java.lang.String messageClassName = (java.lang.String) faultMessageMap
						.get(new org.apache.axis2.client.FaultMapKey(
							faultElt.getQName(),
							"report2"));
					java.lang.Class messageClass = java.lang.Class
						.forName(messageClassName);
					java.lang.Object messageObject = fromOM(
						faultElt, messageClass, null);
					java.lang.reflect.Method m = exceptionClass
						.getMethod(
							"setFaultMessage",
							new java.lang.Class[] { messageClass });
					m.invoke(
						ex,
						new java.lang.Object[] { messageObject });

					callback.receiveErrorreport2(new java.rmi.RemoteException(
						ex.getMessage(), ex));
				    } catch (java.lang.ClassCastException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2(f);
				    } catch (java.lang.ClassNotFoundException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2(f);
				    } catch (java.lang.NoSuchMethodException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2(f);
				    } catch (java.lang.reflect.InvocationTargetException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2(f);
				    } catch (java.lang.IllegalAccessException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2(f);
				    } catch (java.lang.InstantiationException e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2(f);
				    } catch (org.apache.axis2.AxisFault e) {
					// we cannot intantiate the class -
					// throw the original Axis fault
					callback.receiveErrorreport2(f);
				    }
				} else {
				    callback.receiveErrorreport2(f);
				}
			    } else {
				callback.receiveErrorreport2(f);
			    }
			} else {
			    callback.receiveErrorreport2(error);
			}
		    }

		    public void onFault(
			    org.apache.axis2.context.MessageContext faultContext) {
			org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
				.getInboundFaultFromMessageContext(faultContext);
			onError(fault);
		    }

		    public void onComplete() {
			try {
			    _messageContext.getTransportOut().getSender()
				    .cleanup(_messageContext);
			} catch (org.apache.axis2.AxisFault axisFault) {
			    callback.receiveErrorreport2(axisFault);
			}
		    }
		});

	org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
	if (_operations[50].getMessageReceiver() == null
		&& _operationClient.getOptions().isUseSeparateListener()) {
	    _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
	    _operations[50].setMessageReceiver(_callbackReceiver);
	}

	// execute the operation client
	_operationClient.execute(false);

    }

    /**
     * A utility method that copies the namepaces from the SOAPEnvelope
     */
    private java.util.Map getEnvelopeNamespaces(
	    org.apache.axiom.soap.SOAPEnvelope env) {
	java.util.Map returnMap = new java.util.HashMap();
	java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
	while (namespaceIterator.hasNext()) {
	    org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator
		    .next();
	    returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
	}
	return returnMap;
    }

    private javax.xml.namespace.QName[] opNameArray = null;

    private boolean optimizeContent(javax.xml.namespace.QName opName) {

	if (opNameArray == null) {
	    return false;
	}
	for (int i = 0; i < opNameArray.length; i++) {
	    if (opName.equals(opNameArray[i])) {
		return true;
	    }
	}
	return false;
    }

    // http://sdk2.entinfo.cn:8060/webservice.asmx
    public static class ReportResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "reportResponse", "ns1");

	/**
	 * field for ReportResult
	 */

	protected java.lang.String localReportResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localReportResultTracker = false;

	public boolean isReportResultSpecified() {
	    return localReportResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getReportResult() {
	    return localReportResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ReportResult
	 */
	public void setReportResult(java.lang.String param) {
	    localReportResultTracker = param != null;

	    this.localReportResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":reportResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "reportResponse", xmlWriter);
		}

	    }
	    if (localReportResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "reportResult", xmlWriter);

		if (localReportResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "reportResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localReportResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localReportResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "reportResult"));

		if (localReportResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localReportResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "reportResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static ReportResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		ReportResponse object = new ReportResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"reportResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (ReportResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "reportResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "reportResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setReportResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetGaoDuanResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetGaoDuanResponse", "ns1");

	/**
	 * field for GetGaoDuanResult
	 */

	protected java.lang.String localGetGaoDuanResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGetGaoDuanResultTracker = false;

	public boolean isGetGaoDuanResultSpecified() {
	    return localGetGaoDuanResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGetGaoDuanResult() {
	    return localGetGaoDuanResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GetGaoDuanResult
	 */
	public void setGetGaoDuanResult(java.lang.String param) {
	    localGetGaoDuanResultTracker = param != null;

	    this.localGetGaoDuanResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetGaoDuanResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetGaoDuanResponse", xmlWriter);
		}

	    }
	    if (localGetGaoDuanResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "GetGaoDuanResult",
			xmlWriter);

		if (localGetGaoDuanResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "GetGaoDuanResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGetGaoDuanResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGetGaoDuanResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetGaoDuanResult"));

		if (localGetGaoDuanResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGetGaoDuanResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetGaoDuanResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetGaoDuanResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetGaoDuanResponse object = new GetGaoDuanResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetGaoDuanResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetGaoDuanResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GetGaoDuanResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "GetGaoDuanResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGetGaoDuanResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GxmtResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "gxmtResponse", "ns1");

	/**
	 * field for GxmtResult
	 */

	protected java.lang.String localGxmtResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGxmtResultTracker = false;

	public boolean isGxmtResultSpecified() {
	    return localGxmtResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGxmtResult() {
	    return localGxmtResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GxmtResult
	 */
	public void setGxmtResult(java.lang.String param) {
	    localGxmtResultTracker = param != null;

	    this.localGxmtResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":gxmtResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "gxmtResponse", xmlWriter);
		}

	    }
	    if (localGxmtResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "gxmtResult", xmlWriter);

		if (localGxmtResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "gxmtResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGxmtResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGxmtResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "gxmtResult"));

		if (localGxmtResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGxmtResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "gxmtResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GxmtResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GxmtResponse object = new GxmtResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"gxmtResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GxmtResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "gxmtResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "gxmtResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGxmtResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_g implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_g", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_g", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_g", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_g parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_g object = new MdSmsSend_g();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_g".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_g) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class FileMT implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "fileMT", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Fname
	 */

	protected java.lang.String localFname;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localFnameTracker = false;

	public boolean isFnameSpecified() {
	    return localFnameTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFname() {
	    return localFname;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Fname
	 */
	public void setFname(java.lang.String param) {
	    localFnameTracker = param != null;

	    this.localFname = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * field for Sort
	 */

	protected int localSort;

	/**
	 * Auto generated getter method
	 * 
	 * @return int
	 */
	public int getSort() {
	    return localSort;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sort
	 */
	public void setSort(int param) {

	    this.localSort = param;

	}

	/**
	 * field for Total
	 */

	protected int localTotal;

	/**
	 * Auto generated getter method
	 * 
	 * @return int
	 */
	public int getTotal() {
	    return localTotal;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Total
	 */
	public void setTotal(int param) {

	    this.localTotal = param;

	}

	/**
	 * field for Ftype
	 */

	protected int localFtype;

	/**
	 * Auto generated getter method
	 * 
	 * @return int
	 */
	public int getFtype() {
	    return localFtype;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ftype
	 */
	public void setFtype(int param) {

	    this.localFtype = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":fileMT", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "fileMT", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localFnameTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "fname", xmlWriter);

		if (localFname == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "fname cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localFname);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "sort", xmlWriter);

	    if (localSort == java.lang.Integer.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"sort cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localSort));
	    }

	    xmlWriter.writeEndElement();

	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "total", xmlWriter);

	    if (localTotal == java.lang.Integer.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"total cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localTotal));
	    }

	    xmlWriter.writeEndElement();

	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "ftype", xmlWriter);

	    if (localFtype == java.lang.Integer.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"ftype cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localFtype));
	    }

	    xmlWriter.writeEndElement();
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localFnameTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "fname"));

		if (localFname != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localFname));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "fname cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }
	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "sort"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localSort));

	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "total"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localTotal));

	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "ftype"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localFtype));
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static FileMT parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		FileMT object = new FileMT();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"fileMT".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (FileMT) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "fname")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "fname"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFname(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sort")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sort"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSort(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToInt(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "total")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "total"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTotal(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToInt(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ftype")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ftype"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFtype(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToInt(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetStatus implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetStatus", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetStatus", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetStatus", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetStatus parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetStatus object = new GetStatus();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetStatus".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetStatus) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMSExResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMSExResponse", "ns1");

	/**
	 * field for RECSMSExResult
	 */

	protected ArrayOfMOBody localRECSMSExResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRECSMSExResultTracker = false;

	public boolean isRECSMSExResultSpecified() {
	    return localRECSMSExResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfMOBody
	 */
	public ArrayOfMOBody getRECSMSExResult() {
	    return localRECSMSExResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RECSMSExResult
	 */
	public void setRECSMSExResult(ArrayOfMOBody param) {
	    localRECSMSExResultTracker = param != null;

	    this.localRECSMSExResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMSExResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMSExResponse", xmlWriter);
		}

	    }
	    if (localRECSMSExResultTracker) {
		if (localRECSMSExResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMSExResult cannot be null!!");
		}
		localRECSMSExResult.serialize(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RECSMSExResult"), xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localRECSMSExResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RECSMSExResult"));

		if (localRECSMSExResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMSExResult cannot be null!!");
		}
		elementList.add(localRECSMSExResult);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMSExResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMSExResponse object = new RECSMSExResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMSExResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMSExResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "RECSMSExResult")
				    .equals(reader.getName())) {

			object.setRECSMSExResult(ArrayOfMOBody.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UDPPwdResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UDPPwdResponse", "ns1");

	/**
	 * field for UDPPwdResult
	 */

	protected java.lang.String localUDPPwdResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUDPPwdResultTracker = false;

	public boolean isUDPPwdResultSpecified() {
	    return localUDPPwdResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUDPPwdResult() {
	    return localUDPPwdResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UDPPwdResult
	 */
	public void setUDPPwdResult(java.lang.String param) {
	    localUDPPwdResultTracker = param != null;

	    this.localUDPPwdResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UDPPwdResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UDPPwdResponse", xmlWriter);
		}

	    }
	    if (localUDPPwdResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "UDPPwdResult", xmlWriter);

		if (localUDPPwdResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "UDPPwdResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUDPPwdResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localUDPPwdResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "UDPPwdResult"));

		if (localUDPPwdResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUDPPwdResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "UDPPwdResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UDPPwdResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UDPPwdResponse object = new UDPPwdResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UDPPwdResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UDPPwdResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "UDPPwdResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "UDPPwdResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUDPPwdResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Report implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "report", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Maxid
	 */

	protected long localMaxid;

	/**
	 * Auto generated getter method
	 * 
	 * @return long
	 */
	public long getMaxid() {
	    return localMaxid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Maxid
	 */
	public void setMaxid(long param) {

	    this.localMaxid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":report", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "report", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "maxid", xmlWriter);

	    if (localMaxid == java.lang.Long.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"maxid cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localMaxid));
	    }

	    xmlWriter.writeEndElement();

	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "maxid"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localMaxid));

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Report parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Report object = new Report();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"report".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Report) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "maxid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "maxid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMaxid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToLong(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetFlagResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetFlagResponse", "ns1");

	/**
	 * field for GetFlagResult
	 */

	protected java.lang.String localGetFlagResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGetFlagResultTracker = false;

	public boolean isGetFlagResultSpecified() {
	    return localGetFlagResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGetFlagResult() {
	    return localGetFlagResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GetFlagResult
	 */
	public void setGetFlagResult(java.lang.String param) {
	    localGetFlagResultTracker = param != null;

	    this.localGetFlagResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetFlagResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetFlagResponse", xmlWriter);
		}

	    }
	    if (localGetFlagResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "GetFlagResult", xmlWriter);

		if (localGetFlagResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "GetFlagResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGetFlagResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGetFlagResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetFlagResult"));

		if (localGetFlagResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGetFlagResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetFlagResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetFlagResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetFlagResponse object = new GetFlagResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetFlagResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetFlagResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GetFlagResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "GetFlagResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGetFlagResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Bianliang implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "bianliang", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * field for Bcode
	 */

	protected java.lang.String localBcode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localBcodeTracker = false;

	public boolean isBcodeSpecified() {
	    return localBcodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBcode() {
	    return localBcode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Bcode
	 */
	public void setBcode(java.lang.String param) {
	    localBcodeTracker = param != null;

	    this.localBcode = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":bianliang", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "bianliang", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localBcodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "bcode", xmlWriter);

		if (localBcode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "bcode cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localBcode);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }
	    if (localBcodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "bcode"));

		if (localBcode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localBcode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "bcode cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Bianliang parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Bianliang object = new Bianliang();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"bianliang".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Bianliang) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "bcode")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "bcode"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setBcode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMSExResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMSExResponse", "ns1");

	/**
	 * field for SendSMSExResult
	 */

	protected java.lang.String localSendSMSExResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSendSMSExResultTracker = false;

	public boolean isSendSMSExResultSpecified() {
	    return localSendSMSExResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSendSMSExResult() {
	    return localSendSMSExResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SendSMSExResult
	 */
	public void setSendSMSExResult(java.lang.String param) {
	    localSendSMSExResultTracker = param != null;

	    this.localSendSMSExResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMSExResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMSExResponse", xmlWriter);
		}

	    }
	    if (localSendSMSExResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SendSMSExResult", xmlWriter);

		if (localSendSMSExResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMSExResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSendSMSExResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSendSMSExResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SendSMSExResult"));

		if (localSendSMSExResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSendSMSExResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMSExResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMSExResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMSExResponse object = new SendSMSExResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMSExResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMSExResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SendSMSExResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SendSMSExResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSendSMSExResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MongateCsGetSmsExExResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "MongateCsGetSmsExExResponse", "ns1");

	/**
	 * field for MongateCsGetSmsExExResult
	 */

	protected ArrayOfString localMongateCsGetSmsExExResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMongateCsGetSmsExExResultTracker = false;

	public boolean isMongateCsGetSmsExExResultSpecified() {
	    return localMongateCsGetSmsExExResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfString
	 */
	public ArrayOfString getMongateCsGetSmsExExResult() {
	    return localMongateCsGetSmsExExResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MongateCsGetSmsExExResult
	 */
	public void setMongateCsGetSmsExExResult(ArrayOfString param) {
	    localMongateCsGetSmsExExResultTracker = param != null;

	    this.localMongateCsGetSmsExExResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix
				    + ":MongateCsGetSmsExExResponse", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "MongateCsGetSmsExExResponse", xmlWriter);
		}

	    }
	    if (localMongateCsGetSmsExExResultTracker) {
		if (localMongateCsGetSmsExExResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "MongateCsGetSmsExExResult cannot be null!!");
		}
		localMongateCsGetSmsExExResult.serialize(
			new javax.xml.namespace.QName("http://tempuri.org/",
				"MongateCsGetSmsExExResult"), xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMongateCsGetSmsExExResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "MongateCsGetSmsExExResult"));

		if (localMongateCsGetSmsExExResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "MongateCsGetSmsExExResult cannot be null!!");
		}
		elementList.add(localMongateCsGetSmsExExResult);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MongateCsGetSmsExExResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MongateCsGetSmsExExResponse object = new MongateCsGetSmsExExResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"MongateCsGetSmsExExResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MongateCsGetSmsExExResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/",
				    "MongateCsGetSmsExExResult").equals(reader
				    .getName())) {

			object.setMongateCsGetSmsExExResult(ArrayOfString.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetAllInfo2Response implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetAllInfo2Response", "ns1");

	/**
	 * field for GetAllInfo2Result
	 */

	protected RegistryInfo2 localGetAllInfo2Result;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGetAllInfo2ResultTracker = false;

	public boolean isGetAllInfo2ResultSpecified() {
	    return localGetAllInfo2ResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return RegistryInfo2
	 */
	public RegistryInfo2 getGetAllInfo2Result() {
	    return localGetAllInfo2Result;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GetAllInfo2Result
	 */
	public void setGetAllInfo2Result(RegistryInfo2 param) {
	    localGetAllInfo2ResultTracker = param != null;

	    this.localGetAllInfo2Result = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetAllInfo2Response",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetAllInfo2Response", xmlWriter);
		}

	    }
	    if (localGetAllInfo2ResultTracker) {
		if (localGetAllInfo2Result == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetAllInfo2Result cannot be null!!");
		}
		localGetAllInfo2Result.serialize(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetAllInfo2Result"), xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGetAllInfo2ResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetAllInfo2Result"));

		if (localGetAllInfo2Result == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetAllInfo2Result cannot be null!!");
		}
		elementList.add(localGetAllInfo2Result);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetAllInfo2Response parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetAllInfo2Response object = new GetAllInfo2Response();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetAllInfo2Response".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetAllInfo2Response) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GetAllInfo2Result")
				    .equals(reader.getName())) {

			object.setGetAllInfo2Result(RegistryInfo2.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UnRegister implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UnRegister", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UnRegister", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UnRegister", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UnRegister parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UnRegister object = new UnRegister();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UnRegister".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UnRegister) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Msgid implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "msgid", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":msgid", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "msgid", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Msgid parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Msgid object = new Msgid();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"msgid".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Msgid) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSendResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSendResponse", "ns1");

	/**
	 * field for MdMmsSendResult
	 */

	protected java.lang.String localMdMmsSendResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdMmsSendResultTracker = false;

	public boolean isMdMmsSendResultSpecified() {
	    return localMdMmsSendResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdMmsSendResult() {
	    return localMdMmsSendResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdMmsSendResult
	 */
	public void setMdMmsSendResult(java.lang.String param) {
	    localMdMmsSendResultTracker = param != null;

	    this.localMdMmsSendResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSendResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSendResponse", xmlWriter);
		}

	    }
	    if (localMdMmsSendResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdMmsSendResult", xmlWriter);

		if (localMdMmsSendResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSendResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdMmsSendResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdMmsSendResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSendResult"));

		if (localMdMmsSendResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdMmsSendResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSendResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSendResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSendResponse object = new MdMmsSendResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSendResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSendResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdMmsSendResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdMmsSendResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdMmsSendResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSend_uex implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend_uex", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Title
	 */

	protected java.lang.String localTitle;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTitleTracker = false;

	public boolean isTitleSpecified() {
	    return localTitleTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTitle() {
	    return localTitle;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Title
	 */
	public void setTitle(java.lang.String param) {
	    localTitleTracker = param != null;

	    this.localTitle = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSend_uex",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSend_uex", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTitleTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "title", xmlWriter);

		if (localTitle == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTitle);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localTitleTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "title"));

		if (localTitle != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTitle));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSend_uex parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSend_uex object = new MdMmsSend_uex();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSend_uex".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSend_uex) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "title")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "title"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdFaxSendResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdFaxSendResponse", "ns1");

	/**
	 * field for MdFaxSendResult
	 */

	protected java.lang.String localMdFaxSendResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdFaxSendResultTracker = false;

	public boolean isMdFaxSendResultSpecified() {
	    return localMdFaxSendResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdFaxSendResult() {
	    return localMdFaxSendResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdFaxSendResult
	 */
	public void setMdFaxSendResult(java.lang.String param) {
	    localMdFaxSendResultTracker = param != null;

	    this.localMdFaxSendResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdFaxSendResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdFaxSendResponse", xmlWriter);
		}

	    }
	    if (localMdFaxSendResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdFaxSendResult", xmlWriter);

		if (localMdFaxSendResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdFaxSendResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdFaxSendResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdFaxSendResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdFaxSendResult"));

		if (localMdFaxSendResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdFaxSendResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdFaxSendResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdFaxSendResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdFaxSendResponse object = new MdFaxSendResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdFaxSendResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdFaxSendResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdFaxSendResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdFaxSendResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdFaxSendResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetAllInfoResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetAllInfoResponse", "ns1");

	/**
	 * field for GetAllInfoResult
	 */

	protected RegistryInfo localGetAllInfoResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGetAllInfoResultTracker = false;

	public boolean isGetAllInfoResultSpecified() {
	    return localGetAllInfoResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return RegistryInfo
	 */
	public RegistryInfo getGetAllInfoResult() {
	    return localGetAllInfoResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GetAllInfoResult
	 */
	public void setGetAllInfoResult(RegistryInfo param) {
	    localGetAllInfoResultTracker = param != null;

	    this.localGetAllInfoResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetAllInfoResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetAllInfoResponse", xmlWriter);
		}

	    }
	    if (localGetAllInfoResultTracker) {
		if (localGetAllInfoResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetAllInfoResult cannot be null!!");
		}
		localGetAllInfoResult.serialize(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetAllInfoResult"), xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGetAllInfoResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetAllInfoResult"));

		if (localGetAllInfoResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetAllInfoResult cannot be null!!");
		}
		elementList.add(localGetAllInfoResult);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetAllInfoResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetAllInfoResponse object = new GetAllInfoResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetAllInfoResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetAllInfoResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GetAllInfoResult")
				    .equals(reader.getName())) {

			object.setGetAllInfoResult(RegistryInfo.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSendResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSendResponse", "ns1");

	/**
	 * field for MdSmsSendResult
	 */

	protected java.lang.String localMdSmsSendResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdSmsSendResultTracker = false;

	public boolean isMdSmsSendResultSpecified() {
	    return localMdSmsSendResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdSmsSendResult() {
	    return localMdSmsSendResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdSmsSendResult
	 */
	public void setMdSmsSendResult(java.lang.String param) {
	    localMdSmsSendResultTracker = param != null;

	    this.localMdSmsSendResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSendResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSendResponse", xmlWriter);
		}

	    }
	    if (localMdSmsSendResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdSmsSendResult", xmlWriter);

		if (localMdSmsSendResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSendResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdSmsSendResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdSmsSendResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSendResult"));

		if (localMdSmsSendResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdSmsSendResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSendResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSendResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSendResponse object = new MdSmsSendResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSendResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSendResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdSmsSendResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdSmsSendResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdSmsSendResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Balance implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "balance", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":balance", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "balance", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Balance parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Balance object = new Balance();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"balance".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Balance) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MmsFileMTResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mmsFileMTResponse", "ns1");

	/**
	 * field for MmsFileMTResult
	 */

	protected java.lang.String localMmsFileMTResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMmsFileMTResultTracker = false;

	public boolean isMmsFileMTResultSpecified() {
	    return localMmsFileMTResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMmsFileMTResult() {
	    return localMmsFileMTResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MmsFileMTResult
	 */
	public void setMmsFileMTResult(java.lang.String param) {
	    localMmsFileMTResultTracker = param != null;

	    this.localMmsFileMTResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mmsFileMTResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mmsFileMTResponse", xmlWriter);
		}

	    }
	    if (localMmsFileMTResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mmsFileMTResult", xmlWriter);

		if (localMmsFileMTResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mmsFileMTResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMmsFileMTResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMmsFileMTResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mmsFileMTResult"));

		if (localMmsFileMTResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMmsFileMTResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mmsFileMTResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MmsFileMTResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MmsFileMTResponse object = new MmsFileMTResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mmsFileMTResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MmsFileMTResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mmsFileMTResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mmsFileMTResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMmsFileMTResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MongateCsGetStatusReportExEx implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "MongateCsGetStatusReportExEx", "ns1");

	/**
	 * field for UserId
	 */

	protected java.lang.String localUserId;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUserIdTracker = false;

	public boolean isUserIdSpecified() {
	    return localUserIdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUserId() {
	    return localUserId;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UserId
	 */
	public void setUserId(java.lang.String param) {
	    localUserIdTracker = param != null;

	    this.localUserId = param;

	}

	/**
	 * field for Password
	 */

	protected java.lang.String localPassword;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPasswordTracker = false;

	public boolean isPasswordSpecified() {
	    return localPasswordTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPassword() {
	    return localPassword;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Password
	 */
	public void setPassword(java.lang.String param) {
	    localPasswordTracker = param != null;

	    this.localPassword = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix
				    + ":MongateCsGetStatusReportExEx",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "MongateCsGetStatusReportExEx", xmlWriter);
		}

	    }
	    if (localUserIdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "userId", xmlWriter);

		if (localUserId == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "userId cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUserId);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPasswordTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "password", xmlWriter);

		if (localPassword == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "password cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPassword);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localUserIdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "userId"));

		if (localUserId != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUserId));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "userId cannot be null!!");
		}
	    }
	    if (localPasswordTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "password"));

		if (localPassword != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPassword));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "password cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MongateCsGetStatusReportExEx parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MongateCsGetStatusReportExEx object = new MongateCsGetStatusReportExEx();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"MongateCsGetStatusReportExEx".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MongateCsGetStatusReportExEx) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "userId")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "userId"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUserId(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "password")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "password"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPassword(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetAllInfo2 implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetAllInfo2", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Ver
	 */

	protected java.lang.String localVer;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localVerTracker = false;

	public boolean isVerSpecified() {
	    return localVerTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVer() {
	    return localVer;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ver
	 */
	public void setVer(java.lang.String param) {
	    localVerTracker = param != null;

	    this.localVer = param;

	}

	/**
	 * field for Oem
	 */

	protected java.lang.String localOem;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localOemTracker = false;

	public boolean isOemSpecified() {
	    return localOemTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getOem() {
	    return localOem;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Oem
	 */
	public void setOem(java.lang.String param) {
	    localOemTracker = param != null;

	    this.localOem = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetAllInfo2", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetAllInfo2", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localVerTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ver", xmlWriter);

		if (localVer == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ver cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localVer);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localOemTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "oem", xmlWriter);

		if (localOem == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "oem cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localOem);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localVerTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ver"));

		if (localVer != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localVer));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ver cannot be null!!");
		}
	    }
	    if (localOemTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "oem"));

		if (localOem != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localOem));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "oem cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetAllInfo2 parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetAllInfo2 object = new GetAllInfo2();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetAllInfo2".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetAllInfo2) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ver").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ver"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setVer(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "oem").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "oem"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setOem(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RegistryInfo2 implements
	    org.apache.axis2.databinding.ADBBean {
	/*
	 * This type was generated from the piece of schema that had name =
	 * RegistryInfo2 Namespace URI = http://tempuri.org/ Namespace Prefix =
	 * ns1
	 */

	/**
	 * field for RESULT
	 */

	protected java.lang.String localRESULT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRESULTTracker = false;

	public boolean isRESULTSpecified() {
	    return localRESULTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRESULT() {
	    return localRESULT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RESULT
	 */
	public void setRESULT(java.lang.String param) {
	    localRESULTTracker = param != null;

	    this.localRESULT = param;

	}

	/**
	 * field for REGISTRYCODE
	 */

	protected java.lang.String localREGISTRYCODE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREGISTRYCODETracker = false;

	public boolean isREGISTRYCODESpecified() {
	    return localREGISTRYCODETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREGISTRYCODE() {
	    return localREGISTRYCODE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REGISTRYCODE
	 */
	public void setREGISTRYCODE(java.lang.String param) {
	    localREGISTRYCODETracker = param != null;

	    this.localREGISTRYCODE = param;

	}

	/**
	 * field for SERVICECODE
	 */

	protected java.lang.String localSERVICECODE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSERVICECODETracker = false;

	public boolean isSERVICECODESpecified() {
	    return localSERVICECODETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSERVICECODE() {
	    return localSERVICECODE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SERVICECODE
	 */
	public void setSERVICECODE(java.lang.String param) {
	    localSERVICECODETracker = param != null;

	    this.localSERVICECODE = param;

	}

	/**
	 * field for BALANCE
	 */

	protected java.lang.String localBALANCE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localBALANCETracker = false;

	public boolean isBALANCESpecified() {
	    return localBALANCETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBALANCE() {
	    return localBALANCE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            BALANCE
	 */
	public void setBALANCE(java.lang.String param) {
	    localBALANCETracker = param != null;

	    this.localBALANCE = param;

	}

	/**
	 * field for CREATEDATE
	 */

	protected java.lang.String localCREATEDATE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localCREATEDATETracker = false;

	public boolean isCREATEDATESpecified() {
	    return localCREATEDATETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCREATEDATE() {
	    return localCREATEDATE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            CREATEDATE
	 */
	public void setCREATEDATE(java.lang.String param) {
	    localCREATEDATETracker = param != null;

	    this.localCREATEDATE = param;

	}

	/**
	 * field for REGISTRYSTATEID
	 */

	protected java.lang.String localREGISTRYSTATEID;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREGISTRYSTATEIDTracker = false;

	public boolean isREGISTRYSTATEIDSpecified() {
	    return localREGISTRYSTATEIDTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREGISTRYSTATEID() {
	    return localREGISTRYSTATEID;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REGISTRYSTATEID
	 */
	public void setREGISTRYSTATEID(java.lang.String param) {
	    localREGISTRYSTATEIDTracker = param != null;

	    this.localREGISTRYSTATEID = param;

	}

	/**
	 * field for PRIORITY
	 */

	protected java.lang.String localPRIORITY;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPRIORITYTracker = false;

	public boolean isPRIORITYSpecified() {
	    return localPRIORITYTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPRIORITY() {
	    return localPRIORITY;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PRIORITY
	 */
	public void setPRIORITY(java.lang.String param) {
	    localPRIORITYTracker = param != null;

	    this.localPRIORITY = param;

	}

	/**
	 * field for FIRSTREGISTRYDATE
	 */

	protected java.lang.String localFIRSTREGISTRYDATE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localFIRSTREGISTRYDATETracker = false;

	public boolean isFIRSTREGISTRYDATESpecified() {
	    return localFIRSTREGISTRYDATETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFIRSTREGISTRYDATE() {
	    return localFIRSTREGISTRYDATE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            FIRSTREGISTRYDATE
	 */
	public void setFIRSTREGISTRYDATE(java.lang.String param) {
	    localFIRSTREGISTRYDATETracker = param != null;

	    this.localFIRSTREGISTRYDATE = param;

	}

	/**
	 * field for REGISTRYDATE
	 */

	protected java.lang.String localREGISTRYDATE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREGISTRYDATETracker = false;

	public boolean isREGISTRYDATESpecified() {
	    return localREGISTRYDATETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREGISTRYDATE() {
	    return localREGISTRYDATE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REGISTRYDATE
	 */
	public void setREGISTRYDATE(java.lang.String param) {
	    localREGISTRYDATETracker = param != null;

	    this.localREGISTRYDATE = param;

	}

	/**
	 * field for AGENTID
	 */

	protected java.lang.String localAGENTID;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localAGENTIDTracker = false;

	public boolean isAGENTIDSpecified() {
	    return localAGENTIDTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getAGENTID() {
	    return localAGENTID;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            AGENTID
	 */
	public void setAGENTID(java.lang.String param) {
	    localAGENTIDTracker = param != null;

	    this.localAGENTID = param;

	}

	/**
	 * field for PRODUCTNAME
	 */

	protected java.lang.String localPRODUCTNAME;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPRODUCTNAMETracker = false;

	public boolean isPRODUCTNAMESpecified() {
	    return localPRODUCTNAMETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPRODUCTNAME() {
	    return localPRODUCTNAME;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PRODUCTNAME
	 */
	public void setPRODUCTNAME(java.lang.String param) {
	    localPRODUCTNAMETracker = param != null;

	    this.localPRODUCTNAME = param;

	}

	/**
	 * field for DESTMOBILE
	 */

	protected java.lang.String localDESTMOBILE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localDESTMOBILETracker = false;

	public boolean isDESTMOBILESpecified() {
	    return localDESTMOBILETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getDESTMOBILE() {
	    return localDESTMOBILE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            DESTMOBILE
	 */
	public void setDESTMOBILE(java.lang.String param) {
	    localDESTMOBILETracker = param != null;

	    this.localDESTMOBILE = param;

	}

	/**
	 * field for FLAG
	 */

	protected java.lang.String localFLAG;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localFLAGTracker = false;

	public boolean isFLAGSpecified() {
	    return localFLAGTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFLAG() {
	    return localFLAG;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            FLAG
	 */
	public void setFLAG(java.lang.String param) {
	    localFLAGTracker = param != null;

	    this.localFLAG = param;

	}

	/**
	 * field for REPLYCONTENT
	 */

	protected java.lang.String localREPLYCONTENT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREPLYCONTENTTracker = false;

	public boolean isREPLYCONTENTSpecified() {
	    return localREPLYCONTENTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREPLYCONTENT() {
	    return localREPLYCONTENT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REPLYCONTENT
	 */
	public void setREPLYCONTENT(java.lang.String param) {
	    localREPLYCONTENTTracker = param != null;

	    this.localREPLYCONTENT = param;

	}

	/**
	 * field for ISRETURN
	 */

	protected java.lang.String localISRETURN;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localISRETURNTracker = false;

	public boolean isISRETURNSpecified() {
	    return localISRETURNTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getISRETURN() {
	    return localISRETURN;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ISRETURN
	 */
	public void setISRETURN(java.lang.String param) {
	    localISRETURNTracker = param != null;

	    this.localISRETURN = param;

	}

	/**
	 * field for VERSION
	 */

	protected java.lang.String localVERSION;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localVERSIONTracker = false;

	public boolean isVERSIONSpecified() {
	    return localVERSIONTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVERSION() {
	    return localVERSION;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            VERSION
	 */
	public void setVERSION(java.lang.String param) {
	    localVERSIONTracker = param != null;

	    this.localVERSION = param;

	}

	/**
	 * field for GRADE
	 */

	protected java.lang.String localGRADE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGRADETracker = false;

	public boolean isGRADESpecified() {
	    return localGRADETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGRADE() {
	    return localGRADE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GRADE
	 */
	public void setGRADE(java.lang.String param) {
	    localGRADETracker = param != null;

	    this.localGRADE = param;

	}

	/**
	 * field for PARENT
	 */

	protected java.lang.String localPARENT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPARENTTracker = false;

	public boolean isPARENTSpecified() {
	    return localPARENTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPARENT() {
	    return localPARENT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PARENT
	 */
	public void setPARENT(java.lang.String param) {
	    localPARENTTracker = param != null;

	    this.localPARENT = param;

	}

	/**
	 * field for SUBSIDIARY
	 */

	protected java.lang.String localSUBSIDIARY;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSUBSIDIARYTracker = false;

	public boolean isSUBSIDIARYSpecified() {
	    return localSUBSIDIARYTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSUBSIDIARY() {
	    return localSUBSIDIARY;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SUBSIDIARY
	 */
	public void setSUBSIDIARY(java.lang.String param) {
	    localSUBSIDIARYTracker = param != null;

	    this.localSUBSIDIARY = param;

	}

	/**
	 * field for ROLES
	 */

	protected java.lang.String localROLES;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localROLESTracker = false;

	public boolean isROLESSpecified() {
	    return localROLESTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getROLES() {
	    return localROLES;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ROLES
	 */
	public void setROLES(java.lang.String param) {
	    localROLESTracker = param != null;

	    this.localROLES = param;

	}

	/**
	 * field for BALSTATUS
	 */

	protected java.lang.String localBALSTATUS;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localBALSTATUSTracker = false;

	public boolean isBALSTATUSSpecified() {
	    return localBALSTATUSTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBALSTATUS() {
	    return localBALSTATUS;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            BALSTATUS
	 */
	public void setBALSTATUS(java.lang.String param) {
	    localBALSTATUSTracker = param != null;

	    this.localBALSTATUS = param;

	}

	/**
	 * field for DISCOUNT
	 */

	protected java.lang.String localDISCOUNT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localDISCOUNTTracker = false;

	public boolean isDISCOUNTSpecified() {
	    return localDISCOUNTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getDISCOUNT() {
	    return localDISCOUNT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            DISCOUNT
	 */
	public void setDISCOUNT(java.lang.String param) {
	    localDISCOUNTTracker = param != null;

	    this.localDISCOUNT = param;

	}

	/**
	 * field for SLIST
	 */

	protected java.lang.String localSLIST;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSLISTTracker = false;

	public boolean isSLISTSpecified() {
	    return localSLISTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSLIST() {
	    return localSLIST;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SLIST
	 */
	public void setSLIST(java.lang.String param) {
	    localSLISTTracker = param != null;

	    this.localSLIST = param;

	}

	/**
	 * field for POPM
	 */

	protected java.lang.String localPOPM;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPOPMTracker = false;

	public boolean isPOPMSpecified() {
	    return localPOPMTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPOPM() {
	    return localPOPM;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            POPM
	 */
	public void setPOPM(java.lang.String param) {
	    localPOPMTracker = param != null;

	    this.localPOPM = param;

	}

	/**
	 * field for UPDATE
	 */

	protected java.lang.String localUPDATE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUPDATETracker = false;

	public boolean isUPDATESpecified() {
	    return localUPDATETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUPDATE() {
	    return localUPDATE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UPDATE
	 */
	public void setUPDATE(java.lang.String param) {
	    localUPDATETracker = param != null;

	    this.localUPDATE = param;

	}

	/**
	 * field for MMS
	 */

	protected java.lang.String localMMS;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMMSTracker = false;

	public boolean isMMSSpecified() {
	    return localMMSTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMMS() {
	    return localMMS;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MMS
	 */
	public void setMMS(java.lang.String param) {
	    localMMSTracker = param != null;

	    this.localMMS = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, parentQName);
	    return factory.createOMElement(dataSource, parentQName);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RegistryInfo2",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RegistryInfo2", xmlWriter);
		}

	    }
	    if (localRESULTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "RESULT", xmlWriter);

		if (localRESULT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "RESULT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRESULT);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREGISTRYCODETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REGISTRYCODE", xmlWriter);

		if (localREGISTRYCODE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYCODE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREGISTRYCODE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSERVICECODETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SERVICECODE", xmlWriter);

		if (localSERVICECODE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SERVICECODE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSERVICECODE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localBALANCETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "BALANCE", xmlWriter);

		if (localBALANCE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "BALANCE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localBALANCE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localCREATEDATETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "CREATEDATE", xmlWriter);

		if (localCREATEDATE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "CREATEDATE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localCREATEDATE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREGISTRYSTATEIDTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REGISTRYSTATEID", xmlWriter);

		if (localREGISTRYSTATEID == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYSTATEID cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREGISTRYSTATEID);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPRIORITYTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "PRIORITY", xmlWriter);

		if (localPRIORITY == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "PRIORITY cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPRIORITY);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localFIRSTREGISTRYDATETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "FIRSTREGISTRYDATE",
			xmlWriter);

		if (localFIRSTREGISTRYDATE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "FIRSTREGISTRYDATE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localFIRSTREGISTRYDATE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREGISTRYDATETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REGISTRYDATE", xmlWriter);

		if (localREGISTRYDATE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYDATE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREGISTRYDATE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localAGENTIDTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "AGENTID", xmlWriter);

		if (localAGENTID == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "AGENTID cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localAGENTID);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPRODUCTNAMETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "PRODUCTNAME", xmlWriter);

		if (localPRODUCTNAME == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "PRODUCTNAME cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPRODUCTNAME);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localDESTMOBILETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "DESTMOBILE", xmlWriter);

		if (localDESTMOBILE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "DESTMOBILE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localDESTMOBILE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localFLAGTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "FLAG", xmlWriter);

		if (localFLAG == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "FLAG cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localFLAG);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREPLYCONTENTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REPLYCONTENT", xmlWriter);

		if (localREPLYCONTENT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REPLYCONTENT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREPLYCONTENT);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localISRETURNTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ISRETURN", xmlWriter);

		if (localISRETURN == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ISRETURN cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localISRETURN);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localVERSIONTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "VERSION", xmlWriter);

		if (localVERSION == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "VERSION cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localVERSION);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localGRADETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "GRADE", xmlWriter);

		if (localGRADE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "GRADE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGRADE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPARENTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "PARENT", xmlWriter);

		if (localPARENT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "PARENT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPARENT);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSUBSIDIARYTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SUBSIDIARY", xmlWriter);

		if (localSUBSIDIARY == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SUBSIDIARY cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSUBSIDIARY);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localROLESTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ROLES", xmlWriter);

		if (localROLES == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ROLES cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localROLES);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localBALSTATUSTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "BALSTATUS", xmlWriter);

		if (localBALSTATUS == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "BALSTATUS cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localBALSTATUS);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localDISCOUNTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "DISCOUNT", xmlWriter);

		if (localDISCOUNT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "DISCOUNT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localDISCOUNT);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSLISTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SLIST", xmlWriter);

		if (localSLIST == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SLIST cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSLIST);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPOPMTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "POPM", xmlWriter);

		if (localPOPM == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "POPM cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPOPM);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localUPDATETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "UPDATE", xmlWriter);

		if (localUPDATE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "UPDATE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUPDATE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMMSTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "MMS", xmlWriter);

		if (localMMS == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "MMS cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMMS);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localRESULTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RESULT"));

		if (localRESULT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRESULT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RESULT cannot be null!!");
		}
	    }
	    if (localREGISTRYCODETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REGISTRYCODE"));

		if (localREGISTRYCODE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREGISTRYCODE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYCODE cannot be null!!");
		}
	    }
	    if (localSERVICECODETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SERVICECODE"));

		if (localSERVICECODE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSERVICECODE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SERVICECODE cannot be null!!");
		}
	    }
	    if (localBALANCETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "BALANCE"));

		if (localBALANCE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localBALANCE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "BALANCE cannot be null!!");
		}
	    }
	    if (localCREATEDATETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "CREATEDATE"));

		if (localCREATEDATE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localCREATEDATE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "CREATEDATE cannot be null!!");
		}
	    }
	    if (localREGISTRYSTATEIDTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REGISTRYSTATEID"));

		if (localREGISTRYSTATEID != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREGISTRYSTATEID));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYSTATEID cannot be null!!");
		}
	    }
	    if (localPRIORITYTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "PRIORITY"));

		if (localPRIORITY != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPRIORITY));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "PRIORITY cannot be null!!");
		}
	    }
	    if (localFIRSTREGISTRYDATETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "FIRSTREGISTRYDATE"));

		if (localFIRSTREGISTRYDATE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localFIRSTREGISTRYDATE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "FIRSTREGISTRYDATE cannot be null!!");
		}
	    }
	    if (localREGISTRYDATETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REGISTRYDATE"));

		if (localREGISTRYDATE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREGISTRYDATE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYDATE cannot be null!!");
		}
	    }
	    if (localAGENTIDTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "AGENTID"));

		if (localAGENTID != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localAGENTID));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "AGENTID cannot be null!!");
		}
	    }
	    if (localPRODUCTNAMETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "PRODUCTNAME"));

		if (localPRODUCTNAME != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPRODUCTNAME));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "PRODUCTNAME cannot be null!!");
		}
	    }
	    if (localDESTMOBILETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "DESTMOBILE"));

		if (localDESTMOBILE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localDESTMOBILE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "DESTMOBILE cannot be null!!");
		}
	    }
	    if (localFLAGTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "FLAG"));

		if (localFLAG != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localFLAG));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "FLAG cannot be null!!");
		}
	    }
	    if (localREPLYCONTENTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REPLYCONTENT"));

		if (localREPLYCONTENT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREPLYCONTENT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REPLYCONTENT cannot be null!!");
		}
	    }
	    if (localISRETURNTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ISRETURN"));

		if (localISRETURN != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localISRETURN));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ISRETURN cannot be null!!");
		}
	    }
	    if (localVERSIONTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "VERSION"));

		if (localVERSION != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localVERSION));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "VERSION cannot be null!!");
		}
	    }
	    if (localGRADETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GRADE"));

		if (localGRADE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGRADE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GRADE cannot be null!!");
		}
	    }
	    if (localPARENTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "PARENT"));

		if (localPARENT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPARENT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "PARENT cannot be null!!");
		}
	    }
	    if (localSUBSIDIARYTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SUBSIDIARY"));

		if (localSUBSIDIARY != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSUBSIDIARY));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SUBSIDIARY cannot be null!!");
		}
	    }
	    if (localROLESTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ROLES"));

		if (localROLES != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localROLES));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ROLES cannot be null!!");
		}
	    }
	    if (localBALSTATUSTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "BALSTATUS"));

		if (localBALSTATUS != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localBALSTATUS));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "BALSTATUS cannot be null!!");
		}
	    }
	    if (localDISCOUNTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "DISCOUNT"));

		if (localDISCOUNT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localDISCOUNT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "DISCOUNT cannot be null!!");
		}
	    }
	    if (localSLISTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SLIST"));

		if (localSLIST != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSLIST));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SLIST cannot be null!!");
		}
	    }
	    if (localPOPMTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "POPM"));

		if (localPOPM != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPOPM));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "POPM cannot be null!!");
		}
	    }
	    if (localUPDATETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "UPDATE"));

		if (localUPDATE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUPDATE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "UPDATE cannot be null!!");
		}
	    }
	    if (localMMSTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "MMS"));

		if (localMMS != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMMS));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "MMS cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RegistryInfo2 parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RegistryInfo2 object = new RegistryInfo2();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RegistryInfo2".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RegistryInfo2) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "RESULT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "RESULT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRESULT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REGISTRYCODE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REGISTRYCODE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREGISTRYCODE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SERVICECODE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SERVICECODE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSERVICECODE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "BALANCE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "BALANCE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setBALANCE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "CREATEDATE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "CREATEDATE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setCREATEDATE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REGISTRYSTATEID")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REGISTRYSTATEID"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREGISTRYSTATEID(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "PRIORITY")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "PRIORITY"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPRIORITY(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "FIRSTREGISTRYDATE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "FIRSTREGISTRYDATE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFIRSTREGISTRYDATE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REGISTRYDATE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REGISTRYDATE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREGISTRYDATE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "AGENTID")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "AGENTID"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setAGENTID(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "PRODUCTNAME")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "PRODUCTNAME"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPRODUCTNAME(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "DESTMOBILE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "DESTMOBILE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setDESTMOBILE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "FLAG")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "FLAG"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFLAG(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REPLYCONTENT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REPLYCONTENT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREPLYCONTENT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ISRETURN")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ISRETURN"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setISRETURN(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "VERSION")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "VERSION"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setVERSION(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GRADE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "GRADE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGRADE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "PARENT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "PARENT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPARENT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SUBSIDIARY")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SUBSIDIARY"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSUBSIDIARY(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ROLES")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ROLES"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setROLES(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "BALSTATUS")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "BALSTATUS"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setBALSTATUS(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "DISCOUNT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "DISCOUNT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setDISCOUNT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SLIST")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SLIST"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSLIST(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "POPM")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "POPM"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPOPM(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "UPDATE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "UPDATE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUPDATE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "MMS").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "MMS"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMMS(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SetGaoDuan implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SetGaoDuan", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Gd
	 */

	protected java.lang.String localGd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGdTracker = false;

	public boolean isGdSpecified() {
	    return localGdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGd() {
	    return localGd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Gd
	 */
	public void setGd(java.lang.String param) {
	    localGdTracker = param != null;

	    this.localGd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SetGaoDuan", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SetGaoDuan", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localGdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "gd", xmlWriter);

		if (localGd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "gd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localGdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "gd"));

		if (localGd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "gd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SetGaoDuan parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SetGaoDuan object = new SetGaoDuan();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SetGaoDuan".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SetGaoDuan) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "gd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "gd" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_AESResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_AESResponse", "ns1");

	/**
	 * field for MdSmsSend_AESResult
	 */

	protected java.lang.String localMdSmsSend_AESResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdSmsSend_AESResultTracker = false;

	public boolean isMdSmsSend_AESResultSpecified() {
	    return localMdSmsSend_AESResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdSmsSend_AESResult() {
	    return localMdSmsSend_AESResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdSmsSend_AESResult
	 */
	public void setMdSmsSend_AESResult(java.lang.String param) {
	    localMdSmsSend_AESResultTracker = param != null;

	    this.localMdSmsSend_AESResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_AESResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_AESResponse", xmlWriter);
		}

	    }
	    if (localMdSmsSend_AESResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdSmsSend_AESResult",
			xmlWriter);

		if (localMdSmsSend_AESResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_AESResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdSmsSend_AESResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdSmsSend_AESResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_AESResult"));

		if (localMdSmsSend_AESResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdSmsSend_AESResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_AESResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_AESResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_AESResponse object = new MdSmsSend_AESResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_AESResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_AESResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/",
				    "mdSmsSend_AESResult").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdSmsSend_AESResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdSmsSend_AESResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MoResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "moResponse", "ns1");

	/**
	 * field for MoResult
	 */

	protected java.lang.String localMoResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMoResultTracker = false;

	public boolean isMoResultSpecified() {
	    return localMoResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMoResult() {
	    return localMoResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MoResult
	 */
	public void setMoResult(java.lang.String param) {
	    localMoResultTracker = param != null;

	    this.localMoResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":moResponse", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "moResponse", xmlWriter);
		}

	    }
	    if (localMoResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "moResult", xmlWriter);

		if (localMoResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "moResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMoResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMoResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "moResult"));

		if (localMoResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMoResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "moResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MoResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MoResponse object = new MoResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"moResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MoResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "moResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "moResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMoResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RegistryInfoE implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RegistryInfo", "ns1");

	/**
	 * field for RegistryInfo
	 */

	protected RegistryInfo localRegistryInfo;

	/**
	 * Auto generated getter method
	 * 
	 * @return RegistryInfo
	 */
	public RegistryInfo getRegistryInfo() {
	    return localRegistryInfo;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RegistryInfo
	 */
	public void setRegistryInfo(RegistryInfo param) {

	    this.localRegistryInfo = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localRegistryInfo == null) {
		java.lang.String namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "RegistryInfo", xmlWriter);

		// write the nil attribute
		writeAttribute("xsi",
			"http://www.w3.org/2001/XMLSchema-instance", "nil",
			"1", xmlWriter);
		xmlWriter.writeEndElement();
	    } else {
		localRegistryInfo.serialize(MY_QNAME, xmlWriter);
	    }

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localRegistryInfo == null) {
		return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(
			MY_QNAME);
	    } else {
		return localRegistryInfo.getPullParser(MY_QNAME);
	    }

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RegistryInfoE parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RegistryInfoE object = new RegistryInfoE();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    nillableValue = reader.getAttributeValue(
			    "http://www.w3.org/2001/XMLSchema-instance", "nil");
		    if ("true".equals(nillableValue)
			    || "1".equals(nillableValue)) {
			// Skip the element and report the null value. It cannot
			// have subelements.
			while (!reader.isEndElement())
			    reader.next();

			return object;

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    while (!reader.isEndElement()) {
			if (reader.isStartElement()) {

			    if (reader.isStartElement()
				    && new javax.xml.namespace.QName(
					    "http://tempuri.org/",
					    "RegistryInfo").equals(reader
					    .getName())) {

				nillableValue = reader
					.getAttributeValue(
						"http://www.w3.org/2001/XMLSchema-instance",
						"nil");
				if ("true".equals(nillableValue)
					|| "1".equals(nillableValue)) {
				    object.setRegistryInfo(null);
				    reader.next();

				} else {

				    object.setRegistryInfo(RegistryInfo.Factory
					    .parse(reader));
				}
			    } // End of if for expected property start element

			    else {
				// A start element we are not expecting
				// indicates an invalid parameter was passed
				throw new org.apache.axis2.databinding.ADBException(
					"Unexpected subelement "
						+ reader.getName());
			    }

			} else {
			    reader.next();
			}
		    } // end of while loop

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class ChargUp implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "ChargUp", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Cardno
	 */

	protected java.lang.String localCardno;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localCardnoTracker = false;

	public boolean isCardnoSpecified() {
	    return localCardnoTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCardno() {
	    return localCardno;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Cardno
	 */
	public void setCardno(java.lang.String param) {
	    localCardnoTracker = param != null;

	    this.localCardno = param;

	}

	/**
	 * field for Cardpwd
	 */

	protected java.lang.String localCardpwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localCardpwdTracker = false;

	public boolean isCardpwdSpecified() {
	    return localCardpwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCardpwd() {
	    return localCardpwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Cardpwd
	 */
	public void setCardpwd(java.lang.String param) {
	    localCardpwdTracker = param != null;

	    this.localCardpwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":ChargUp", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "ChargUp", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localCardnoTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "cardno", xmlWriter);

		if (localCardno == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "cardno cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localCardno);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localCardpwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "cardpwd", xmlWriter);

		if (localCardpwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "cardpwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localCardpwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localCardnoTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "cardno"));

		if (localCardno != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localCardno));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "cardno cannot be null!!");
		}
	    }
	    if (localCardpwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "cardpwd"));

		if (localCardpwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localCardpwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "cardpwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static ChargUp parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		ChargUp object = new ChargUp();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"ChargUp".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (ChargUp) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "cardno")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "cardno"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setCardno(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "cardpwd")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "cardpwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setCardpwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Report2DES implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "report2DES", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Maxid
	 */

	protected long localMaxid;

	/**
	 * Auto generated getter method
	 * 
	 * @return long
	 */
	public long getMaxid() {
	    return localMaxid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Maxid
	 */
	public void setMaxid(long param) {

	    this.localMaxid = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":report2DES", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "report2DES", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "maxid", xmlWriter);

	    if (localMaxid == java.lang.Long.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"maxid cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localMaxid));
	    }

	    xmlWriter.writeEndElement();
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "maxid"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localMaxid));
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Report2DES parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Report2DES object = new Report2DES();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"report2DES".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Report2DES) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "maxid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "maxid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMaxid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToLong(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MongateCsSpSendSmsNewResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "MongateCsSpSendSmsNewResponse", "ns1");

	/**
	 * field for MongateCsSpSendSmsNewResult
	 */

	protected java.lang.String localMongateCsSpSendSmsNewResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMongateCsSpSendSmsNewResultTracker = false;

	public boolean isMongateCsSpSendSmsNewResultSpecified() {
	    return localMongateCsSpSendSmsNewResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMongateCsSpSendSmsNewResult() {
	    return localMongateCsSpSendSmsNewResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MongateCsSpSendSmsNewResult
	 */
	public void setMongateCsSpSendSmsNewResult(java.lang.String param) {
	    localMongateCsSpSendSmsNewResultTracker = param != null;

	    this.localMongateCsSpSendSmsNewResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix
				    + ":MongateCsSpSendSmsNewResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "MongateCsSpSendSmsNewResponse", xmlWriter);
		}

	    }
	    if (localMongateCsSpSendSmsNewResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace,
			"MongateCsSpSendSmsNewResult", xmlWriter);

		if (localMongateCsSpSendSmsNewResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "MongateCsSpSendSmsNewResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMongateCsSpSendSmsNewResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMongateCsSpSendSmsNewResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "MongateCsSpSendSmsNewResult"));

		if (localMongateCsSpSendSmsNewResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMongateCsSpSendSmsNewResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "MongateCsSpSendSmsNewResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MongateCsSpSendSmsNewResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MongateCsSpSendSmsNewResponse object = new MongateCsSpSendSmsNewResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"MongateCsSpSendSmsNewResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MongateCsSpSendSmsNewResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/",
				    "MongateCsSpSendSmsNewResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: "
					    + "MongateCsSpSendSmsNewResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMongateCsSpSendSmsNewResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class TestCode implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "TestCode", "ns1");

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Code
	 */

	protected java.lang.String localCode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localCodeTracker = false;

	public boolean isCodeSpecified() {
	    return localCodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCode() {
	    return localCode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Code
	 */
	public void setCode(java.lang.String param) {
	    localCodeTracker = param != null;

	    this.localCode = param;

	}

	/**
	 * field for Type
	 */

	protected java.lang.String localType;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTypeTracker = false;

	public boolean isTypeSpecified() {
	    return localTypeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getType() {
	    return localType;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Type
	 */
	public void setType(java.lang.String param) {
	    localTypeTracker = param != null;

	    this.localType = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":TestCode", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "TestCode", xmlWriter);
		}

	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localCodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "code", xmlWriter);

		if (localCode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "code cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localCode);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTypeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "type", xmlWriter);

		if (localType == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "type cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localType);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localCodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "code"));

		if (localCode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localCode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "code cannot be null!!");
		}
	    }
	    if (localTypeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "type"));

		if (localType != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localType));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "type cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static TestCode parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		TestCode object = new TestCode();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"TestCode".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (TestCode) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "code")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "code"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setCode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "type")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "type"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setType(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsReceive implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsReceive", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsReceive",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsReceive", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsReceive parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsReceive object = new MdMmsReceive();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsReceive".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsReceive) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSend_exResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend_exResponse", "ns1");

	/**
	 * field for MdMmsSend_exResult
	 */

	protected java.lang.String localMdMmsSend_exResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdMmsSend_exResultTracker = false;

	public boolean isMdMmsSend_exResultSpecified() {
	    return localMdMmsSend_exResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdMmsSend_exResult() {
	    return localMdMmsSend_exResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdMmsSend_exResult
	 */
	public void setMdMmsSend_exResult(java.lang.String param) {
	    localMdMmsSend_exResultTracker = param != null;

	    this.localMdMmsSend_exResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSend_exResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSend_exResponse", xmlWriter);
		}

	    }
	    if (localMdMmsSend_exResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdMmsSend_exResult",
			xmlWriter);

		if (localMdMmsSend_exResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSend_exResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdMmsSend_exResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdMmsSend_exResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSend_exResult"));

		if (localMdMmsSend_exResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdMmsSend_exResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSend_exResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSend_exResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSend_exResponse object = new MdMmsSend_exResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSend_exResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSend_exResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdMmsSend_exResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdMmsSend_exResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdMmsSend_exResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSendFResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSendFResponse", "ns1");

	/**
	 * field for MdMmsSendFResult
	 */

	protected java.lang.String localMdMmsSendFResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdMmsSendFResultTracker = false;

	public boolean isMdMmsSendFResultSpecified() {
	    return localMdMmsSendFResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdMmsSendFResult() {
	    return localMdMmsSendFResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdMmsSendFResult
	 */
	public void setMdMmsSendFResult(java.lang.String param) {
	    localMdMmsSendFResultTracker = param != null;

	    this.localMdMmsSendFResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSendFResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSendFResponse", xmlWriter);
		}

	    }
	    if (localMdMmsSendFResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdMmsSendFResult",
			xmlWriter);

		if (localMdMmsSendFResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSendFResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdMmsSendFResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdMmsSendFResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSendFResult"));

		if (localMdMmsSendFResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdMmsSendFResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSendFResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSendFResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSendFResponse object = new MdMmsSendFResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSendFResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSendFResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdMmsSendFResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdMmsSendFResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdMmsSendFResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class String implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "string", "ns1");

	/**
	 * field for String
	 */

	protected java.lang.String localString;

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getString() {
	    return localString;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            String
	 */
	public void setString(java.lang.String param) {

	    this.localString = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    java.lang.String namespace = "http://tempuri.org/";
	    java.lang.String _localName = "string";

	    writeStartElement(null, namespace, _localName, xmlWriter);

	    // add the type details if this is used in a simple type
	    if (serializeType) {
		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":string", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "string", xmlWriter);
		}
	    }

	    if (localString == null) {

		// write the nil attribute
		writeAttribute("xsi",
			"http://www.w3.org/2001/XMLSchema-instance", "nil",
			"1", xmlWriter);

	    } else {

		xmlWriter.writeCharacters(localString);

	    }

	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localString == null) {
		return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(
			MY_QNAME);
	    } else {
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
			MY_QNAME,
			new java.lang.Object[] {
				org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
				org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localString) }, null);
	    }

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static String parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		String object = new String();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    nillableValue = reader.getAttributeValue(
			    "http://www.w3.org/2001/XMLSchema-instance", "nil");
		    if ("true".equals(nillableValue)
			    || "1".equals(nillableValue)) {
			// Skip the element and report the null value. It cannot
			// have subelements.
			while (!reader.isEndElement())
			    reader.next();

			return object;

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    while (!reader.isEndElement()) {
			if (reader.isStartElement()) {

			    if (reader.isStartElement()
				    && new javax.xml.namespace.QName(
					    "http://tempuri.org/", "string")
					    .equals(reader.getName())) {

				nillableValue = reader
					.getAttributeValue(
						"http://www.w3.org/2001/XMLSchema-instance",
						"nil");
				if (!"true".equals(nillableValue)
					&& !"1".equals(nillableValue)) {

				    java.lang.String content = reader
					    .getElementText();

				    object.setString(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(content));

				} else {

				    reader.getElementText(); // throw away text
							     // nodes if any.
				}

			    } // End of if for expected property start element

			    else {
				// A start element we are not expecting
				// indicates an invalid parameter was passed
				throw new org.apache.axis2.databinding.ADBException(
					"Unexpected subelement "
						+ reader.getName());
			    }

			} else {
			    reader.next();
			}
		    } // end of while loop

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMS_RResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMS_RResponse", "ns1");

	/**
	 * field for SendSMS_RResult
	 */

	protected java.lang.String localSendSMS_RResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSendSMS_RResultTracker = false;

	public boolean isSendSMS_RResultSpecified() {
	    return localSendSMS_RResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSendSMS_RResult() {
	    return localSendSMS_RResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SendSMS_RResult
	 */
	public void setSendSMS_RResult(java.lang.String param) {
	    localSendSMS_RResultTracker = param != null;

	    this.localSendSMS_RResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMS_RResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMS_RResponse", xmlWriter);
		}

	    }
	    if (localSendSMS_RResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SendSMS_RResult", xmlWriter);

		if (localSendSMS_RResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMS_RResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSendSMS_RResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSendSMS_RResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SendSMS_RResult"));

		if (localSendSMS_RResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSendSMS_RResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMS_RResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMS_RResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMS_RResponse object = new SendSMS_RResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMS_RResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMS_RResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SendSMS_RResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SendSMS_RResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSendSMS_RResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class ArrayOfStringE implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "ArrayOfString", "ns1");

	/**
	 * field for ArrayOfString
	 */

	protected ArrayOfString localArrayOfString;

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfString
	 */
	public ArrayOfString getArrayOfString() {
	    return localArrayOfString;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ArrayOfString
	 */
	public void setArrayOfString(ArrayOfString param) {

	    this.localArrayOfString = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localArrayOfString == null) {
		java.lang.String namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ArrayOfString", xmlWriter);

		// write the nil attribute
		writeAttribute("xsi",
			"http://www.w3.org/2001/XMLSchema-instance", "nil",
			"1", xmlWriter);
		xmlWriter.writeEndElement();
	    } else {
		localArrayOfString.serialize(MY_QNAME, xmlWriter);
	    }

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localArrayOfString == null) {
		return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(
			MY_QNAME);
	    } else {
		return localArrayOfString.getPullParser(MY_QNAME);
	    }

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static ArrayOfStringE parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		ArrayOfStringE object = new ArrayOfStringE();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    nillableValue = reader.getAttributeValue(
			    "http://www.w3.org/2001/XMLSchema-instance", "nil");
		    if ("true".equals(nillableValue)
			    || "1".equals(nillableValue)) {
			// Skip the element and report the null value. It cannot
			// have subelements.
			while (!reader.isEndElement())
			    reader.next();

			return object;

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    while (!reader.isEndElement()) {
			if (reader.isStartElement()) {

			    if (reader.isStartElement()
				    && new javax.xml.namespace.QName(
					    "http://tempuri.org/",
					    "ArrayOfString").equals(reader
					    .getName())) {

				nillableValue = reader
					.getAttributeValue(
						"http://www.w3.org/2001/XMLSchema-instance",
						"nil");
				if ("true".equals(nillableValue)
					|| "1".equals(nillableValue)) {
				    object.setArrayOfString(null);
				    reader.next();

				} else {

				    object.setArrayOfString(ArrayOfString.Factory
					    .parse(reader));
				}
			    } // End of if for expected property start element

			    else {
				// A start element we are not expecting
				// indicates an invalid parameter was passed
				throw new org.apache.axis2.databinding.ADBException(
					"Unexpected subelement "
						+ reader.getName());
			    }

			} else {
			    reader.next();
			}
		    } // end of while loop

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class BianliangResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "bianliangResponse", "ns1");

	/**
	 * field for BianliangResult
	 */

	protected java.lang.String localBianliangResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localBianliangResultTracker = false;

	public boolean isBianliangResultSpecified() {
	    return localBianliangResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBianliangResult() {
	    return localBianliangResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            BianliangResult
	 */
	public void setBianliangResult(java.lang.String param) {
	    localBianliangResultTracker = param != null;

	    this.localBianliangResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":bianliangResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "bianliangResponse", xmlWriter);
		}

	    }
	    if (localBianliangResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "bianliangResult", xmlWriter);

		if (localBianliangResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "bianliangResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localBianliangResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localBianliangResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "bianliangResult"));

		if (localBianliangResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localBianliangResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "bianliangResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static BianliangResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		BianliangResponse object = new BianliangResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"bianliangResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (BianliangResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "bianliangResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "bianliangResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setBianliangResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_u implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_u", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_u", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_u", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_u parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_u object = new MdSmsSend_u();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_u".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_u) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SetGaoDuanResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SetGaoDuanResponse", "ns1");

	/**
	 * field for SetGaoDuanResult
	 */

	protected double localSetGaoDuanResult;

	/**
	 * Auto generated getter method
	 * 
	 * @return double
	 */
	public double getSetGaoDuanResult() {
	    return localSetGaoDuanResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SetGaoDuanResult
	 */
	public void setSetGaoDuanResult(double param) {

	    this.localSetGaoDuanResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SetGaoDuanResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SetGaoDuanResponse", xmlWriter);
		}

	    }

	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "SetGaoDuanResult", xmlWriter);

	    if (java.lang.Double.isNaN(localSetGaoDuanResult)) {

		throw new org.apache.axis2.databinding.ADBException(
			"SetGaoDuanResult cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localSetGaoDuanResult));
	    }

	    xmlWriter.writeEndElement();

	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "SetGaoDuanResult"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localSetGaoDuanResult));

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SetGaoDuanResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SetGaoDuanResponse object = new SetGaoDuanResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SetGaoDuanResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SetGaoDuanResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SetGaoDuanResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SetGaoDuanResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSetGaoDuanResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToDouble(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_uResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_uResponse", "ns1");

	/**
	 * field for MdSmsSend_uResult
	 */

	protected java.lang.String localMdSmsSend_uResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdSmsSend_uResultTracker = false;

	public boolean isMdSmsSend_uResultSpecified() {
	    return localMdSmsSend_uResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdSmsSend_uResult() {
	    return localMdSmsSend_uResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdSmsSend_uResult
	 */
	public void setMdSmsSend_uResult(java.lang.String param) {
	    localMdSmsSend_uResultTracker = param != null;

	    this.localMdSmsSend_uResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_uResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_uResponse", xmlWriter);
		}

	    }
	    if (localMdSmsSend_uResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdSmsSend_uResult",
			xmlWriter);

		if (localMdSmsSend_uResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_uResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdSmsSend_uResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdSmsSend_uResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_uResult"));

		if (localMdSmsSend_uResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdSmsSend_uResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_uResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_uResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_uResponse object = new MdSmsSend_uResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_uResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_uResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdSmsSend_uResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdSmsSend_uResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdSmsSend_uResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Report2DESResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "report2DESResponse", "ns1");

	/**
	 * field for Report2DESResult
	 */

	protected java.lang.String localReport2DESResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localReport2DESResultTracker = false;

	public boolean isReport2DESResultSpecified() {
	    return localReport2DESResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getReport2DESResult() {
	    return localReport2DESResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Report2DESResult
	 */
	public void setReport2DESResult(java.lang.String param) {
	    localReport2DESResultTracker = param != null;

	    this.localReport2DESResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":report2DESResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "report2DESResponse", xmlWriter);
		}

	    }
	    if (localReport2DESResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "report2DESResult",
			xmlWriter);

		if (localReport2DESResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "report2DESResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localReport2DESResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localReport2DESResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "report2DESResult"));

		if (localReport2DESResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localReport2DESResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "report2DESResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Report2DESResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Report2DESResponse object = new Report2DESResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"report2DESResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Report2DESResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "report2DESResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "report2DESResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setReport2DESResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class _double implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "double", "ns1");

	/**
	 * field for _double
	 */

	protected double local_double;

	/**
	 * Auto generated getter method
	 * 
	 * @return double
	 */
	public double get_double() {
	    return local_double;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            _double
	 */
	public void set_double(double param) {

	    this.local_double = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    java.lang.String namespace = "http://tempuri.org/";
	    java.lang.String _localName = "double";

	    writeStartElement(null, namespace, _localName, xmlWriter);

	    // add the type details if this is used in a simple type
	    if (serializeType) {
		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":double", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "double", xmlWriter);
		}
	    }

	    if (java.lang.Double.isNaN(local_double)) {

		throw new org.apache.axis2.databinding.ADBException(
			"property value cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(local_double));
	    }

	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it
	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    MY_QNAME,
		    new java.lang.Object[] {
			    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
			    org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(local_double) }, null);

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static _double parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		_double object = new _double();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    while (!reader.isEndElement()) {
			if (reader.isStartElement()) {

			    if (reader.isStartElement()
				    && new javax.xml.namespace.QName(
					    "http://tempuri.org/", "double")
					    .equals(reader.getName())) {

				nillableValue = reader
					.getAttributeValue(
						"http://www.w3.org/2001/XMLSchema-instance",
						"nil");
				if ("true".equals(nillableValue)
					|| "1".equals(nillableValue)) {
				    throw new org.apache.axis2.databinding.ADBException(
					    "The element: " + "double"
						    + "  cannot be null");
				}

				java.lang.String content = reader
					.getElementText();

				object.set_double(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToDouble(content));

			    } // End of if for expected property start element

			    else {
				// A start element we are not expecting
				// indicates an invalid parameter was passed
				throw new org.apache.axis2.databinding.ADBException(
					"Unexpected subelement "
						+ reader.getName());
			    }

			} else {
			    reader.next();
			}
		    } // end of while loop

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class ArrayOfString implements
	    org.apache.axis2.databinding.ADBBean {
	/*
	 * This type was generated from the piece of schema that had name =
	 * ArrayOfString Namespace URI = http://tempuri.org/ Namespace Prefix =
	 * ns1
	 */

	/**
	 * field for String This was an Array!
	 */

	protected java.lang.String[] localString;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStringTracker = false;

	public boolean isStringSpecified() {
	    return localStringTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String[]
	 */
	public java.lang.String[] getString() {
	    return localString;
	}

	/**
	 * validate the array for String
	 */
	protected void validateString(java.lang.String[] param) {

	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            String
	 */
	public void setString(java.lang.String[] param) {

	    validateString(param);

	    localStringTracker = true;

	    this.localString = param;
	}

	/**
	 * Auto generated add method for the array for convenience
	 * 
	 * @param param
	 *            java.lang.String
	 */
	public void addString(java.lang.String param) {
	    if (localString == null) {
		localString = new java.lang.String[] {};
	    }

	    // update the setting tracker
	    localStringTracker = true;

	    java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
		    .toList(localString);
	    list.add(param);
	    this.localString = (java.lang.String[]) list
		    .toArray(new java.lang.String[list.size()]);

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, parentQName);
	    return factory.createOMElement(dataSource, parentQName);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":ArrayOfString",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "ArrayOfString", xmlWriter);
		}

	    }
	    if (localStringTracker) {
		if (localString != null) {
		    namespace = "http://tempuri.org/";
		    for (int i = 0; i < localString.length; i++) {

			if (localString[i] != null) {

			    writeStartElement(null, namespace, "string",
				    xmlWriter);

			    xmlWriter
				    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(localString[i]));

			    xmlWriter.writeEndElement();

			} else {

			    // write null attribute
			    namespace = "http://tempuri.org/";
			    writeStartElement(null, namespace, "string",
				    xmlWriter);
			    writeAttribute(
				    "xsi",
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "nil", "1", xmlWriter);
			    xmlWriter.writeEndElement();

			}

		    }
		} else {

		    // write the null attribute
		    // write null attribute
		    writeStartElement(null, "http://tempuri.org/", "string",
			    xmlWriter);

		    // write the nil attribute
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance", "nil",
			    "1", xmlWriter);
		    xmlWriter.writeEndElement();

		}

	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localStringTracker) {
		if (localString != null) {
		    for (int i = 0; i < localString.length; i++) {

			if (localString[i] != null) {
			    elementList.add(new javax.xml.namespace.QName(
				    "http://tempuri.org/", "string"));
			    elementList
				    .add(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(localString[i]));
			} else {

			    elementList.add(new javax.xml.namespace.QName(
				    "http://tempuri.org/", "string"));
			    elementList.add(null);

			}

		    }
		} else {

		    elementList.add(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "string"));
		    elementList.add(null);

		}

	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static ArrayOfString parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		ArrayOfString object = new ArrayOfString();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"ArrayOfString".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (ArrayOfString) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    java.util.ArrayList list1 = new java.util.ArrayList();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "string")
				    .equals(reader.getName())) {

			// Process the array and step past its final element's
			// end.

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    list1.add(null);

			    reader.next();
			} else {
			    list1.add(reader.getElementText());
			}
			// loop until we find a start element that is not part
			// of this array
			boolean loopDone1 = false;
			while (!loopDone1) {
			    // Ensure we are at the EndElement
			    while (!reader.isEndElement()) {
				reader.next();
			    }
			    // Step out of this element
			    reader.next();
			    // Step to next element event.
			    while (!reader.isStartElement()
				    && !reader.isEndElement())
				reader.next();
			    if (reader.isEndElement()) {
				// two continuous end elements means we are
				// exiting the xml structure
				loopDone1 = true;
			    } else {
				if (new javax.xml.namespace.QName(
					"http://tempuri.org/", "string")
					.equals(reader.getName())) {

				    nillableValue = reader
					    .getAttributeValue(
						    "http://www.w3.org/2001/XMLSchema-instance",
						    "nil");
				    if ("true".equals(nillableValue)
					    || "1".equals(nillableValue)) {
					list1.add(null);

					reader.next();
				    } else {
					list1.add(reader.getElementText());
				    }
				} else {
				    loopDone1 = true;
				}
			    }
			}
			// call the converter utility to convert and set the
			// array

			object.setString((java.lang.String[]) list1
				.toArray(new java.lang.String[list1.size()]));

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMS_R implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMS_R", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMS_R", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMS_R", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMS_R parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMS_R object = new SendSMS_R();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMS_R".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMS_R) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UnRegisterResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UnRegisterResponse", "ns1");

	/**
	 * field for UnRegisterResult
	 */

	protected java.lang.String localUnRegisterResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUnRegisterResultTracker = false;

	public boolean isUnRegisterResultSpecified() {
	    return localUnRegisterResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUnRegisterResult() {
	    return localUnRegisterResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UnRegisterResult
	 */
	public void setUnRegisterResult(java.lang.String param) {
	    localUnRegisterResultTracker = param != null;

	    this.localUnRegisterResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UnRegisterResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UnRegisterResponse", xmlWriter);
		}

	    }
	    if (localUnRegisterResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "UnRegisterResult",
			xmlWriter);

		if (localUnRegisterResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "UnRegisterResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUnRegisterResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localUnRegisterResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "UnRegisterResult"));

		if (localUnRegisterResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUnRegisterResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "UnRegisterResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UnRegisterResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UnRegisterResponse object = new UnRegisterResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UnRegisterResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UnRegisterResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "UnRegisterResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "UnRegisterResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUnRegisterResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class ArrayOfMOBodyE implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "ArrayOfMOBody", "ns1");

	/**
	 * field for ArrayOfMOBody
	 */

	protected ArrayOfMOBody localArrayOfMOBody;

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfMOBody
	 */
	public ArrayOfMOBody getArrayOfMOBody() {
	    return localArrayOfMOBody;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ArrayOfMOBody
	 */
	public void setArrayOfMOBody(ArrayOfMOBody param) {

	    this.localArrayOfMOBody = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localArrayOfMOBody == null) {
		java.lang.String namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ArrayOfMOBody", xmlWriter);

		// write the nil attribute
		writeAttribute("xsi",
			"http://www.w3.org/2001/XMLSchema-instance", "nil",
			"1", xmlWriter);
		xmlWriter.writeEndElement();
	    } else {
		localArrayOfMOBody.serialize(MY_QNAME, xmlWriter);
	    }

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localArrayOfMOBody == null) {
		return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(
			MY_QNAME);
	    } else {
		return localArrayOfMOBody.getPullParser(MY_QNAME);
	    }

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static ArrayOfMOBodyE parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		ArrayOfMOBodyE object = new ArrayOfMOBodyE();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    nillableValue = reader.getAttributeValue(
			    "http://www.w3.org/2001/XMLSchema-instance", "nil");
		    if ("true".equals(nillableValue)
			    || "1".equals(nillableValue)) {
			// Skip the element and report the null value. It cannot
			// have subelements.
			while (!reader.isEndElement())
			    reader.next();

			return object;

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    while (!reader.isEndElement()) {
			if (reader.isStartElement()) {

			    if (reader.isStartElement()
				    && new javax.xml.namespace.QName(
					    "http://tempuri.org/",
					    "ArrayOfMOBody").equals(reader
					    .getName())) {

				nillableValue = reader
					.getAttributeValue(
						"http://www.w3.org/2001/XMLSchema-instance",
						"nil");
				if ("true".equals(nillableValue)
					|| "1".equals(nillableValue)) {
				    object.setArrayOfMOBody(null);
				    reader.next();

				} else {

				    object.setArrayOfMOBody(ArrayOfMOBody.Factory
					    .parse(reader));
				}
			    } // End of if for expected property start element

			    else {
				// A start element we are not expecting
				// indicates an invalid parameter was passed
				throw new org.apache.axis2.databinding.ADBException(
					"Unexpected subelement "
						+ reader.getName());
			    }

			} else {
			    reader.next();
			}
		    } // end of while loop

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSend_ex implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend_ex", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Title
	 */

	protected java.lang.String localTitle;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTitleTracker = false;

	public boolean isTitleSpecified() {
	    return localTitleTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTitle() {
	    return localTitle;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Title
	 */
	public void setTitle(java.lang.String param) {
	    localTitleTracker = param != null;

	    this.localTitle = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSend_ex",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSend_ex", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTitleTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "title", xmlWriter);

		if (localTitle == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTitle);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localTitleTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "title"));

		if (localTitle != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTitle));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSend_ex parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSend_ex object = new MdMmsSend_ex();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSend_ex".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSend_ex) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "title")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "title"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_gResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_gResponse", "ns1");

	/**
	 * field for MdSmsSend_gResult
	 */

	protected java.lang.String localMdSmsSend_gResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdSmsSend_gResultTracker = false;

	public boolean isMdSmsSend_gResultSpecified() {
	    return localMdSmsSend_gResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdSmsSend_gResult() {
	    return localMdSmsSend_gResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdSmsSend_gResult
	 */
	public void setMdSmsSend_gResult(java.lang.String param) {
	    localMdSmsSend_gResultTracker = param != null;

	    this.localMdSmsSend_gResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_gResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_gResponse", xmlWriter);
		}

	    }
	    if (localMdSmsSend_gResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdSmsSend_gResult",
			xmlWriter);

		if (localMdSmsSend_gResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_gResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdSmsSend_gResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdSmsSend_gResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_gResult"));

		if (localMdSmsSend_gResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdSmsSend_gResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_gResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_gResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_gResponse object = new MdSmsSend_gResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_gResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_gResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdSmsSend_gResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdSmsSend_gResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdSmsSend_gResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetCodeResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetCodeResponse", "ns1");

	/**
	 * field for GetCodeResult
	 */

	protected java.lang.String localGetCodeResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGetCodeResultTracker = false;

	public boolean isGetCodeResultSpecified() {
	    return localGetCodeResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGetCodeResult() {
	    return localGetCodeResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GetCodeResult
	 */
	public void setGetCodeResult(java.lang.String param) {
	    localGetCodeResultTracker = param != null;

	    this.localGetCodeResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetCodeResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetCodeResponse", xmlWriter);
		}

	    }
	    if (localGetCodeResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "GetCodeResult", xmlWriter);

		if (localGetCodeResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "GetCodeResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGetCodeResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGetCodeResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetCodeResult"));

		if (localGetCodeResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGetCodeResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetCodeResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetCodeResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetCodeResponse object = new GetCodeResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetCodeResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetCodeResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GetCodeResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "GetCodeResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGetCodeResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsReceiveResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsReceiveResponse", "ns1");

	/**
	 * field for MdMmsReceiveResult
	 */

	protected java.lang.String localMdMmsReceiveResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdMmsReceiveResultTracker = false;

	public boolean isMdMmsReceiveResultSpecified() {
	    return localMdMmsReceiveResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdMmsReceiveResult() {
	    return localMdMmsReceiveResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdMmsReceiveResult
	 */
	public void setMdMmsReceiveResult(java.lang.String param) {
	    localMdMmsReceiveResultTracker = param != null;

	    this.localMdMmsReceiveResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsReceiveResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsReceiveResponse", xmlWriter);
		}

	    }
	    if (localMdMmsReceiveResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdMmsReceiveResult",
			xmlWriter);

		if (localMdMmsReceiveResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsReceiveResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdMmsReceiveResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdMmsReceiveResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsReceiveResult"));

		if (localMdMmsReceiveResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdMmsReceiveResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsReceiveResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsReceiveResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsReceiveResponse object = new MdMmsReceiveResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsReceiveResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsReceiveResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdMmsReceiveResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdMmsReceiveResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdMmsReceiveResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMS implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMS", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMS", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMS", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMS parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMS object = new SendSMS();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMS".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMS) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMSResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMSResponse", "ns1");

	/**
	 * field for SendSMSResult
	 */

	protected java.lang.String localSendSMSResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSendSMSResultTracker = false;

	public boolean isSendSMSResultSpecified() {
	    return localSendSMSResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSendSMSResult() {
	    return localSendSMSResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SendSMSResult
	 */
	public void setSendSMSResult(java.lang.String param) {
	    localSendSMSResultTracker = param != null;

	    this.localSendSMSResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMSResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMSResponse", xmlWriter);
		}

	    }
	    if (localSendSMSResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SendSMSResult", xmlWriter);

		if (localSendSMSResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMSResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSendSMSResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSendSMSResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SendSMSResult"));

		if (localSendSMSResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSendSMSResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMSResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMSResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMSResponse object = new SendSMSResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMSResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMSResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SendSMSResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SendSMSResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSendSMSResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMSEx implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMSEx", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Subcode
	 */

	protected java.lang.String localSubcode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSubcodeTracker = false;

	public boolean isSubcodeSpecified() {
	    return localSubcodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSubcode() {
	    return localSubcode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Subcode
	 */
	public void setSubcode(java.lang.String param) {
	    localSubcodeTracker = param != null;

	    this.localSubcode = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMSEx", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMSEx", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSubcodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "subcode", xmlWriter);

		if (localSubcode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSubcode);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localSubcodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "subcode"));

		if (localSubcode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSubcode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMSEx parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMSEx object = new RECSMSEx();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMSEx".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMSEx) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "subcode")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "subcode"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSubcode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMSEx_R implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMSEx_R", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Subcode
	 */

	protected java.lang.String localSubcode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSubcodeTracker = false;

	public boolean isSubcodeSpecified() {
	    return localSubcodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSubcode() {
	    return localSubcode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Subcode
	 */
	public void setSubcode(java.lang.String param) {
	    localSubcodeTracker = param != null;

	    this.localSubcode = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMSEx_R", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMSEx_R", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSubcodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "subcode", xmlWriter);

		if (localSubcode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSubcode);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localSubcodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "subcode"));

		if (localSubcode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSubcode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMSEx_R parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMSEx_R object = new SendSMSEx_R();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMSEx_R".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMSEx_R) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "subcode")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "subcode"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSubcode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class ExtensionMapper {

	public static java.lang.Object getTypeObject(
		java.lang.String namespaceURI, java.lang.String typeName,
		javax.xml.stream.XMLStreamReader reader)
		throws java.lang.Exception {

	    if ("http://tempuri.org/".equals(namespaceURI)
		    && "MOBody".equals(typeName)) {

		return MOBody.Factory.parse(reader);

	    }

	    if ("http://tempuri.org/".equals(namespaceURI)
		    && "ArrayOfMOBody".equals(typeName)) {

		return ArrayOfMOBody.Factory.parse(reader);

	    }

	    if ("http://tempuri.org/".equals(namespaceURI)
		    && "RegistryInfo".equals(typeName)) {

		return RegistryInfo.Factory.parse(reader);

	    }

	    if ("http://tempuri.org/".equals(namespaceURI)
		    && "RegistryInfo2".equals(typeName)) {

		return RegistryInfo2.Factory.parse(reader);

	    }

	    if ("http://tempuri.org/".equals(namespaceURI)
		    && "ArrayOfString".equals(typeName)) {

		return ArrayOfString.Factory.parse(reader);

	    }

	    throw new org.apache.axis2.databinding.ADBException(
		    "Unsupported type " + namespaceURI + " " + typeName);
	}

    }

    public static class MsgidResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "msgidResponse", "ns1");

	/**
	 * field for MsgidResult
	 */

	protected java.lang.String localMsgidResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMsgidResultTracker = false;

	public boolean isMsgidResultSpecified() {
	    return localMsgidResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMsgidResult() {
	    return localMsgidResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MsgidResult
	 */
	public void setMsgidResult(java.lang.String param) {
	    localMsgidResultTracker = param != null;

	    this.localMsgidResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":msgidResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "msgidResponse", xmlWriter);
		}

	    }
	    if (localMsgidResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "msgidResult", xmlWriter);

		if (localMsgidResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "msgidResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMsgidResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMsgidResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "msgidResult"));

		if (localMsgidResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMsgidResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "msgidResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MsgidResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MsgidResponse object = new MsgidResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"msgidResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MsgidResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "msgidResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "msgidResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMsgidResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMSEx_UTF8 implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMSEx_UTF8", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Subcode
	 */

	protected java.lang.String localSubcode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSubcodeTracker = false;

	public boolean isSubcodeSpecified() {
	    return localSubcodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSubcode() {
	    return localSubcode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Subcode
	 */
	public void setSubcode(java.lang.String param) {
	    localSubcodeTracker = param != null;

	    this.localSubcode = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMSEx_UTF8",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMSEx_UTF8", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSubcodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "subcode", xmlWriter);

		if (localSubcode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSubcode);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localSubcodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "subcode"));

		if (localSubcode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSubcode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMSEx_UTF8 parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMSEx_UTF8 object = new RECSMSEx_UTF8();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMSEx_UTF8".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMSEx_UTF8) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "subcode")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "subcode"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSubcode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetCode implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetCode", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetCode", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetCode", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetCode parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetCode object = new GetCode();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetCode".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetCode) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UDPSIGNEXResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UDPSIGNEXResponse", "ns1");

	/**
	 * field for UDPSIGNEXResult
	 */

	protected java.lang.String localUDPSIGNEXResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUDPSIGNEXResultTracker = false;

	public boolean isUDPSIGNEXResultSpecified() {
	    return localUDPSIGNEXResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUDPSIGNEXResult() {
	    return localUDPSIGNEXResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UDPSIGNEXResult
	 */
	public void setUDPSIGNEXResult(java.lang.String param) {
	    localUDPSIGNEXResultTracker = param != null;

	    this.localUDPSIGNEXResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UDPSIGNEXResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UDPSIGNEXResponse", xmlWriter);
		}

	    }
	    if (localUDPSIGNEXResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "UDPSIGNEXResult", xmlWriter);

		if (localUDPSIGNEXResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "UDPSIGNEXResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUDPSIGNEXResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localUDPSIGNEXResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "UDPSIGNEXResult"));

		if (localUDPSIGNEXResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUDPSIGNEXResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "UDPSIGNEXResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UDPSIGNEXResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UDPSIGNEXResponse object = new UDPSIGNEXResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UDPSIGNEXResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UDPSIGNEXResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "UDPSIGNEXResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "UDPSIGNEXResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUDPSIGNEXResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSendF implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSendF", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSendF", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSendF", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSendF parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSendF object = new MdMmsSendF();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSendF".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSendF) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Mo implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mo", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mo", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mo", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Mo parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Mo object = new Mo();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mo".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Mo) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class ArrayOfMOBody implements
	    org.apache.axis2.databinding.ADBBean {
	/*
	 * This type was generated from the piece of schema that had name =
	 * ArrayOfMOBody Namespace URI = http://tempuri.org/ Namespace Prefix =
	 * ns1
	 */

	/**
	 * field for MOBody This was an Array!
	 */

	protected MOBody[] localMOBody;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMOBodyTracker = false;

	public boolean isMOBodySpecified() {
	    return localMOBodyTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return MOBody[]
	 */
	public MOBody[] getMOBody() {
	    return localMOBody;
	}

	/**
	 * validate the array for MOBody
	 */
	protected void validateMOBody(MOBody[] param) {

	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MOBody
	 */
	public void setMOBody(MOBody[] param) {

	    validateMOBody(param);

	    localMOBodyTracker = true;

	    this.localMOBody = param;
	}

	/**
	 * Auto generated add method for the array for convenience
	 * 
	 * @param param
	 *            MOBody
	 */
	public void addMOBody(MOBody param) {
	    if (localMOBody == null) {
		localMOBody = new MOBody[] {};
	    }

	    // update the setting tracker
	    localMOBodyTracker = true;

	    java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
		    .toList(localMOBody);
	    list.add(param);
	    this.localMOBody = (MOBody[]) list.toArray(new MOBody[list.size()]);

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, parentQName);
	    return factory.createOMElement(dataSource, parentQName);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":ArrayOfMOBody",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "ArrayOfMOBody", xmlWriter);
		}

	    }
	    if (localMOBodyTracker) {
		if (localMOBody != null) {
		    for (int i = 0; i < localMOBody.length; i++) {
			if (localMOBody[i] != null) {
			    localMOBody[i].serialize(
				    new javax.xml.namespace.QName(
					    "http://tempuri.org/", "MOBody"),
				    xmlWriter);
			} else {

			    writeStartElement(null, "http://tempuri.org/",
				    "MOBody", xmlWriter);

			    // write the nil attribute
			    writeAttribute(
				    "xsi",
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "nil", "1", xmlWriter);
			    xmlWriter.writeEndElement();

			}

		    }
		} else {

		    writeStartElement(null, "http://tempuri.org/", "MOBody",
			    xmlWriter);

		    // write the nil attribute
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance", "nil",
			    "1", xmlWriter);
		    xmlWriter.writeEndElement();

		}
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMOBodyTracker) {
		if (localMOBody != null) {
		    for (int i = 0; i < localMOBody.length; i++) {

			if (localMOBody[i] != null) {
			    elementList.add(new javax.xml.namespace.QName(
				    "http://tempuri.org/", "MOBody"));
			    elementList.add(localMOBody[i]);
			} else {

			    elementList.add(new javax.xml.namespace.QName(
				    "http://tempuri.org/", "MOBody"));
			    elementList.add(null);

			}

		    }
		} else {

		    elementList.add(new javax.xml.namespace.QName(
			    "http://tempuri.org/", "MOBody"));
		    elementList.add(localMOBody);

		}

	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static ArrayOfMOBody parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		ArrayOfMOBody object = new ArrayOfMOBody();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"ArrayOfMOBody".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (ArrayOfMOBody) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    java.util.ArrayList list1 = new java.util.ArrayList();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "MOBody")
				    .equals(reader.getName())) {

			// Process the array and step past its final element's
			// end.

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    list1.add(null);
			    reader.next();
			} else {
			    list1.add(MOBody.Factory.parse(reader));
			}
			// loop until we find a start element that is not part
			// of this array
			boolean loopDone1 = false;
			while (!loopDone1) {
			    // We should be at the end element, but make sure
			    while (!reader.isEndElement())
				reader.next();
			    // Step out of this element
			    reader.next();
			    // Step to next element event.
			    while (!reader.isStartElement()
				    && !reader.isEndElement())
				reader.next();
			    if (reader.isEndElement()) {
				// two continuous end elements means we are
				// exiting the xml structure
				loopDone1 = true;
			    } else {
				if (new javax.xml.namespace.QName(
					"http://tempuri.org/", "MOBody")
					.equals(reader.getName())) {

				    nillableValue = reader
					    .getAttributeValue(
						    "http://www.w3.org/2001/XMLSchema-instance",
						    "nil");
				    if ("true".equals(nillableValue)
					    || "1".equals(nillableValue)) {
					list1.add(null);
					reader.next();
				    } else {
					list1.add(MOBody.Factory.parse(reader));
				    }
				} else {
				    loopDone1 = true;
				}
			    }
			}
			// call the converter utility to convert and set the
			// array

			object.setMOBody((MOBody[]) org.apache.axis2.databinding.utils.ConverterUtil
				.convertToArray(MOBody.class, list1));

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend object = new MdSmsSend();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UDPSIGNResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UDPSIGNResponse", "ns1");

	/**
	 * field for UDPSIGNResult
	 */

	protected java.lang.String localUDPSIGNResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUDPSIGNResultTracker = false;

	public boolean isUDPSIGNResultSpecified() {
	    return localUDPSIGNResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUDPSIGNResult() {
	    return localUDPSIGNResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UDPSIGNResult
	 */
	public void setUDPSIGNResult(java.lang.String param) {
	    localUDPSIGNResultTracker = param != null;

	    this.localUDPSIGNResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UDPSIGNResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UDPSIGNResponse", xmlWriter);
		}

	    }
	    if (localUDPSIGNResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "UDPSIGNResult", xmlWriter);

		if (localUDPSIGNResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "UDPSIGNResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUDPSIGNResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localUDPSIGNResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "UDPSIGNResult"));

		if (localUDPSIGNResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUDPSIGNResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "UDPSIGNResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UDPSIGNResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UDPSIGNResponse object = new UDPSIGNResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UDPSIGNResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UDPSIGNResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "UDPSIGNResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "UDPSIGNResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUDPSIGNResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Mt implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mt", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mt", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mt", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Mt parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Mt object = new Mt();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mt".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Mt) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetAllInfo implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetAllInfo", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetAllInfo", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetAllInfo", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetAllInfo parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetAllInfo object = new GetAllInfo();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetAllInfo".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetAllInfo) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class ChargUpResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "ChargUpResponse", "ns1");

	/**
	 * field for ChargUpResult
	 */

	protected java.lang.String localChargUpResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localChargUpResultTracker = false;

	public boolean isChargUpResultSpecified() {
	    return localChargUpResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getChargUpResult() {
	    return localChargUpResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ChargUpResult
	 */
	public void setChargUpResult(java.lang.String param) {
	    localChargUpResultTracker = param != null;

	    this.localChargUpResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":ChargUpResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "ChargUpResponse", xmlWriter);
		}

	    }
	    if (localChargUpResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ChargUpResult", xmlWriter);

		if (localChargUpResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ChargUpResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localChargUpResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localChargUpResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ChargUpResult"));

		if (localChargUpResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localChargUpResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ChargUpResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static ChargUpResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		ChargUpResponse object = new ChargUpResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"ChargUpResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (ChargUpResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ChargUpResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ChargUpResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setChargUpResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMS_UTF8Response implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMS_UTF8Response", "ns1");

	/**
	 * field for RECSMS_UTF8Result
	 */

	protected ArrayOfMOBody localRECSMS_UTF8Result;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRECSMS_UTF8ResultTracker = false;

	public boolean isRECSMS_UTF8ResultSpecified() {
	    return localRECSMS_UTF8ResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfMOBody
	 */
	public ArrayOfMOBody getRECSMS_UTF8Result() {
	    return localRECSMS_UTF8Result;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RECSMS_UTF8Result
	 */
	public void setRECSMS_UTF8Result(ArrayOfMOBody param) {
	    localRECSMS_UTF8ResultTracker = param != null;

	    this.localRECSMS_UTF8Result = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMS_UTF8Response",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMS_UTF8Response", xmlWriter);
		}

	    }
	    if (localRECSMS_UTF8ResultTracker) {
		if (localRECSMS_UTF8Result == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMS_UTF8Result cannot be null!!");
		}
		localRECSMS_UTF8Result.serialize(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RECSMS_UTF8Result"), xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localRECSMS_UTF8ResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RECSMS_UTF8Result"));

		if (localRECSMS_UTF8Result == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMS_UTF8Result cannot be null!!");
		}
		elementList.add(localRECSMS_UTF8Result);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMS_UTF8Response parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMS_UTF8Response object = new RECSMS_UTF8Response();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMS_UTF8Response".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMS_UTF8Response) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "RECSMS_UTF8Result")
				    .equals(reader.getName())) {

			object.setRECSMS_UTF8Result(ArrayOfMOBody.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MongateCsSpSendSmsNew implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "MongateCsSpSendSmsNew", "ns1");

	/**
	 * field for UserId
	 */

	protected java.lang.String localUserId;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUserIdTracker = false;

	public boolean isUserIdSpecified() {
	    return localUserIdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUserId() {
	    return localUserId;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UserId
	 */
	public void setUserId(java.lang.String param) {
	    localUserIdTracker = param != null;

	    this.localUserId = param;

	}

	/**
	 * field for Password
	 */

	protected java.lang.String localPassword;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPasswordTracker = false;

	public boolean isPasswordSpecified() {
	    return localPasswordTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPassword() {
	    return localPassword;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Password
	 */
	public void setPassword(java.lang.String param) {
	    localPasswordTracker = param != null;

	    this.localPassword = param;

	}

	/**
	 * field for PszMobis
	 */

	protected java.lang.String localPszMobis;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPszMobisTracker = false;

	public boolean isPszMobisSpecified() {
	    return localPszMobisTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPszMobis() {
	    return localPszMobis;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PszMobis
	 */
	public void setPszMobis(java.lang.String param) {
	    localPszMobisTracker = param != null;

	    this.localPszMobis = param;

	}

	/**
	 * field for PszMsg
	 */

	protected java.lang.String localPszMsg;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPszMsgTracker = false;

	public boolean isPszMsgSpecified() {
	    return localPszMsgTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPszMsg() {
	    return localPszMsg;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PszMsg
	 */
	public void setPszMsg(java.lang.String param) {
	    localPszMsgTracker = param != null;

	    this.localPszMsg = param;

	}

	/**
	 * field for IMobiCount
	 */

	protected int localIMobiCount;

	/**
	 * Auto generated getter method
	 * 
	 * @return int
	 */
	public int getIMobiCount() {
	    return localIMobiCount;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            IMobiCount
	 */
	public void setIMobiCount(int param) {

	    this.localIMobiCount = param;

	}

	/**
	 * field for PszSubPort
	 */

	protected java.lang.String localPszSubPort;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPszSubPortTracker = false;

	public boolean isPszSubPortSpecified() {
	    return localPszSubPortTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPszSubPort() {
	    return localPszSubPort;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PszSubPort
	 */
	public void setPszSubPort(java.lang.String param) {
	    localPszSubPortTracker = param != null;

	    this.localPszSubPort = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":MongateCsSpSendSmsNew",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "MongateCsSpSendSmsNew", xmlWriter);
		}

	    }
	    if (localUserIdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "userId", xmlWriter);

		if (localUserId == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "userId cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUserId);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPasswordTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "password", xmlWriter);

		if (localPassword == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "password cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPassword);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPszMobisTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pszMobis", xmlWriter);

		if (localPszMobis == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pszMobis cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPszMobis);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPszMsgTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pszMsg", xmlWriter);

		if (localPszMsg == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pszMsg cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPszMsg);

		}

		xmlWriter.writeEndElement();
	    }
	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "iMobiCount", xmlWriter);

	    if (localIMobiCount == java.lang.Integer.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"iMobiCount cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localIMobiCount));
	    }

	    xmlWriter.writeEndElement();
	    if (localPszSubPortTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pszSubPort", xmlWriter);

		if (localPszSubPort == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pszSubPort cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPszSubPort);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localUserIdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "userId"));

		if (localUserId != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUserId));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "userId cannot be null!!");
		}
	    }
	    if (localPasswordTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "password"));

		if (localPassword != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPassword));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "password cannot be null!!");
		}
	    }
	    if (localPszMobisTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pszMobis"));

		if (localPszMobis != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPszMobis));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pszMobis cannot be null!!");
		}
	    }
	    if (localPszMsgTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pszMsg"));

		if (localPszMsg != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPszMsg));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pszMsg cannot be null!!");
		}
	    }
	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "iMobiCount"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localIMobiCount));
	    if (localPszSubPortTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pszSubPort"));

		if (localPszSubPort != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPszSubPort));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pszSubPort cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MongateCsSpSendSmsNew parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MongateCsSpSendSmsNew object = new MongateCsSpSendSmsNew();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"MongateCsSpSendSmsNew".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MongateCsSpSendSmsNew) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "userId")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "userId"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUserId(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "password")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "password"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPassword(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pszMobis")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pszMobis"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPszMobis(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pszMsg")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pszMsg"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPszMsg(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "iMobiCount")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "iMobiCount"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setIMobiCount(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToInt(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pszSubPort")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pszSubPort"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPszSubPort(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UDPSIGN implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UDPSIGN", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Sign
	 */

	protected java.lang.String localSign;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSignTracker = false;

	public boolean isSignSpecified() {
	    return localSignTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSign() {
	    return localSign;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sign
	 */
	public void setSign(java.lang.String param) {
	    localSignTracker = param != null;

	    this.localSign = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UDPSIGN", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UDPSIGN", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSignTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sign", xmlWriter);

		if (localSign == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sign cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSign);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localSignTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sign"));

		if (localSign != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSign));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sign cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UDPSIGN parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UDPSIGN object = new UDPSIGN();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UDPSIGN".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UDPSIGN) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sign")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sign"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSign(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetStatusResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetStatusResponse", "ns1");

	/**
	 * field for GetStatusResult
	 */

	protected java.lang.String localGetStatusResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGetStatusResultTracker = false;

	public boolean isGetStatusResultSpecified() {
	    return localGetStatusResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGetStatusResult() {
	    return localGetStatusResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GetStatusResult
	 */
	public void setGetStatusResult(java.lang.String param) {
	    localGetStatusResultTracker = param != null;

	    this.localGetStatusResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetStatusResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetStatusResponse", xmlWriter);
		}

	    }
	    if (localGetStatusResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "GetStatusResult", xmlWriter);

		if (localGetStatusResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "GetStatusResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGetStatusResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGetStatusResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetStatusResult"));

		if (localGetStatusResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGetStatusResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetStatusResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetStatusResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetStatusResponse object = new GetStatusResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetStatusResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetStatusResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GetStatusResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "GetStatusResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGetStatusResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Report2 implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "report2", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Maxid
	 */

	protected long localMaxid;

	/**
	 * Auto generated getter method
	 * 
	 * @return long
	 */
	public long getMaxid() {
	    return localMaxid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Maxid
	 */
	public void setMaxid(long param) {

	    this.localMaxid = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":report2", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "report2", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "maxid", xmlWriter);

	    if (localMaxid == java.lang.Long.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"maxid cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localMaxid));
	    }

	    xmlWriter.writeEndElement();
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "maxid"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localMaxid));
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Report2 parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Report2 object = new Report2();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"report2".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Report2) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "maxid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "maxid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMaxid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToLong(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMS_UTF8 implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMS_UTF8", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMS_UTF8", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMS_UTF8", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMS_UTF8 parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMS_UTF8 object = new RECSMS_UTF8();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMS_UTF8".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMS_UTF8) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMSEx implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMSEx", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Subcode
	 */

	protected java.lang.String localSubcode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSubcodeTracker = false;

	public boolean isSubcodeSpecified() {
	    return localSubcodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSubcode() {
	    return localSubcode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Subcode
	 */
	public void setSubcode(java.lang.String param) {
	    localSubcodeTracker = param != null;

	    this.localSubcode = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMSEx", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMSEx", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSubcodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "subcode", xmlWriter);

		if (localSubcode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSubcode);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localSubcodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "subcode"));

		if (localSubcode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSubcode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMSEx parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMSEx object = new SendSMSEx();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMSEx".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMSEx) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "subcode")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "subcode"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSubcode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MmsFileMT implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mmsFileMT", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mmsFileMT", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mmsFileMT", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MmsFileMT parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MmsFileMT object = new MmsFileMT();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mmsFileMT".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MmsFileMT) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetFlag implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetFlag", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetFlag", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetFlag", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetFlag parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetFlag object = new GetFlag();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetFlag".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetFlag) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMSResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMSResponse", "ns1");

	/**
	 * field for RECSMSResult
	 */

	protected ArrayOfMOBody localRECSMSResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRECSMSResultTracker = false;

	public boolean isRECSMSResultSpecified() {
	    return localRECSMSResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfMOBody
	 */
	public ArrayOfMOBody getRECSMSResult() {
	    return localRECSMSResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RECSMSResult
	 */
	public void setRECSMSResult(ArrayOfMOBody param) {
	    localRECSMSResultTracker = param != null;

	    this.localRECSMSResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMSResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMSResponse", xmlWriter);
		}

	    }
	    if (localRECSMSResultTracker) {
		if (localRECSMSResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMSResult cannot be null!!");
		}
		localRECSMSResult.serialize(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RECSMSResult"), xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localRECSMSResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RECSMSResult"));

		if (localRECSMSResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMSResult cannot be null!!");
		}
		elementList.add(localRECSMSResult);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMSResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMSResponse object = new RECSMSResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMSResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMSResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "RECSMSResult")
				    .equals(reader.getName())) {

			object.setRECSMSResult(ArrayOfMOBody.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class BalanceResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "balanceResponse", "ns1");

	/**
	 * field for BalanceResult
	 */

	protected java.lang.String localBalanceResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localBalanceResultTracker = false;

	public boolean isBalanceResultSpecified() {
	    return localBalanceResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBalanceResult() {
	    return localBalanceResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            BalanceResult
	 */
	public void setBalanceResult(java.lang.String param) {
	    localBalanceResultTracker = param != null;

	    this.localBalanceResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":balanceResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "balanceResponse", xmlWriter);
		}

	    }
	    if (localBalanceResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "balanceResult", xmlWriter);

		if (localBalanceResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "balanceResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localBalanceResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */
	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localBalanceResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "balanceResult"));

		if (localBalanceResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localBalanceResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "balanceResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static BalanceResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		BalanceResponse object = new BalanceResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"balanceResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (BalanceResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "balanceResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "balanceResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setBalanceResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSend_uexResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend_uexResponse", "ns1");

	/**
	 * field for MdMmsSend_uexResult
	 */

	protected java.lang.String localMdMmsSend_uexResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdMmsSend_uexResultTracker = false;

	public boolean isMdMmsSend_uexResultSpecified() {
	    return localMdMmsSend_uexResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdMmsSend_uexResult() {
	    return localMdMmsSend_uexResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdMmsSend_uexResult
	 */
	public void setMdMmsSend_uexResult(java.lang.String param) {
	    localMdMmsSend_uexResultTracker = param != null;

	    this.localMdMmsSend_uexResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSend_uexResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSend_uexResponse", xmlWriter);
		}

	    }
	    if (localMdMmsSend_uexResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdMmsSend_uexResult",
			xmlWriter);

		if (localMdMmsSend_uexResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSend_uexResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdMmsSend_uexResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdMmsSend_uexResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdMmsSend_uexResult"));

		if (localMdMmsSend_uexResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdMmsSend_uexResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdMmsSend_uexResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSend_uexResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSend_uexResponse object = new MdMmsSend_uexResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSend_uexResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSend_uexResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/",
				    "mdMmsSend_uexResult").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdMmsSend_uexResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdMmsSend_uexResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UDPSIGNEX implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UDPSIGNEX", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Subcode
	 */

	protected java.lang.String localSubcode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSubcodeTracker = false;

	public boolean isSubcodeSpecified() {
	    return localSubcodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSubcode() {
	    return localSubcode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Subcode
	 */
	public void setSubcode(java.lang.String param) {
	    localSubcodeTracker = param != null;

	    this.localSubcode = param;

	}

	/**
	 * field for Sign
	 */

	protected java.lang.String localSign;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSignTracker = false;

	public boolean isSignSpecified() {
	    return localSignTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSign() {
	    return localSign;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sign
	 */
	public void setSign(java.lang.String param) {
	    localSignTracker = param != null;

	    this.localSign = param;

	}

	/**
	 * field for ComName
	 */

	protected java.lang.String localComName;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localComNameTracker = false;

	public boolean isComNameSpecified() {
	    return localComNameTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getComName() {
	    return localComName;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ComName
	 */
	public void setComName(java.lang.String param) {
	    localComNameTracker = param != null;

	    this.localComName = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UDPSIGNEX", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UDPSIGNEX", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSubcodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "subcode", xmlWriter);

		if (localSubcode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSubcode);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSignTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sign", xmlWriter);

		if (localSign == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sign cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSign);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localComNameTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "comName", xmlWriter);

		if (localComName == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "comName cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localComName);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localSubcodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "subcode"));

		if (localSubcode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSubcode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "subcode cannot be null!!");
		}
	    }
	    if (localSignTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sign"));

		if (localSign != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSign));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sign cannot be null!!");
		}
	    }
	    if (localComNameTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "comName"));

		if (localComName != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localComName));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "comName cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UDPSIGNEX parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UDPSIGNEX object = new UDPSIGNEX();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UDPSIGNEX".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UDPSIGNEX) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "subcode")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "subcode"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSubcode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sign")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sign"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSign(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "comName")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "comName"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setComName(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Mo2 implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mo2", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for MaxID
	 */

	protected int localMaxID;

	/**
	 * Auto generated getter method
	 * 
	 * @return int
	 */
	public int getMaxID() {
	    return localMaxID;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MaxID
	 */
	public void setMaxID(int param) {

	    this.localMaxID = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mo2", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mo2", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    namespace = "http://tempuri.org/";
	    writeStartElement(null, namespace, "maxID", xmlWriter);

	    if (localMaxID == java.lang.Integer.MIN_VALUE) {

		throw new org.apache.axis2.databinding.ADBException(
			"maxID cannot be null!!");

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(localMaxID));
	    }

	    xmlWriter.writeEndElement();

	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    elementList.add(new javax.xml.namespace.QName(
		    "http://tempuri.org/", "maxID"));

	    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
		    .convertToString(localMaxID));

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Mo2 parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Mo2 object = new Mo2();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mo2".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Mo2) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "maxID")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "maxID"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMaxID(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToInt(content));

			reader.next();

		    } // End of if for expected property start element

		    else {
			// A start element we are not expecting indicates an
			// invalid parameter was passed
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());
		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RegistryInfo2E implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RegistryInfo2", "ns1");

	/**
	 * field for RegistryInfo2
	 */

	protected RegistryInfo2 localRegistryInfo2;

	/**
	 * Auto generated getter method
	 * 
	 * @return RegistryInfo2
	 */
	public RegistryInfo2 getRegistryInfo2() {
	    return localRegistryInfo2;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RegistryInfo2
	 */
	public void setRegistryInfo2(RegistryInfo2 param) {

	    this.localRegistryInfo2 = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localRegistryInfo2 == null) {
		java.lang.String namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "RegistryInfo2", xmlWriter);

		// write the nil attribute
		writeAttribute("xsi",
			"http://www.w3.org/2001/XMLSchema-instance", "nil",
			"1", xmlWriter);
		xmlWriter.writeEndElement();
	    } else {
		localRegistryInfo2.serialize(MY_QNAME, xmlWriter);
	    }

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    // We can safely assume an element has only one type associated with
	    // it

	    if (localRegistryInfo2 == null) {
		return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(
			MY_QNAME);
	    } else {
		return localRegistryInfo2.getPullParser(MY_QNAME);
	    }

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RegistryInfo2E parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RegistryInfo2E object = new RegistryInfo2E();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    nillableValue = reader.getAttributeValue(
			    "http://www.w3.org/2001/XMLSchema-instance", "nil");
		    if ("true".equals(nillableValue)
			    || "1".equals(nillableValue)) {
			// Skip the element and report the null value. It cannot
			// have subelements.
			while (!reader.isEndElement())
			    reader.next();

			return object;

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    while (!reader.isEndElement()) {
			if (reader.isStartElement()) {

			    if (reader.isStartElement()
				    && new javax.xml.namespace.QName(
					    "http://tempuri.org/",
					    "RegistryInfo2").equals(reader
					    .getName())) {

				nillableValue = reader
					.getAttributeValue(
						"http://www.w3.org/2001/XMLSchema-instance",
						"nil");
				if ("true".equals(nillableValue)
					|| "1".equals(nillableValue)) {
				    object.setRegistryInfo2(null);
				    reader.next();

				} else {

				    object.setRegistryInfo2(RegistryInfo2.Factory
					    .parse(reader));
				}
			    } // End of if for expected property start element

			    else {
				// A start element we are not expecting
				// indicates an invalid parameter was passed
				throw new org.apache.axis2.databinding.ADBException(
					"Unexpected subelement "
						+ reader.getName());
			    }

			} else {
			    reader.next();
			}
		    } // end of while loop

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MtResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mtResponse", "ns1");
	/**
	 * field for MtResult
	 */
	protected java.lang.String localMtResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMtResultTracker = false;

	public boolean isMtResultSpecified() {
	    return localMtResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMtResult() {
	    return localMtResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MtResult
	 */
	public void setMtResult(java.lang.String param) {
	    localMtResultTracker = param != null;

	    this.localMtResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mtResponse", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mtResponse", xmlWriter);
		}

	    }
	    if (localMtResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mtResult", xmlWriter);

		if (localMtResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mtResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMtResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMtResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mtResult"));

		if (localMtResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMtResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mtResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MtResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MtResponse object = new MtResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mtResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MtResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mtResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mtResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMtResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_DES implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_DES", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_DES",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_DES", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_DES parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_DES object = new MdSmsSend_DES();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_DES".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_DES) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMSEx_UTF8Response implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMSEx_UTF8Response", "ns1");

	/**
	 * field for RECSMSEx_UTF8Result
	 */

	protected ArrayOfMOBody localRECSMSEx_UTF8Result;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRECSMSEx_UTF8ResultTracker = false;

	public boolean isRECSMSEx_UTF8ResultSpecified() {
	    return localRECSMSEx_UTF8ResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfMOBody
	 */
	public ArrayOfMOBody getRECSMSEx_UTF8Result() {
	    return localRECSMSEx_UTF8Result;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RECSMSEx_UTF8Result
	 */
	public void setRECSMSEx_UTF8Result(ArrayOfMOBody param) {
	    localRECSMSEx_UTF8ResultTracker = param != null;

	    this.localRECSMSEx_UTF8Result = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMSEx_UTF8Response",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMSEx_UTF8Response", xmlWriter);
		}

	    }
	    if (localRECSMSEx_UTF8ResultTracker) {
		if (localRECSMSEx_UTF8Result == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMSEx_UTF8Result cannot be null!!");
		}
		localRECSMSEx_UTF8Result.serialize(
			new javax.xml.namespace.QName("http://tempuri.org/",
				"RECSMSEx_UTF8Result"), xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localRECSMSEx_UTF8ResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RECSMSEx_UTF8Result"));

		if (localRECSMSEx_UTF8Result == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RECSMSEx_UTF8Result cannot be null!!");
		}
		elementList.add(localRECSMSEx_UTF8Result);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMSEx_UTF8Response parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMSEx_UTF8Response object = new RECSMSEx_UTF8Response();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMSEx_UTF8Response".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMSEx_UTF8Response) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/",
				    "RECSMSEx_UTF8Result").equals(reader
				    .getName())) {

			object.setRECSMSEx_UTF8Result(ArrayOfMOBody.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetBalance implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetBalance", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetBalance", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetBalance", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetBalance parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetBalance object = new GetBalance();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetBalance".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetBalance) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdAudioSend implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdAudioSend", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Title
	 */

	protected java.lang.String localTitle;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTitleTracker = false;

	public boolean isTitleSpecified() {
	    return localTitleTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTitle() {
	    return localTitle;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Title
	 */
	public void setTitle(java.lang.String param) {
	    localTitleTracker = param != null;

	    this.localTitle = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Txt
	 */

	protected java.lang.String localTxt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTxtTracker = false;

	public boolean isTxtSpecified() {
	    return localTxtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTxt() {
	    return localTxt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Txt
	 */
	public void setTxt(java.lang.String param) {
	    localTxtTracker = param != null;

	    this.localTxt = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Srcnumber
	 */

	protected java.lang.String localSrcnumber;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSrcnumberTracker = false;

	public boolean isSrcnumberSpecified() {
	    return localSrcnumberTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSrcnumber() {
	    return localSrcnumber;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Srcnumber
	 */
	public void setSrcnumber(java.lang.String param) {
	    localSrcnumberTracker = param != null;

	    this.localSrcnumber = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdAudioSend", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdAudioSend", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTitleTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "title", xmlWriter);

		if (localTitle == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTitle);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTxtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "txt", xmlWriter);

		if (localTxt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "txt cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTxt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSrcnumberTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "srcnumber", xmlWriter);

		if (localSrcnumber == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "srcnumber cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSrcnumber);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localTitleTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "title"));

		if (localTitle != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTitle));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localTxtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "txt"));

		if (localTxt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTxt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "txt cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localSrcnumberTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "srcnumber"));

		if (localSrcnumber != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSrcnumber));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "srcnumber cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdAudioSend parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdAudioSend object = new MdAudioSend();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdAudioSend".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdAudioSend) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "title")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "title"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "txt").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "txt"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTxt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "srcnumber")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "srcnumber"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSrcnumber(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Report2Response implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "report2Response", "ns1");

	/**
	 * field for Report2Result
	 */

	protected java.lang.String localReport2Result;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localReport2ResultTracker = false;

	public boolean isReport2ResultSpecified() {
	    return localReport2ResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getReport2Result() {
	    return localReport2Result;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Report2Result
	 */
	public void setReport2Result(java.lang.String param) {
	    localReport2ResultTracker = param != null;

	    this.localReport2Result = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":report2Response",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "report2Response", xmlWriter);
		}

	    }
	    if (localReport2ResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "report2Result", xmlWriter);

		if (localReport2Result == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "report2Result cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localReport2Result);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localReport2ResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "report2Result"));

		if (localReport2Result != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localReport2Result));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "report2Result cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Report2Response parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Report2Response object = new Report2Response();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"report2Response".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Report2Response) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "report2Result")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "report2Result"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setReport2Result(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MOBody implements org.apache.axis2.databinding.ADBBean {
	/*
	 * This type was generated from the piece of schema that had name =
	 * MOBody Namespace URI = http://tempuri.org/ Namespace Prefix = ns1
	 */

	/**
	 * field for Total_num
	 */

	protected java.lang.String localTotal_num;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTotal_numTracker = false;

	public boolean isTotal_numSpecified() {
	    return localTotal_numTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTotal_num() {
	    return localTotal_num;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Total_num
	 */
	public void setTotal_num(java.lang.String param) {
	    localTotal_numTracker = param != null;

	    this.localTotal_num = param;

	}

	/**
	 * field for This_num
	 */

	protected java.lang.String localThis_num;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localThis_numTracker = false;

	public boolean isThis_numSpecified() {
	    return localThis_numTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getThis_num() {
	    return localThis_num;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            This_num
	 */
	public void setThis_num(java.lang.String param) {
	    localThis_numTracker = param != null;

	    this.localThis_num = param;

	}

	/**
	 * field for Recvtel
	 */

	protected java.lang.String localRecvtel;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRecvtelTracker = false;

	public boolean isRecvtelSpecified() {
	    return localRecvtelTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRecvtel() {
	    return localRecvtel;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Recvtel
	 */
	public void setRecvtel(java.lang.String param) {
	    localRecvtelTracker = param != null;

	    this.localRecvtel = param;

	}

	/**
	 * field for Sender
	 */

	protected java.lang.String localSender;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSenderTracker = false;

	public boolean isSenderSpecified() {
	    return localSenderTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSender() {
	    return localSender;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sender
	 */
	public void setSender(java.lang.String param) {
	    localSenderTracker = param != null;

	    this.localSender = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Recdate
	 */

	protected java.lang.String localRecdate;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRecdateTracker = false;

	public boolean isRecdateSpecified() {
	    return localRecdateTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRecdate() {
	    return localRecdate;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Recdate
	 */
	public void setRecdate(java.lang.String param) {
	    localRecdateTracker = param != null;

	    this.localRecdate = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, parentQName);
	    return factory.createOMElement(dataSource, parentQName);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":MOBody", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "MOBody", xmlWriter);
		}

	    }
	    if (localTotal_numTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "total_num", xmlWriter);

		if (localTotal_num == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "total_num cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTotal_num);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localThis_numTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "this_num", xmlWriter);

		if (localThis_num == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "this_num cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localThis_num);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRecvtelTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "recvtel", xmlWriter);

		if (localRecvtel == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "recvtel cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRecvtel);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSenderTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sender", xmlWriter);

		if (localSender == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sender cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSender);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRecdateTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "recdate", xmlWriter);

		if (localRecdate == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "recdate cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRecdate);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localTotal_numTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "total_num"));

		if (localTotal_num != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTotal_num));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "total_num cannot be null!!");
		}
	    }
	    if (localThis_numTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "this_num"));

		if (localThis_num != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localThis_num));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "this_num cannot be null!!");
		}
	    }
	    if (localRecvtelTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "recvtel"));

		if (localRecvtel != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRecvtel));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "recvtel cannot be null!!");
		}
	    }
	    if (localSenderTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sender"));

		if (localSender != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSender));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sender cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localRecdateTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "recdate"));

		if (localRecdate != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRecdate));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "recdate cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MOBody parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MOBody object = new MOBody();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"MOBody".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MOBody) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "total_num")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "total_num"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTotal_num(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "this_num")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "this_num"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setThis_num(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "recvtel")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "recvtel"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRecvtel(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sender")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sender"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSender(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "recdate")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "recdate"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRecdate(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MongateCsGetStatusReportExExResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "MongateCsGetStatusReportExExResponse",
		"ns1");

	/**
	 * field for MongateCsGetStatusReportExExResult
	 */

	protected ArrayOfString localMongateCsGetStatusReportExExResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMongateCsGetStatusReportExExResultTracker = false;

	public boolean isMongateCsGetStatusReportExExResultSpecified() {
	    return localMongateCsGetStatusReportExExResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return ArrayOfString
	 */
	public ArrayOfString getMongateCsGetStatusReportExExResult() {
	    return localMongateCsGetStatusReportExExResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MongateCsGetStatusReportExExResult
	 */
	public void setMongateCsGetStatusReportExExResult(ArrayOfString param) {
	    localMongateCsGetStatusReportExExResultTracker = param != null;

	    this.localMongateCsGetStatusReportExExResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix
				    + ":MongateCsGetStatusReportExExResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "MongateCsGetStatusReportExExResponse",
			    xmlWriter);
		}

	    }
	    if (localMongateCsGetStatusReportExExResultTracker) {
		if (localMongateCsGetStatusReportExExResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "MongateCsGetStatusReportExExResult cannot be null!!");
		}
		localMongateCsGetStatusReportExExResult.serialize(
			new javax.xml.namespace.QName("http://tempuri.org/",
				"MongateCsGetStatusReportExExResult"),
			xmlWriter);
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMongateCsGetStatusReportExExResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/",
			"MongateCsGetStatusReportExExResult"));

		if (localMongateCsGetStatusReportExExResult == null) {
		    throw new org.apache.axis2.databinding.ADBException(
			    "MongateCsGetStatusReportExExResult cannot be null!!");
		}
		elementList.add(localMongateCsGetStatusReportExExResult);
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MongateCsGetStatusReportExExResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MongateCsGetStatusReportExExResponse object = new MongateCsGetStatusReportExExResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"MongateCsGetStatusReportExExResponse"
				    .equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MongateCsGetStatusReportExExResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/",
				    "MongateCsGetStatusReportExExResult")
				    .equals(reader.getName())) {

			object.setMongateCsGetStatusReportExExResult(ArrayOfString.Factory
				.parse(reader));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_DESResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_DESResponse", "ns1");

	/**
	 * field for MdSmsSend_DESResult
	 */

	protected java.lang.String localMdSmsSend_DESResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdSmsSend_DESResultTracker = false;

	public boolean isMdSmsSend_DESResultSpecified() {
	    return localMdSmsSend_DESResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdSmsSend_DESResult() {
	    return localMdSmsSend_DESResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdSmsSend_DESResult
	 */
	public void setMdSmsSend_DESResult(java.lang.String param) {
	    localMdSmsSend_DESResultTracker = param != null;

	    this.localMdSmsSend_DESResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_DESResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_DESResponse", xmlWriter);
		}

	    }
	    if (localMdSmsSend_DESResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdSmsSend_DESResult",
			xmlWriter);

		if (localMdSmsSend_DESResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_DESResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdSmsSend_DESResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdSmsSend_DESResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdSmsSend_DESResult"));

		if (localMdSmsSend_DESResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdSmsSend_DESResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdSmsSend_DESResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_DESResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_DESResponse object = new MdSmsSend_DESResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_DESResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_DESResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/",
				    "mdSmsSend_DESResult").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdSmsSend_DESResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdSmsSend_DESResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Gxmt implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "gxmt", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":gxmt", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "gxmt", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Gxmt parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Gxmt object = new Gxmt();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"gxmt".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Gxmt) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdAudioSendResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdAudioSendResponse", "ns1");

	/**
	 * field for MdAudioSendResult
	 */

	protected java.lang.String localMdAudioSendResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMdAudioSendResultTracker = false;

	public boolean isMdAudioSendResultSpecified() {
	    return localMdAudioSendResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMdAudioSendResult() {
	    return localMdAudioSendResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            MdAudioSendResult
	 */
	public void setMdAudioSendResult(java.lang.String param) {
	    localMdAudioSendResultTracker = param != null;

	    this.localMdAudioSendResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdAudioSendResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdAudioSendResponse", xmlWriter);
		}

	    }
	    if (localMdAudioSendResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mdAudioSendResult",
			xmlWriter);

		if (localMdAudioSendResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mdAudioSendResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMdAudioSendResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMdAudioSendResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mdAudioSendResult"));

		if (localMdAudioSendResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMdAudioSendResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mdAudioSendResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdAudioSendResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdAudioSendResponse object = new MdAudioSendResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdAudioSendResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdAudioSendResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mdAudioSendResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mdAudioSendResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMdAudioSendResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Mo2Response implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mo2Response", "ns1");

	/**
	 * field for Mo2Result
	 */

	protected java.lang.String localMo2Result;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMo2ResultTracker = false;

	public boolean isMo2ResultSpecified() {
	    return localMo2ResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMo2Result() {
	    return localMo2Result;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mo2Result
	 */
	public void setMo2Result(java.lang.String param) {
	    localMo2ResultTracker = param != null;

	    this.localMo2Result = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mo2Response", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mo2Response", xmlWriter);
		}

	    }
	    if (localMo2ResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mo2Result", xmlWriter);

		if (localMo2Result == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mo2Result cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMo2Result);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localMo2ResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mo2Result"));

		if (localMo2Result != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMo2Result));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mo2Result cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Mo2Response parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Mo2Response object = new Mo2Response();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mo2Response".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Mo2Response) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mo2Result")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mo2Result"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMo2Result(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SMSTestResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SMSTestResponse", "ns1");

	/**
	 * field for SMSTestResult
	 */

	protected java.lang.String localSMSTestResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSMSTestResultTracker = false;

	public boolean isSMSTestResultSpecified() {
	    return localSMSTestResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSMSTestResult() {
	    return localSMSTestResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SMSTestResult
	 */
	public void setSMSTestResult(java.lang.String param) {
	    localSMSTestResultTracker = param != null;

	    this.localSMSTestResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SMSTestResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SMSTestResponse", xmlWriter);
		}

	    }
	    if (localSMSTestResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SMSTestResult", xmlWriter);

		if (localSMSTestResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SMSTestResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSMSTestResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSMSTestResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SMSTestResult"));

		if (localSMSTestResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSMSTestResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SMSTestResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SMSTestResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SMSTestResponse object = new SMSTestResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SMSTestResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SMSTestResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SMSTestResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SMSTestResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSMSTestResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RegisterResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RegisterResponse", "ns1");

	/**
	 * field for RegisterResult
	 */

	protected java.lang.String localRegisterResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRegisterResultTracker = false;

	public boolean isRegisterResultSpecified() {
	    return localRegisterResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRegisterResult() {
	    return localRegisterResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RegisterResult
	 */
	public void setRegisterResult(java.lang.String param) {
	    localRegisterResultTracker = param != null;

	    this.localRegisterResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RegisterResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RegisterResponse", xmlWriter);
		}

	    }
	    if (localRegisterResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "RegisterResult", xmlWriter);

		if (localRegisterResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "RegisterResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRegisterResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localRegisterResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RegisterResult"));

		if (localRegisterResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRegisterResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RegisterResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RegisterResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RegisterResponse object = new RegisterResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RegisterResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RegisterResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "RegisterResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "RegisterResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRegisterResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class TestCodeResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "TestCodeResponse", "ns1");

	/**
	 * field for TestCodeResult
	 */

	protected java.lang.String localTestCodeResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTestCodeResultTracker = false;

	public boolean isTestCodeResultSpecified() {
	    return localTestCodeResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTestCodeResult() {
	    return localTestCodeResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            TestCodeResult
	 */
	public void setTestCodeResult(java.lang.String param) {
	    localTestCodeResultTracker = param != null;

	    this.localTestCodeResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":TestCodeResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "TestCodeResponse", xmlWriter);
		}

	    }
	    if (localTestCodeResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "TestCodeResult", xmlWriter);

		if (localTestCodeResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "TestCodeResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTestCodeResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localTestCodeResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "TestCodeResult"));

		if (localTestCodeResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTestCodeResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "TestCodeResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static TestCodeResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		TestCodeResponse object = new TestCodeResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"TestCodeResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (TestCodeResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "TestCodeResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "TestCodeResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTestCodeResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetBalanceResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetBalanceResponse", "ns1");

	/**
	 * field for GetBalanceResult
	 */

	protected java.lang.String localGetBalanceResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGetBalanceResultTracker = false;

	public boolean isGetBalanceResultSpecified() {
	    return localGetBalanceResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGetBalanceResult() {
	    return localGetBalanceResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GetBalanceResult
	 */
	public void setGetBalanceResult(java.lang.String param) {
	    localGetBalanceResultTracker = param != null;

	    this.localGetBalanceResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetBalanceResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetBalanceResponse", xmlWriter);
		}

	    }
	    if (localGetBalanceResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "GetBalanceResult",
			xmlWriter);

		if (localGetBalanceResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "GetBalanceResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGetBalanceResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localGetBalanceResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GetBalanceResult"));

		if (localGetBalanceResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGetBalanceResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GetBalanceResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetBalanceResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetBalanceResponse object = new GetBalanceResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetBalanceResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetBalanceResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GetBalanceResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "GetBalanceResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGetBalanceResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdSmsSend_AES implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdSmsSend_AES", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Ext
	 */

	protected java.lang.String localExt;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localExtTracker = false;

	public boolean isExtSpecified() {
	    return localExtTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getExt() {
	    return localExt;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Ext
	 */
	public void setExt(java.lang.String param) {
	    localExtTracker = param != null;

	    this.localExt = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * field for Rrid
	 */

	protected java.lang.String localRrid;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRridTracker = false;

	public boolean isRridSpecified() {
	    return localRridTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRrid() {
	    return localRrid;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Rrid
	 */
	public void setRrid(java.lang.String param) {
	    localRridTracker = param != null;

	    this.localRrid = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdSmsSend_AES",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdSmsSend_AES", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localExtTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ext", xmlWriter);

		if (localExt == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localExt);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localRridTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "rrid", xmlWriter);

		if (localRrid == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRrid);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	@SuppressWarnings("unused")
	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localExtTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ext"));

		if (localExt != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localExt));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ext cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }
	    if (localRridTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "rrid"));

		if (localRrid != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRrid));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "rrid cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdSmsSend_AES parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdSmsSend_AES object = new MdSmsSend_AES();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdSmsSend_AES".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdSmsSend_AES) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ext").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ext"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setExt(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "rrid")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "rrid"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRrid(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdFaxSend implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdFaxSend", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Title
	 */

	protected java.lang.String localTitle;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTitleTracker = false;

	public boolean isTitleSpecified() {
	    return localTitleTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTitle() {
	    return localTitle;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Title
	 */
	public void setTitle(java.lang.String param) {
	    localTitleTracker = param != null;

	    this.localTitle = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Srcnumber
	 */

	protected java.lang.String localSrcnumber;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSrcnumberTracker = false;

	public boolean isSrcnumberSpecified() {
	    return localSrcnumberTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSrcnumber() {
	    return localSrcnumber;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Srcnumber
	 */
	public void setSrcnumber(java.lang.String param) {
	    localSrcnumberTracker = param != null;

	    this.localSrcnumber = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdFaxSend", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdFaxSend", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTitleTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "title", xmlWriter);

		if (localTitle == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTitle);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSrcnumberTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "srcnumber", xmlWriter);

		if (localSrcnumber == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "srcnumber cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSrcnumber);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localTitleTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "title"));

		if (localTitle != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTitle));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localSrcnumberTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "srcnumber"));

		if (localSrcnumber != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSrcnumber));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "srcnumber cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdFaxSend parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdFaxSend object = new MdFaxSend();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdFaxSend".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdFaxSend) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "title")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "title"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "srcnumber")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "srcnumber"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSrcnumber(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class GetGaoDuan implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "GetGaoDuan", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":GetGaoDuan", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "GetGaoDuan", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static GetGaoDuan parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		GetGaoDuan object = new GetGaoDuan();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"GetGaoDuan".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (GetGaoDuan) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SMSTest implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SMSTest", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SMSTest", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SMSTest", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SMSTest parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SMSTest object = new SMSTest();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SMSTest".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SMSTest) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class UDPPwd implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "UDPPwd", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Newpwd
	 */

	protected java.lang.String localNewpwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localNewpwdTracker = false;

	public boolean isNewpwdSpecified() {
	    return localNewpwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getNewpwd() {
	    return localNewpwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Newpwd
	 */
	public void setNewpwd(java.lang.String param) {
	    localNewpwdTracker = param != null;

	    this.localNewpwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":UDPPwd", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "UDPPwd", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localNewpwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "newpwd", xmlWriter);

		if (localNewpwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "newpwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localNewpwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	@SuppressWarnings("unused")
	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localNewpwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "newpwd"));

		if (localNewpwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localNewpwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "newpwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static UDPPwd parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		UDPPwd object = new UDPPwd();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"UDPPwd".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (UDPPwd) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "newpwd")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "newpwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setNewpwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RECSMS implements org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "RECSMS", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RECSMS", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RECSMS", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RECSMS parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RECSMS object = new RECSMS();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RECSMS".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RECSMS) ExtensionMapper.getTypeObject(
					nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class SendSMSEx_RResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "SendSMSEx_RResponse", "ns1");

	/**
	 * field for SendSMSEx_RResult
	 */

	protected java.lang.String localSendSMSEx_RResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSendSMSEx_RResultTracker = false;

	public boolean isSendSMSEx_RResultSpecified() {
	    return localSendSMSEx_RResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSendSMSEx_RResult() {
	    return localSendSMSEx_RResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SendSMSEx_RResult
	 */
	public void setSendSMSEx_RResult(java.lang.String param) {
	    localSendSMSEx_RResultTracker = param != null;

	    this.localSendSMSEx_RResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":SendSMSEx_RResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "SendSMSEx_RResponse", xmlWriter);
		}

	    }
	    if (localSendSMSEx_RResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SendSMSEx_RResult",
			xmlWriter);

		if (localSendSMSEx_RResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMSEx_RResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSendSMSEx_RResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSendSMSEx_RResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SendSMSEx_RResult"));

		if (localSendSMSEx_RResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSendSMSEx_RResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SendSMSEx_RResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static SendSMSEx_RResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		SendSMSEx_RResponse object = new SendSMSEx_RResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"SendSMSEx_RResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (SendSMSEx_RResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SendSMSEx_RResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SendSMSEx_RResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSendSMSEx_RResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MdMmsSend implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "mdMmsSend", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Title
	 */

	protected java.lang.String localTitle;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTitleTracker = false;

	public boolean isTitleSpecified() {
	    return localTitleTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTitle() {
	    return localTitle;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Title
	 */
	public void setTitle(java.lang.String param) {
	    localTitleTracker = param != null;

	    this.localTitle = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Content
	 */

	protected java.lang.String localContent;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localContentTracker = false;

	public boolean isContentSpecified() {
	    return localContentTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getContent() {
	    return localContent;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Content
	 */
	public void setContent(java.lang.String param) {
	    localContentTracker = param != null;

	    this.localContent = param;

	}

	/**
	 * field for Stime
	 */

	protected java.lang.String localStime;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localStimeTracker = false;

	public boolean isStimeSpecified() {
	    return localStimeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStime() {
	    return localStime;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Stime
	 */
	public void setStime(java.lang.String param) {
	    localStimeTracker = param != null;

	    this.localStime = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":mdMmsSend", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "mdMmsSend", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTitleTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "title", xmlWriter);

		if (localTitle == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTitle);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localContentTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "content", xmlWriter);

		if (localContent == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localContent);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localStimeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "stime", xmlWriter);

		if (localStime == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localStime);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	@SuppressWarnings("unused")
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localTitleTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "title"));

		if (localTitle != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTitle));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "title cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localContentTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "content"));

		if (localContent != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localContent));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "content cannot be null!!");
		}
	    }
	    if (localStimeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "stime"));

		if (localStime != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localStime));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "stime cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MdMmsSend parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MdMmsSend object = new MdMmsSend();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"mdMmsSend".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MdMmsSend) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "title")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "title"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "content")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "content"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setContent(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "stime")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "stime"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setStime(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class MongateCsGetSmsExEx implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "MongateCsGetSmsExEx", "ns1");

	/**
	 * field for UserId
	 */

	protected java.lang.String localUserId;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localUserIdTracker = false;

	public boolean isUserIdSpecified() {
	    return localUserIdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getUserId() {
	    return localUserId;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            UserId
	 */
	public void setUserId(java.lang.String param) {
	    localUserIdTracker = param != null;

	    this.localUserId = param;

	}

	/**
	 * field for Password
	 */

	protected java.lang.String localPassword;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPasswordTracker = false;

	public boolean isPasswordSpecified() {
	    return localPasswordTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPassword() {
	    return localPassword;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Password
	 */
	public void setPassword(java.lang.String param) {
	    localPasswordTracker = param != null;

	    this.localPassword = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":MongateCsGetSmsExEx",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "MongateCsGetSmsExEx", xmlWriter);
		}

	    }
	    if (localUserIdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "userId", xmlWriter);

		if (localUserId == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "userId cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localUserId);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPasswordTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "password", xmlWriter);

		if (localPassword == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "password cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPassword);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localUserIdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "userId"));

		if (localUserId != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localUserId));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "userId cannot be null!!");
		}
	    }
	    if (localPasswordTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "password"));

		if (localPassword != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPassword));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "password cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static MongateCsGetSmsExEx parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		MongateCsGetSmsExEx object = new MongateCsGetSmsExEx();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"MongateCsGetSmsExEx".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (MongateCsGetSmsExEx) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "userId")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "userId"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setUserId(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "password")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "password"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPassword(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class RegistryInfo implements
	    org.apache.axis2.databinding.ADBBean {
	/*
	 * This type was generated from the piece of schema that had name =
	 * RegistryInfo Namespace URI = http://tempuri.org/ Namespace Prefix =
	 * ns1
	 */

	/**
	 * field for RESULT
	 */

	protected java.lang.String localRESULT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localRESULTTracker = false;

	public boolean isRESULTSpecified() {
	    return localRESULTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getRESULT() {
	    return localRESULT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            RESULT
	 */
	public void setRESULT(java.lang.String param) {
	    localRESULTTracker = param != null;

	    this.localRESULT = param;

	}

	/**
	 * field for REGISTRYCODE
	 */

	protected java.lang.String localREGISTRYCODE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREGISTRYCODETracker = false;

	public boolean isREGISTRYCODESpecified() {
	    return localREGISTRYCODETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREGISTRYCODE() {
	    return localREGISTRYCODE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REGISTRYCODE
	 */
	public void setREGISTRYCODE(java.lang.String param) {
	    localREGISTRYCODETracker = param != null;

	    this.localREGISTRYCODE = param;

	}

	/**
	 * field for SERVICECODE
	 */

	protected java.lang.String localSERVICECODE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSERVICECODETracker = false;

	public boolean isSERVICECODESpecified() {
	    return localSERVICECODETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSERVICECODE() {
	    return localSERVICECODE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SERVICECODE
	 */
	public void setSERVICECODE(java.lang.String param) {
	    localSERVICECODETracker = param != null;

	    this.localSERVICECODE = param;

	}

	/**
	 * field for BALANCE
	 */

	protected java.lang.String localBALANCE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localBALANCETracker = false;

	public boolean isBALANCESpecified() {
	    return localBALANCETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBALANCE() {
	    return localBALANCE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            BALANCE
	 */
	public void setBALANCE(java.lang.String param) {
	    localBALANCETracker = param != null;

	    this.localBALANCE = param;

	}

	/**
	 * field for CREATEDATE
	 */

	protected java.lang.String localCREATEDATE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localCREATEDATETracker = false;

	public boolean isCREATEDATESpecified() {
	    return localCREATEDATETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCREATEDATE() {
	    return localCREATEDATE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            CREATEDATE
	 */
	public void setCREATEDATE(java.lang.String param) {
	    localCREATEDATETracker = param != null;

	    this.localCREATEDATE = param;

	}

	/**
	 * field for REGISTRYSTATEID
	 */

	protected java.lang.String localREGISTRYSTATEID;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREGISTRYSTATEIDTracker = false;

	public boolean isREGISTRYSTATEIDSpecified() {
	    return localREGISTRYSTATEIDTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREGISTRYSTATEID() {
	    return localREGISTRYSTATEID;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REGISTRYSTATEID
	 */
	public void setREGISTRYSTATEID(java.lang.String param) {
	    localREGISTRYSTATEIDTracker = param != null;

	    this.localREGISTRYSTATEID = param;

	}

	/**
	 * field for PRIORITY
	 */

	protected java.lang.String localPRIORITY;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPRIORITYTracker = false;

	public boolean isPRIORITYSpecified() {
	    return localPRIORITYTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPRIORITY() {
	    return localPRIORITY;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PRIORITY
	 */
	public void setPRIORITY(java.lang.String param) {
	    localPRIORITYTracker = param != null;

	    this.localPRIORITY = param;

	}

	/**
	 * field for FIRSTREGISTRYDATE
	 */

	protected java.lang.String localFIRSTREGISTRYDATE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localFIRSTREGISTRYDATETracker = false;

	public boolean isFIRSTREGISTRYDATESpecified() {
	    return localFIRSTREGISTRYDATETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFIRSTREGISTRYDATE() {
	    return localFIRSTREGISTRYDATE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            FIRSTREGISTRYDATE
	 */
	public void setFIRSTREGISTRYDATE(java.lang.String param) {
	    localFIRSTREGISTRYDATETracker = param != null;

	    this.localFIRSTREGISTRYDATE = param;

	}

	/**
	 * field for REGISTRYDATE
	 */

	protected java.lang.String localREGISTRYDATE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREGISTRYDATETracker = false;

	public boolean isREGISTRYDATESpecified() {
	    return localREGISTRYDATETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREGISTRYDATE() {
	    return localREGISTRYDATE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REGISTRYDATE
	 */
	public void setREGISTRYDATE(java.lang.String param) {
	    localREGISTRYDATETracker = param != null;

	    this.localREGISTRYDATE = param;

	}

	/**
	 * field for AGENTID
	 */

	protected java.lang.String localAGENTID;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localAGENTIDTracker = false;

	public boolean isAGENTIDSpecified() {
	    return localAGENTIDTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getAGENTID() {
	    return localAGENTID;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            AGENTID
	 */
	public void setAGENTID(java.lang.String param) {
	    localAGENTIDTracker = param != null;

	    this.localAGENTID = param;

	}

	/**
	 * field for PRODUCTNAME
	 */

	protected java.lang.String localPRODUCTNAME;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPRODUCTNAMETracker = false;

	public boolean isPRODUCTNAMESpecified() {
	    return localPRODUCTNAMETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPRODUCTNAME() {
	    return localPRODUCTNAME;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PRODUCTNAME
	 */
	public void setPRODUCTNAME(java.lang.String param) {
	    localPRODUCTNAMETracker = param != null;

	    this.localPRODUCTNAME = param;

	}

	/**
	 * field for DESTMOBILE
	 */

	protected java.lang.String localDESTMOBILE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localDESTMOBILETracker = false;

	public boolean isDESTMOBILESpecified() {
	    return localDESTMOBILETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getDESTMOBILE() {
	    return localDESTMOBILE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            DESTMOBILE
	 */
	public void setDESTMOBILE(java.lang.String param) {
	    localDESTMOBILETracker = param != null;

	    this.localDESTMOBILE = param;

	}

	/**
	 * field for FLAG
	 */

	protected java.lang.String localFLAG;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localFLAGTracker = false;

	public boolean isFLAGSpecified() {
	    return localFLAGTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFLAG() {
	    return localFLAG;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            FLAG
	 */
	public void setFLAG(java.lang.String param) {
	    localFLAGTracker = param != null;

	    this.localFLAG = param;

	}

	/**
	 * field for REPLYCONTENT
	 */

	protected java.lang.String localREPLYCONTENT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localREPLYCONTENTTracker = false;

	public boolean isREPLYCONTENTSpecified() {
	    return localREPLYCONTENTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getREPLYCONTENT() {
	    return localREPLYCONTENT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            REPLYCONTENT
	 */
	public void setREPLYCONTENT(java.lang.String param) {
	    localREPLYCONTENTTracker = param != null;

	    this.localREPLYCONTENT = param;

	}

	/**
	 * field for ISRETURN
	 */

	protected java.lang.String localISRETURN;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localISRETURNTracker = false;

	public boolean isISRETURNSpecified() {
	    return localISRETURNTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getISRETURN() {
	    return localISRETURN;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ISRETURN
	 */
	public void setISRETURN(java.lang.String param) {
	    localISRETURNTracker = param != null;

	    this.localISRETURN = param;

	}

	/**
	 * field for VERSION
	 */

	protected java.lang.String localVERSION;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localVERSIONTracker = false;

	public boolean isVERSIONSpecified() {
	    return localVERSIONTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getVERSION() {
	    return localVERSION;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            VERSION
	 */
	public void setVERSION(java.lang.String param) {
	    localVERSIONTracker = param != null;

	    this.localVERSION = param;

	}

	/**
	 * field for GRADE
	 */

	protected java.lang.String localGRADE;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localGRADETracker = false;

	public boolean isGRADESpecified() {
	    return localGRADETracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getGRADE() {
	    return localGRADE;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            GRADE
	 */
	public void setGRADE(java.lang.String param) {
	    localGRADETracker = param != null;

	    this.localGRADE = param;

	}

	/**
	 * field for PARENT
	 */

	protected java.lang.String localPARENT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPARENTTracker = false;

	public boolean isPARENTSpecified() {
	    return localPARENTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPARENT() {
	    return localPARENT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            PARENT
	 */
	public void setPARENT(java.lang.String param) {
	    localPARENTTracker = param != null;

	    this.localPARENT = param;

	}

	/**
	 * field for SUBSIDIARY
	 */

	protected java.lang.String localSUBSIDIARY;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSUBSIDIARYTracker = false;

	public boolean isSUBSIDIARYSpecified() {
	    return localSUBSIDIARYTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSUBSIDIARY() {
	    return localSUBSIDIARY;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            SUBSIDIARY
	 */
	public void setSUBSIDIARY(java.lang.String param) {
	    localSUBSIDIARYTracker = param != null;

	    this.localSUBSIDIARY = param;

	}

	/**
	 * field for ROLES
	 */

	protected java.lang.String localROLES;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localROLESTracker = false;

	public boolean isROLESSpecified() {
	    return localROLESTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getROLES() {
	    return localROLES;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            ROLES
	 */
	public void setROLES(java.lang.String param) {
	    localROLESTracker = param != null;

	    this.localROLES = param;

	}

	/**
	 * field for BALSTATUS
	 */

	protected java.lang.String localBALSTATUS;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localBALSTATUSTracker = false;

	public boolean isBALSTATUSSpecified() {
	    return localBALSTATUSTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBALSTATUS() {
	    return localBALSTATUS;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            BALSTATUS
	 */
	public void setBALSTATUS(java.lang.String param) {
	    localBALSTATUSTracker = param != null;

	    this.localBALSTATUS = param;

	}

	/**
	 * field for DISCOUNT
	 */

	protected java.lang.String localDISCOUNT;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localDISCOUNTTracker = false;

	public boolean isDISCOUNTSpecified() {
	    return localDISCOUNTTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getDISCOUNT() {
	    return localDISCOUNT;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            DISCOUNT
	 */
	public void setDISCOUNT(java.lang.String param) {
	    localDISCOUNTTracker = param != null;

	    this.localDISCOUNT = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, parentQName);
	    return factory.createOMElement(dataSource, parentQName);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":RegistryInfo",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "RegistryInfo", xmlWriter);
		}

	    }
	    if (localRESULTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "RESULT", xmlWriter);

		if (localRESULT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "RESULT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localRESULT);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREGISTRYCODETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REGISTRYCODE", xmlWriter);

		if (localREGISTRYCODE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYCODE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREGISTRYCODE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSERVICECODETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SERVICECODE", xmlWriter);

		if (localSERVICECODE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SERVICECODE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSERVICECODE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localBALANCETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "BALANCE", xmlWriter);

		if (localBALANCE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "BALANCE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localBALANCE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localCREATEDATETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "CREATEDATE", xmlWriter);

		if (localCREATEDATE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "CREATEDATE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localCREATEDATE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREGISTRYSTATEIDTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REGISTRYSTATEID", xmlWriter);

		if (localREGISTRYSTATEID == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYSTATEID cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREGISTRYSTATEID);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPRIORITYTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "PRIORITY", xmlWriter);

		if (localPRIORITY == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "PRIORITY cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPRIORITY);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localFIRSTREGISTRYDATETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "FIRSTREGISTRYDATE",
			xmlWriter);

		if (localFIRSTREGISTRYDATE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "FIRSTREGISTRYDATE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localFIRSTREGISTRYDATE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREGISTRYDATETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REGISTRYDATE", xmlWriter);

		if (localREGISTRYDATE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYDATE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREGISTRYDATE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localAGENTIDTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "AGENTID", xmlWriter);

		if (localAGENTID == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "AGENTID cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localAGENTID);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPRODUCTNAMETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "PRODUCTNAME", xmlWriter);

		if (localPRODUCTNAME == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "PRODUCTNAME cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPRODUCTNAME);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localDESTMOBILETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "DESTMOBILE", xmlWriter);

		if (localDESTMOBILE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "DESTMOBILE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localDESTMOBILE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localFLAGTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "FLAG", xmlWriter);

		if (localFLAG == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "FLAG cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localFLAG);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localREPLYCONTENTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "REPLYCONTENT", xmlWriter);

		if (localREPLYCONTENT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "REPLYCONTENT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localREPLYCONTENT);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localISRETURNTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ISRETURN", xmlWriter);

		if (localISRETURN == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ISRETURN cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localISRETURN);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localVERSIONTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "VERSION", xmlWriter);

		if (localVERSION == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "VERSION cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localVERSION);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localGRADETracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "GRADE", xmlWriter);

		if (localGRADE == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "GRADE cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localGRADE);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPARENTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "PARENT", xmlWriter);

		if (localPARENT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "PARENT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPARENT);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSUBSIDIARYTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "SUBSIDIARY", xmlWriter);

		if (localSUBSIDIARY == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "SUBSIDIARY cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSUBSIDIARY);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localROLESTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "ROLES", xmlWriter);

		if (localROLES == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "ROLES cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localROLES);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localBALSTATUSTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "BALSTATUS", xmlWriter);

		if (localBALSTATUS == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "BALSTATUS cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localBALSTATUS);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localDISCOUNTTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "DISCOUNT", xmlWriter);

		if (localDISCOUNT == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "DISCOUNT cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localDISCOUNT);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localRESULTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "RESULT"));

		if (localRESULT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localRESULT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "RESULT cannot be null!!");
		}
	    }
	    if (localREGISTRYCODETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REGISTRYCODE"));

		if (localREGISTRYCODE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREGISTRYCODE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYCODE cannot be null!!");
		}
	    }
	    if (localSERVICECODETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SERVICECODE"));

		if (localSERVICECODE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSERVICECODE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SERVICECODE cannot be null!!");
		}
	    }
	    if (localBALANCETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "BALANCE"));

		if (localBALANCE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localBALANCE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "BALANCE cannot be null!!");
		}
	    }
	    if (localCREATEDATETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "CREATEDATE"));

		if (localCREATEDATE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localCREATEDATE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "CREATEDATE cannot be null!!");
		}
	    }
	    if (localREGISTRYSTATEIDTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REGISTRYSTATEID"));

		if (localREGISTRYSTATEID != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREGISTRYSTATEID));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYSTATEID cannot be null!!");
		}
	    }
	    if (localPRIORITYTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "PRIORITY"));

		if (localPRIORITY != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPRIORITY));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "PRIORITY cannot be null!!");
		}
	    }
	    if (localFIRSTREGISTRYDATETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "FIRSTREGISTRYDATE"));

		if (localFIRSTREGISTRYDATE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localFIRSTREGISTRYDATE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "FIRSTREGISTRYDATE cannot be null!!");
		}
	    }
	    if (localREGISTRYDATETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REGISTRYDATE"));

		if (localREGISTRYDATE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREGISTRYDATE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REGISTRYDATE cannot be null!!");
		}
	    }
	    if (localAGENTIDTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "AGENTID"));

		if (localAGENTID != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localAGENTID));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "AGENTID cannot be null!!");
		}
	    }
	    if (localPRODUCTNAMETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "PRODUCTNAME"));

		if (localPRODUCTNAME != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPRODUCTNAME));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "PRODUCTNAME cannot be null!!");
		}
	    }
	    if (localDESTMOBILETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "DESTMOBILE"));

		if (localDESTMOBILE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localDESTMOBILE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "DESTMOBILE cannot be null!!");
		}
	    }
	    if (localFLAGTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "FLAG"));

		if (localFLAG != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localFLAG));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "FLAG cannot be null!!");
		}
	    }
	    if (localREPLYCONTENTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "REPLYCONTENT"));

		if (localREPLYCONTENT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localREPLYCONTENT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "REPLYCONTENT cannot be null!!");
		}
	    }
	    if (localISRETURNTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ISRETURN"));

		if (localISRETURN != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localISRETURN));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ISRETURN cannot be null!!");
		}
	    }
	    if (localVERSIONTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "VERSION"));

		if (localVERSION != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localVERSION));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "VERSION cannot be null!!");
		}
	    }
	    if (localGRADETracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "GRADE"));

		if (localGRADE != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localGRADE));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "GRADE cannot be null!!");
		}
	    }
	    if (localPARENTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "PARENT"));

		if (localPARENT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPARENT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "PARENT cannot be null!!");
		}
	    }
	    if (localSUBSIDIARYTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "SUBSIDIARY"));

		if (localSUBSIDIARY != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSUBSIDIARY));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "SUBSIDIARY cannot be null!!");
		}
	    }
	    if (localROLESTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "ROLES"));

		if (localROLES != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localROLES));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "ROLES cannot be null!!");
		}
	    }
	    if (localBALSTATUSTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "BALSTATUS"));

		if (localBALSTATUS != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localBALSTATUS));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "BALSTATUS cannot be null!!");
		}
	    }
	    if (localDISCOUNTTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "DISCOUNT"));

		if (localDISCOUNT != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localDISCOUNT));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "DISCOUNT cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static RegistryInfo parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		RegistryInfo object = new RegistryInfo();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"RegistryInfo".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (RegistryInfo) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "RESULT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "RESULT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setRESULT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REGISTRYCODE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REGISTRYCODE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREGISTRYCODE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SERVICECODE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SERVICECODE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSERVICECODE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "BALANCE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "BALANCE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setBALANCE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "CREATEDATE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "CREATEDATE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setCREATEDATE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REGISTRYSTATEID")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REGISTRYSTATEID"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREGISTRYSTATEID(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "PRIORITY")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "PRIORITY"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPRIORITY(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "FIRSTREGISTRYDATE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "FIRSTREGISTRYDATE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFIRSTREGISTRYDATE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REGISTRYDATE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REGISTRYDATE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREGISTRYDATE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "AGENTID")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "AGENTID"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setAGENTID(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "PRODUCTNAME")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "PRODUCTNAME"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPRODUCTNAME(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "DESTMOBILE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "DESTMOBILE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setDESTMOBILE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "FLAG")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "FLAG"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFLAG(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "REPLYCONTENT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "REPLYCONTENT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setREPLYCONTENT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ISRETURN")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ISRETURN"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setISRETURN(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "VERSION")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "VERSION"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setVERSION(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "GRADE")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "GRADE"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setGRADE(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "PARENT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "PARENT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPARENT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "SUBSIDIARY")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "SUBSIDIARY"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSUBSIDIARY(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "ROLES")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "ROLES"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setROLES(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "BALSTATUS")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "BALSTATUS"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setBALSTATUS(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "DISCOUNT")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "DISCOUNT"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setDISCOUNT(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class FileMTResponse implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "fileMTResponse", "ns1");

	/**
	 * field for FileMTResult
	 */

	protected java.lang.String localFileMTResult;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localFileMTResultTracker = false;

	public boolean isFileMTResultSpecified() {
	    return localFileMTResultTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFileMTResult() {
	    return localFileMTResult;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            FileMTResult
	 */
	public void setFileMTResult(java.lang.String param) {
	    localFileMTResultTracker = param != null;

	    this.localFileMTResult = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":fileMTResponse",
			    xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "fileMTResponse", xmlWriter);
		}

	    }
	    if (localFileMTResultTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "fileMTResult", xmlWriter);

		if (localFileMTResult == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "fileMTResult cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localFileMTResult);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localFileMTResultTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "fileMTResult"));

		if (localFileMTResult != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localFileMTResult));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "fileMTResult cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static FileMTResponse parse(
		    javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		FileMTResponse object = new FileMTResponse();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"fileMTResponse".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (FileMTResponse) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "fileMTResult")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "fileMTResult"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFileMTResult(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    public static class Register implements
	    org.apache.axis2.databinding.ADBBean {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
		"http://tempuri.org/", "Register", "ns1");

	/**
	 * field for Sn
	 */

	protected java.lang.String localSn;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSnTracker = false;

	public boolean isSnSpecified() {
	    return localSnTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSn() {
	    return localSn;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sn
	 */
	public void setSn(java.lang.String param) {
	    localSnTracker = param != null;

	    this.localSn = param;

	}

	/**
	 * field for Pwd
	 */

	protected java.lang.String localPwd;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPwdTracker = false;

	public boolean isPwdSpecified() {
	    return localPwdTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPwd() {
	    return localPwd;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Pwd
	 */
	public void setPwd(java.lang.String param) {
	    localPwdTracker = param != null;

	    this.localPwd = param;

	}

	/**
	 * field for Province
	 */

	protected java.lang.String localProvince;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localProvinceTracker = false;

	public boolean isProvinceSpecified() {
	    return localProvinceTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getProvince() {
	    return localProvince;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Province
	 */
	public void setProvince(java.lang.String param) {
	    localProvinceTracker = param != null;

	    this.localProvince = param;

	}

	/**
	 * field for City
	 */

	protected java.lang.String localCity;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localCityTracker = false;

	public boolean isCitySpecified() {
	    return localCityTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCity() {
	    return localCity;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            City
	 */
	public void setCity(java.lang.String param) {
	    localCityTracker = param != null;

	    this.localCity = param;

	}

	/**
	 * field for Trade
	 */

	protected java.lang.String localTrade;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localTradeTracker = false;

	public boolean isTradeSpecified() {
	    return localTradeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTrade() {
	    return localTrade;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Trade
	 */
	public void setTrade(java.lang.String param) {
	    localTradeTracker = param != null;

	    this.localTrade = param;

	}

	/**
	 * field for Entname
	 */

	protected java.lang.String localEntname;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localEntnameTracker = false;

	public boolean isEntnameSpecified() {
	    return localEntnameTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getEntname() {
	    return localEntname;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Entname
	 */
	public void setEntname(java.lang.String param) {
	    localEntnameTracker = param != null;

	    this.localEntname = param;

	}

	/**
	 * field for Linkman
	 */

	protected java.lang.String localLinkman;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localLinkmanTracker = false;

	public boolean isLinkmanSpecified() {
	    return localLinkmanTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getLinkman() {
	    return localLinkman;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Linkman
	 */
	public void setLinkman(java.lang.String param) {
	    localLinkmanTracker = param != null;

	    this.localLinkman = param;

	}

	/**
	 * field for Phone
	 */

	protected java.lang.String localPhone;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPhoneTracker = false;

	public boolean isPhoneSpecified() {
	    return localPhoneTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPhone() {
	    return localPhone;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Phone
	 */
	public void setPhone(java.lang.String param) {
	    localPhoneTracker = param != null;

	    this.localPhone = param;

	}

	/**
	 * field for Mobile
	 */

	protected java.lang.String localMobile;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localMobileTracker = false;

	public boolean isMobileSpecified() {
	    return localMobileTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMobile() {
	    return localMobile;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Mobile
	 */
	public void setMobile(java.lang.String param) {
	    localMobileTracker = param != null;

	    this.localMobile = param;

	}

	/**
	 * field for Email
	 */

	protected java.lang.String localEmail;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localEmailTracker = false;

	public boolean isEmailSpecified() {
	    return localEmailTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getEmail() {
	    return localEmail;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Email
	 */
	public void setEmail(java.lang.String param) {
	    localEmailTracker = param != null;

	    this.localEmail = param;

	}

	/**
	 * field for Fax
	 */

	protected java.lang.String localFax;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localFaxTracker = false;

	public boolean isFaxSpecified() {
	    return localFaxTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getFax() {
	    return localFax;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Fax
	 */
	public void setFax(java.lang.String param) {
	    localFaxTracker = param != null;

	    this.localFax = param;

	}

	/**
	 * field for Address
	 */

	protected java.lang.String localAddress;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localAddressTracker = false;

	public boolean isAddressSpecified() {
	    return localAddressTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getAddress() {
	    return localAddress;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Address
	 */
	public void setAddress(java.lang.String param) {
	    localAddressTracker = param != null;

	    this.localAddress = param;

	}

	/**
	 * field for Postcode
	 */

	protected java.lang.String localPostcode;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localPostcodeTracker = false;

	public boolean isPostcodeSpecified() {
	    return localPostcodeTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPostcode() {
	    return localPostcode;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Postcode
	 */
	public void setPostcode(java.lang.String param) {
	    localPostcodeTracker = param != null;

	    this.localPostcode = param;

	}

	/**
	 * field for Sign
	 */

	protected java.lang.String localSign;

	/*
	 * This tracker boolean wil be used to detect whether the user called
	 * the set method for this attribute. It will be used to determine
	 * whether to include this field in the serialized XML
	 */
	protected boolean localSignTracker = false;

	public boolean isSignSpecified() {
	    return localSignTracker;
	}

	/**
	 * Auto generated getter method
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getSign() {
	    return localSign;
	}

	/**
	 * Auto generated setter method
	 * 
	 * @param param
	 *            Sign
	 */
	public void setSign(java.lang.String param) {
	    localSignTracker = param != null;

	    this.localSign = param;

	}

	/**
	 * 
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement(
		final javax.xml.namespace.QName parentQName,
		final org.apache.axiom.om.OMFactory factory)
		throws org.apache.axis2.databinding.ADBException {

	    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
		    this, MY_QNAME);
	    return factory.createOMElement(dataSource, MY_QNAME);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {
	    serialize(parentQName, xmlWriter, false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
		javax.xml.stream.XMLStreamWriter xmlWriter,
		boolean serializeType)
		throws javax.xml.stream.XMLStreamException,
		org.apache.axis2.databinding.ADBException {

	    java.lang.String prefix = null;
	    java.lang.String namespace = null;

	    prefix = parentQName.getPrefix();
	    namespace = parentQName.getNamespaceURI();
	    writeStartElement(prefix, namespace, parentQName.getLocalPart(),
		    xmlWriter);

	    if (serializeType) {

		java.lang.String namespacePrefix = registerPrefix(xmlWriter,
			"http://tempuri.org/");
		if ((namespacePrefix != null)
			&& (namespacePrefix.trim().length() > 0)) {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", namespacePrefix + ":Register", xmlWriter);
		} else {
		    writeAttribute("xsi",
			    "http://www.w3.org/2001/XMLSchema-instance",
			    "type", "Register", xmlWriter);
		}

	    }
	    if (localSnTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sn", xmlWriter);

		if (localSn == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSn);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPwdTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "pwd", xmlWriter);

		if (localPwd == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPwd);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localProvinceTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "province", xmlWriter);

		if (localProvince == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "province cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localProvince);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localCityTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "city", xmlWriter);

		if (localCity == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "city cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localCity);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localTradeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "trade", xmlWriter);

		if (localTrade == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "trade cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localTrade);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localEntnameTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "entname", xmlWriter);

		if (localEntname == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "entname cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localEntname);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localLinkmanTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "linkman", xmlWriter);

		if (localLinkman == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "linkman cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localLinkman);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPhoneTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "phone", xmlWriter);

		if (localPhone == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "phone cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPhone);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localMobileTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "mobile", xmlWriter);

		if (localMobile == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localMobile);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localEmailTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "email", xmlWriter);

		if (localEmail == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "email cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localEmail);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localFaxTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "fax", xmlWriter);

		if (localFax == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "fax cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localFax);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localAddressTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "address", xmlWriter);

		if (localAddress == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "address cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localAddress);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localPostcodeTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "postcode", xmlWriter);

		if (localPostcode == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "postcode cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localPostcode);

		}

		xmlWriter.writeEndElement();
	    }
	    if (localSignTracker) {
		namespace = "http://tempuri.org/";
		writeStartElement(null, namespace, "sign", xmlWriter);

		if (localSign == null) {
		    // write the nil attribute

		    throw new org.apache.axis2.databinding.ADBException(
			    "sign cannot be null!!");

		} else {

		    xmlWriter.writeCharacters(localSign);

		}

		xmlWriter.writeEndElement();
	    }
	    xmlWriter.writeEndElement();

	}

	private static java.lang.String generatePrefix(
		java.lang.String namespace) {
	    if (namespace.equals("http://tempuri.org/")) {
		return "ns1";
	    }
	    return org.apache.axis2.databinding.utils.BeanUtil
		    .getUniquePrefix();
	}

	/**
	 * Utility method to write an element start tag.
	 */
	private void writeStartElement(java.lang.String prefix,
		java.lang.String namespace, java.lang.String localPart,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
	    if (writerPrefix != null) {
		xmlWriter.writeStartElement(namespace, localPart);
	    } else {
		if (namespace.length() == 0) {
		    prefix = "";
		} else if (prefix == null) {
		    prefix = generatePrefix(namespace);
		}

		xmlWriter.writeStartElement(prefix, localPart, namespace);
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,
		java.lang.String namespace, java.lang.String attName,
		java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (xmlWriter.getPrefix(namespace) == null) {
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    xmlWriter.writeAttribute(namespace, attName, attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,
		java.lang.String attName, java.lang.String attValue,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attValue);
	    }
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace,
		java.lang.String attName, javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    java.lang.String attributeNamespace = qname.getNamespaceURI();
	    java.lang.String attributePrefix = xmlWriter
		    .getPrefix(attributeNamespace);
	    if (attributePrefix == null) {
		attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
	    }
	    java.lang.String attributeValue;
	    if (attributePrefix.trim().length() > 0) {
		attributeValue = attributePrefix + ":" + qname.getLocalPart();
	    } else {
		attributeValue = qname.getLocalPart();
	    }

	    if (namespace.equals("")) {
		xmlWriter.writeAttribute(attName, attributeValue);
	    } else {
		registerPrefix(xmlWriter, namespace);
		xmlWriter.writeAttribute(namespace, attName, attributeValue);
	    }
	}

	/**
	 * method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String namespaceURI = qname.getNamespaceURI();
	    if (namespaceURI != null) {
		java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
		if (prefix == null) {
		    prefix = generatePrefix(namespaceURI);
		    xmlWriter.writeNamespace(prefix, namespaceURI);
		    xmlWriter.setPrefix(prefix, namespaceURI);
		}

		if (prefix.trim().length() > 0) {
		    xmlWriter.writeCharacters(prefix
			    + ":"
			    + org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		} else {
		    // i.e this is the default namespace
		    xmlWriter
			    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(qname));
		}

	    } else {
		xmlWriter
			.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(qname));
	    }
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
		javax.xml.stream.XMLStreamWriter xmlWriter)
		throws javax.xml.stream.XMLStreamException {

	    if (qnames != null) {
		// we have to store this data until last moment since it is not
		// possible to write any
		// namespace data after writing the charactor data
		java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
		java.lang.String namespaceURI = null;
		java.lang.String prefix = null;

		for (int i = 0; i < qnames.length; i++) {
		    if (i > 0) {
			stringToWrite.append(" ");
		    }
		    namespaceURI = qnames[i].getNamespaceURI();
		    if (namespaceURI != null) {
			prefix = xmlWriter.getPrefix(namespaceURI);
			if ((prefix == null) || (prefix.length() == 0)) {
			    prefix = generatePrefix(namespaceURI);
			    xmlWriter.writeNamespace(prefix, namespaceURI);
			    xmlWriter.setPrefix(prefix, namespaceURI);
			}

			if (prefix.trim().length() > 0) {
			    stringToWrite
				    .append(prefix)
				    .append(":")
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			} else {
			    stringToWrite
				    .append(org.apache.axis2.databinding.utils.ConverterUtil
					    .convertToString(qnames[i]));
			}
		    } else {
			stringToWrite
				.append(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(qnames[i]));
		    }
		}
		xmlWriter.writeCharacters(stringToWrite.toString());
	    }

	}

	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(
		javax.xml.stream.XMLStreamWriter xmlWriter,
		java.lang.String namespace)
		throws javax.xml.stream.XMLStreamException {
	    java.lang.String prefix = xmlWriter.getPrefix(namespace);
	    if (prefix == null) {
		prefix = generatePrefix(namespace);
		javax.xml.namespace.NamespaceContext nsContext = xmlWriter
			.getNamespaceContext();
		while (true) {
		    java.lang.String uri = nsContext.getNamespaceURI(prefix);
		    if (uri == null || uri.length() == 0) {
			break;
		    }
		    prefix = org.apache.axis2.databinding.utils.BeanUtil
			    .getUniquePrefix();
		}
		xmlWriter.writeNamespace(prefix, namespace);
		xmlWriter.setPrefix(prefix, namespace);
	    }
	    return prefix;
	}

	/**
	 * databinding method to get an XML representation of this object
	 * 
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(
		javax.xml.namespace.QName qName)
		throws org.apache.axis2.databinding.ADBException {

	    java.util.ArrayList elementList = new java.util.ArrayList();
	    java.util.ArrayList attribList = new java.util.ArrayList();

	    if (localSnTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sn"));

		if (localSn != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSn));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sn cannot be null!!");
		}
	    }
	    if (localPwdTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "pwd"));

		if (localPwd != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPwd));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "pwd cannot be null!!");
		}
	    }
	    if (localProvinceTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "province"));

		if (localProvince != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localProvince));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "province cannot be null!!");
		}
	    }
	    if (localCityTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "city"));

		if (localCity != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localCity));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "city cannot be null!!");
		}
	    }
	    if (localTradeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "trade"));

		if (localTrade != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localTrade));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "trade cannot be null!!");
		}
	    }
	    if (localEntnameTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "entname"));

		if (localEntname != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localEntname));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "entname cannot be null!!");
		}
	    }
	    if (localLinkmanTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "linkman"));

		if (localLinkman != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localLinkman));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "linkman cannot be null!!");
		}
	    }
	    if (localPhoneTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "phone"));

		if (localPhone != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPhone));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "phone cannot be null!!");
		}
	    }
	    if (localMobileTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "mobile"));

		if (localMobile != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localMobile));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "mobile cannot be null!!");
		}
	    }
	    if (localEmailTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "email"));

		if (localEmail != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localEmail));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "email cannot be null!!");
		}
	    }
	    if (localFaxTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "fax"));

		if (localFax != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localFax));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "fax cannot be null!!");
		}
	    }
	    if (localAddressTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "address"));

		if (localAddress != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localAddress));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "address cannot be null!!");
		}
	    }
	    if (localPostcodeTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "postcode"));

		if (localPostcode != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localPostcode));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "postcode cannot be null!!");
		}
	    }
	    if (localSignTracker) {
		elementList.add(new javax.xml.namespace.QName(
			"http://tempuri.org/", "sign"));

		if (localSign != null) {
		    elementList
			    .add(org.apache.axis2.databinding.utils.ConverterUtil
				    .convertToString(localSign));
		} else {
		    throw new org.apache.axis2.databinding.ADBException(
			    "sign cannot be null!!");
		}
	    }

	    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
		    qName, elementList.toArray(), attribList.toArray());

	}

	/**
	 * Factory class that keeps the parse method
	 */
	public static class Factory {

	    /**
	     * static method to create the object Precondition: If this object
	     * is an element, the current or next start element starts this
	     * object and any intervening reader events are ignorable If this
	     * object is not an element, it is a complex type and the reader is
	     * at the event just after the outer start element Postcondition: If
	     * this object is an element, the reader is positioned at its end
	     * element If this object is a complex type, the reader is
	     * positioned at the end element of its outer element
	     */
	    public static Register parse(javax.xml.stream.XMLStreamReader reader)
		    throws java.lang.Exception {
		Register object = new Register();

		int event;
		java.lang.String nillableValue = null;
		java.lang.String prefix = "";
		java.lang.String namespaceuri = "";
		try {

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader
			    .getAttributeValue(
				    "http://www.w3.org/2001/XMLSchema-instance",
				    "type") != null) {
			java.lang.String fullTypeName = reader
				.getAttributeValue(
					"http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName != null) {
			    java.lang.String nsPrefix = null;
			    if (fullTypeName.indexOf(":") > -1) {
				nsPrefix = fullTypeName.substring(0,
					fullTypeName.indexOf(":"));
			    }
			    nsPrefix = nsPrefix == null ? "" : nsPrefix;

			    java.lang.String type = fullTypeName
				    .substring(fullTypeName.indexOf(":") + 1);

			    if (!"Register".equals(type)) {
				// find namespace for the prefix
				java.lang.String nsUri = reader
					.getNamespaceContext().getNamespaceURI(
						nsPrefix);
				return (Register) ExtensionMapper
					.getTypeObject(nsUri, type, reader);
			    }

			}

		    }

		    // Note all attributes that were handled. Used to differ
		    // normal attributes
		    // from anyAttributes.
		    java.util.Vector handledAttributes = new java.util.Vector();

		    reader.next();

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sn").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sn" + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSn(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "pwd").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "pwd"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPwd(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "province")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "province"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setProvince(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "city")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "city"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setCity(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "trade")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "trade"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setTrade(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "entname")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "entname"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setEntname(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "linkman")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "linkman"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setLinkman(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "phone")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "phone"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPhone(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "mobile")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "mobile"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "email")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "email"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "fax").equals(reader
				    .getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "fax"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setFax(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "address")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "address"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setAddress(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "postcode")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "postcode"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setPostcode(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement()
			    && new javax.xml.namespace.QName(
				    "http://tempuri.org/", "sign")
				    .equals(reader.getName())) {

			nillableValue = reader.getAttributeValue(
				"http://www.w3.org/2001/XMLSchema-instance",
				"nil");
			if ("true".equals(nillableValue)
				|| "1".equals(nillableValue)) {
			    throw new org.apache.axis2.databinding.ADBException(
				    "The element: " + "sign"
					    + "  cannot be null");
			}

			java.lang.String content = reader.getElementText();

			object.setSign(org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString(content));

			reader.next();

		    } // End of if for expected property start element

		    else {

		    }

		    while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();

		    if (reader.isStartElement())
			// A start element we are not expecting indicates a
			// trailing invalid property
			throw new org.apache.axis2.databinding.ADBException(
				"Unexpected subelement " + reader.getName());

		} catch (javax.xml.stream.XMLStreamException e) {
		    throw new java.lang.Exception(e);
		}

		return object;
	    }

	}// end of factory class

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Balance param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Balance.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2 param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SMSTest param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SMSTest.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Msgid param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Msgid.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetFlag param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetFlag.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8 param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Report2DES param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Report2DES.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8 param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Report param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Report.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Gxmt param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Gxmt.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Bianliang param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Bianliang.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Register param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Register.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Mt param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Mt.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MtResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MtResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Mo2 param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Mo2.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetCode param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetCode.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetBalance param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetBalance.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.ChargUp param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.ChargUp.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.FileMT param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.FileMT.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Mo param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Mo.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MoResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MoResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.TestCode param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.TestCode.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetStatus param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetStatus.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param
		    .getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse.MY_QNAME,
			    org.apache.axiom.om.OMAbstractFactory
				    .getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UnRegister param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UnRegister.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Report2 param, boolean optimizeContent)
	    throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Report2.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.om.OMElement toOM(
	    org.sz.mbay.sms.sdk.WebServiceStub.Report2Response param,
	    boolean optimizeContent) throws org.apache.axis2.AxisFault {

	try {
	    return param.getOMElement(
		    org.sz.mbay.sms.sdk.WebServiceStub.Report2Response.MY_QNAME,
		    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Balance param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Balance.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2 param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.SMSTest param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.SMSTest.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Msgid param, boolean optimizeContent,
	    javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Msgid.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.GetFlag param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.GetFlag.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8 param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Report2DES param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Report2DES.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8 param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Report param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Report.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Gxmt param, boolean optimizeContent,
	    javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Gxmt.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Bianliang param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Bianliang.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Register param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Register.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.RECSMS.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Mt param, boolean optimizeContent,
	    javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.Mt.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.SendSMS.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Mo2 param, boolean optimizeContent,
	    javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.Mo2.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.GetCode param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.GetCode.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.GetBalance param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.GetBalance.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.ChargUp param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.ChargUp.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.FileMT param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.FileMT.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Mo param, boolean optimizeContent,
	    javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.Mo.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.TestCode param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.TestCode.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.GetStatus param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.GetStatus.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope
		    .getBody()
		    .addChild(
			    param.getOMElement(
				    org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx.MY_QNAME,
				    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.UnRegister param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.UnRegister.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory,
	    org.sz.mbay.sms.sdk.WebServiceStub.Report2 param,
	    boolean optimizeContent, javax.xml.namespace.QName methodQName)
	    throws org.apache.axis2.AxisFault {

	try {

	    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
		    .getDefaultEnvelope();
	    emptyEnvelope.getBody().addChild(
		    param.getOMElement(
			    org.sz.mbay.sms.sdk.WebServiceStub.Report2.MY_QNAME,
			    factory));
	    return emptyEnvelope;
	} catch (org.apache.axis2.databinding.ADBException e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}

    }

    /* methods to provide back word compatibility */

    /**
     * get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
	    org.apache.axiom.soap.SOAPFactory factory) {
	return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
	    java.lang.Class type, java.util.Map extraNamespaces)
	    throws org.apache.axis2.AxisFault {

	try {

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Balance.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Balance.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.BalanceResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo2Response.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SMSTest.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SMSTest.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SMSTestResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMT.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MmsFileMTResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Msgid.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Msgid.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MsgidResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_R.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMS_RResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetFlag.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetFlag.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetFlagResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMS_UTF8Response.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DES.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_DESResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfo.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetAllInfoResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuan.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetGaoDuanResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSend.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdAudioSendResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Report2DES.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Report2DES.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Report2DESResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_g.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_gResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSend.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdFaxSendResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx_UTF8Response.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Report.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Report.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.ReportResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_ex.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_exResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuan.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SetGaoDuanResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSendResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEX.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNEXResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UDPPwd.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UDPPwdResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AES.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_AESResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Gxmt.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Gxmt.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GxmtResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_R.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx_RResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Bianliang.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Bianliang.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.BianliangResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExEx.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetSmsExExResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Register.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Register.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RegisterResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceive.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsReceiveResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMS.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMS.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMSResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Mt.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Mt.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MtResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MtResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMS.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMS.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMSResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Mo2.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Mo2.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Mo2Response.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetCode.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetCode.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetCodeResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uex.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSend_uexResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetBalance.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetBalance.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetBalanceResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendF.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdMmsSendFResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.ChargUp.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.ChargUp.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.ChargUpResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.FileMT.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.FileMT.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.FileMTResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Mo.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Mo.Factory.parse(param
			.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MoResponse.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MoResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMSEx.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.RECSMSExResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.TestCode.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.TestCode.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.TestCodeResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNew.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MongateCsSpSendSmsNewResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_u.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MdSmsSend_uResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetStatus.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetStatus.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.GetStatusResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExEx.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.MongateCsGetStatusReportExExResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGN.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UDPSIGNResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UnRegister.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UnRegister.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.UnRegisterResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMSEx.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.SendSMSExResponse.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Report2.class.equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Report2.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	    if (org.sz.mbay.sms.sdk.WebServiceStub.Report2Response.class
		    .equals(type)) {

		return org.sz.mbay.sms.sdk.WebServiceStub.Report2Response.Factory
			.parse(param.getXMLStreamReaderWithoutCaching());

	    }

	} catch (java.lang.Exception e) {
	    throw org.apache.axis2.AxisFault.makeFault(e);
	}
	return null;
    }

}
